[{"path":"https://isaacvock.github.io/EZbakR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 EZbakR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/AverageAndRegularize.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"AverageAndRegularize","text":"","code":"library(EZbakR)"},{"path":[]},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/articles/CompareParameters.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CompareParameters","text":"","code":"library(EZbakR)"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/articles/EZget.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"EZget","text":"vignette shows use EZget() function provided EZbakR. cases multiple tables particular type EZbakRData object, can greatly facilitate extracting table interest. part vignette, also describe EZbakRData object organized.","code":"library(EZbakR)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZget.html","id":"ezbakrdata-objects","dir":"Articles","previous_headings":"","what":"EZbakRData objects","title":"EZget","text":"Let’s first analyze simulated data generate EZbakRData object can explore contents : EZbakRData object list can contain following items: cB: cB table provided upon object creation metadf: metadf table provided upon object creation fractions: List fractions estimates generated EstimateFractions(). kinetics: List kinetic parameter estimates generated EstimateKinetics() averages: List parameter replicate averages generated AverageAndRegularize() comparisons: List comparisons parameter averages, generated CompareParameters() readcounts: List tables read counts generated various EZbakR functions. metadata: List elements corresponding lists tables described . Describes various features tables can fetched EZget(). EZbakRData object list, elements can accessed ways:","code":"simdata <- EZSimulate(nfeatures = 300, nreps = 2)  # Make initial EZbakRData object ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate fractions twice, and don't overwrite the first analysis # Second run will use different model; see EstimateFractions vignette for details ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo, strategy = 'hierarchical', overwrite = FALSE) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> FITTING HIERARCHICAL TWO-COMPONENT MIXTURE MODEL: #> Estimating distribution of feature-specific pnews #> Estimating fractions with feature-specific pnews #> Processing output # Estimate kinetic parameters with three different strategies # See EstimateKinetics vignettes for details. ezbdo <- EstimateKinetics(ezbdo, repeatID = 1) ezbdo <- EstimateKinetics(ezbdo, repeatID = 1, strategy = \"NSS\") ezbdo <- EstimateKinetics(ezbdo, repeatID = 2, strategy = \"shortfeed\") # `$` notation: ezbdo$fractions$feature #> # A tibble: 1,800 × 6 #>    sample  feature fraction_highTC logit_fraction_highTC se_logit_fraction_hig…¹ #>    <chr>   <chr>             <dbl>                 <dbl>                   <dbl> #>  1 sample1 Gene1            0.103                  -2.17                  0.0618 #>  2 sample1 Gene10           0.224                  -1.24                  0.110  #>  3 sample1 Gene100          0.189                  -1.46                  0.0717 #>  4 sample1 Gene101          0.184                  -1.49                  0.0338 #>  5 sample1 Gene102          0.142                  -1.80                  0.0920 #>  6 sample1 Gene103          0.117                  -2.02                  0.0865 #>  7 sample1 Gene104          0.152                  -1.72                  0.0398 #>  8 sample1 Gene105          0.0836                 -2.39                  0.0868 #>  9 sample1 Gene106          0.178                  -1.53                  0.0888 #> 10 sample1 Gene107          0.162                  -1.65                  0.0465 #> # ℹ 1,790 more rows #> # ℹ abbreviated name: ¹​se_logit_fraction_highTC #> # ℹ 1 more variable: n <int> # `[[]]` notation ezbdo[['fractions']][['feature']] #> # A tibble: 1,800 × 6 #>    sample  feature fraction_highTC logit_fraction_highTC se_logit_fraction_hig…¹ #>    <chr>   <chr>             <dbl>                 <dbl>                   <dbl> #>  1 sample1 Gene1            0.103                  -2.17                  0.0618 #>  2 sample1 Gene10           0.224                  -1.24                  0.110  #>  3 sample1 Gene100          0.189                  -1.46                  0.0717 #>  4 sample1 Gene101          0.184                  -1.49                  0.0338 #>  5 sample1 Gene102          0.142                  -1.80                  0.0920 #>  6 sample1 Gene103          0.117                  -2.02                  0.0865 #>  7 sample1 Gene104          0.152                  -1.72                  0.0398 #>  8 sample1 Gene105          0.0836                 -2.39                  0.0868 #>  9 sample1 Gene106          0.178                  -1.53                  0.0888 #> 10 sample1 Gene107          0.162                  -1.65                  0.0465 #> # ℹ 1,790 more rows #> # ℹ abbreviated name: ¹​se_logit_fraction_highTC #> # ℹ 1 more variable: n <int> # `[[]]` notation with numeric indices ezbdo[[4]][[1]] #> # A tibble: 1,800 × 6 #>    sample  feature fraction_highTC logit_fraction_highTC se_logit_fraction_hig…¹ #>    <chr>   <chr>             <dbl>                 <dbl>                   <dbl> #>  1 sample1 Gene1            0.103                  -2.17                  0.0618 #>  2 sample1 Gene10           0.224                  -1.24                  0.110  #>  3 sample1 Gene100          0.189                  -1.46                  0.0717 #>  4 sample1 Gene101          0.184                  -1.49                  0.0338 #>  5 sample1 Gene102          0.142                  -1.80                  0.0920 #>  6 sample1 Gene103          0.117                  -2.02                  0.0865 #>  7 sample1 Gene104          0.152                  -1.72                  0.0398 #>  8 sample1 Gene105          0.0836                 -2.39                  0.0868 #>  9 sample1 Gene106          0.178                  -1.53                  0.0888 #> 10 sample1 Gene107          0.162                  -1.65                  0.0465 #> # ℹ 1,790 more rows #> # ℹ abbreviated name: ¹​se_logit_fraction_highTC #> # ℹ 1 more variable: n <int>"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZget.html","id":"using-ezget","dir":"Articles","previous_headings":"","what":"Using EZget","title":"EZget","text":"EZget() provides alternative strategy getting particular table. two required arguments: obj: EZbakRData object like get table . type: type table looking . Options “fractions”, “kinetics”, “readcounts”, “averages”, “comparisons”, lists tables described . remaining parameters search criteria specify. full list can seen function docs (?EZget()). except strings vectors strings input, metadata checked see provided string contained respective metadata slot. example, can extract kinetics table generated standard analysis like : cases, multiple tables exact metadata exist. example, metadata fractions tables : feature columns reads grouped. “feature” fractions tables. mutational populations analyzed. “TC” fractions tables. fraction_design table used. standard fraction_design single mutation type analysis fractions tables. Since set overwrite = FALSE second run EstimateFractions, tables saved. distinguishes final piece metadata saved tables: repeatID. numerical ID distinguishes multiple instances table. ID 1 first object created, 2 second, etc. Thus, analysis standard mixture model repeatID 1, analysis hierarchical mixture model repeatID 2. can thus access latter : three parameters tune EZget()’s behavior. : returnNameOnly: TRUE, names tables consistent search criterion specify returned. throw warning one table passes criteria, error case. returnNameOnly FALSE, error thrown one table matches search criteria. exactMatch: features populations arguments two arguments can vectors strings. Setting exactMatch TRUE force provided features populations vectors exactly match table’s metadata table returned. alternative (default) behavior, provided feature(s) population(s) contained table’s metadata. alwaysCheck: single table relevant type present EZbakRData object, EZget() automatically returns table without checking see search criteria match. set alwaysCheck TRUE, table searched normal returned metadata match search criteria.","code":"kinetics <- EZget(ezbdo,                   type = \"kinetics\",                   kstrat = \"standard\") h_fxn <- EZget(ezbdo,                 type = 'fractions',                repeatID = 2)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"EstimateFractions","text":"first step almost NR-seq analysis estimating much mutational population present feature sample. example, standard TimeLapse-seq/SLAM-seq/TUC-seq/etc. experiment, need first estimate fraction reads feature high T--C mutational content. EstimateFractions() designed exactly task. vignette, walk basics using EstimateFractions(), also diving unique functionality.","code":"library(EZbakR)  # Going to show one tidyr trick to help with cB filtering library(tidyr)  # Going to use a bit of dplyr magic in my demonstrations library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The basics","title":"EstimateFractions","text":"First, let’s simulate data showcase EstimateFractions() works: Technically, need run EstimateFractions(), providing EZbakRData object, fine: Despite , important realize EstimateFractions() automating lot things hood. particular, making following assumptions data: want analyze every mutational population tracked cB file. case, just “TC” column simulated cB. possible mutational populations present data. feature sets want estimate fractions includes unique combination feature columns cB. case, just “feature” column simulated cB. want filter rows feature columns string “__no_feature” “NA”. Rows multiple feature assignments given feature column split separate rows feature assignment. rest section, discuss adjust behaviors.","code":"simdata <- EZSimulate(nfeatures = 300, nreps = 2)  ezbdo <- EZbakRData(simdata$cB, simdata$metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"tuning-the-mutational-modeling","dir":"Articles","previous_headings":"The basics","what":"Tuning the mutational modeling","title":"EstimateFractions","text":"multiple mutation-type columns cB, like analyze subset , subset can specified using mutrate_populations argument: check ?EstimateFractions(), see default value “”, means use present mutation-type columns. addition, hood, EstimateFractions() creates termed fractions design matrix. “design matrix” really just data frame n + 1 columns, n number mutation-types analyzing. EZbakR provides lazily loaded examples check . “Standard” TC-fractions design matrix: one column mutation-type, one column called present. value mutation-type column either TRUE FALSE. TRUE indicates row describes population high levels mutation-type. first row example describes high T--C mutation content population. value present column denotes whether population expected present data. first row present value TRUE expect high T--C mutation content reads +label data (don’t worry -label controls, properly handled automatically). second row TC value FALSE, indicating pertains population reads low T--C mutation content. population also expected exist standard NR-seq dataset, present value also `TRUE. complicated example, consider fractions design matirx TILAC. TILAC method s4U labeled RNA population mixed s6G labeled population. case, expected reads either high T--C content (new reads s4U labeled sample), high G--content (new reads s6G labeled sample), reads low T--C G--mutational content (old reads either sample). However, NEVER expect read high T--C high G--content, samples subjected labels: present value TC == TRUE GA == TRUE row FALSE. dually high mutation population present data. populations present though, present values TRUE. can automatically generate fraction design table : default, create_fraction_design assumes possible populations present. can edit table better reflect true circumstances particular experiment. don’t provide fraction design table, EstimateFractions() use default output create_fraction_design() ensure possible populations modeled. rarely going truly accurate fraction design table multi-label experiments, conservative default can easily adjust.","code":"ezbdo <- EstimateFractions(ezbdo, mutrate_populations = \"TC\") #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output # Observe contents of cB standard_fraction_design # Observe contents of cB tilac_fraction_design # Three populations for fun: fd_table <- create_fraction_design(c(\"TC\", \"GA\", \"CG\")) fd_table"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"tuning-the-feature-set-choice-and-filtering","dir":"Articles","previous_headings":"The basics","what":"Tuning the feature set choice and filtering","title":"EstimateFractions","text":"fastq2EZbakR, upstream pipeline developed conveniently produce output compatible EZbakR, able assign reads lots different “features”. include genes, exonic regions genes, transcript equivalence classes, exon-exon junctions, . make full effective use diverse set feature assignments, important understand EstimateFractions() treat various feature columns cB. Often, interested analyzing subsets features separately. example, might make sense estimate fractions gene + transcript equivalence class combos performing isoform-level analyses (discussed later vignette), gene + exon-exon junction combos, standard exonic-gene feature, cB. can specify features use given analysis via setting features argument: example, one feature column called feature, practice, features argument can provided vector feature column names. Sometimes, read assignable given feature. case, likely characteristic string denotes failed assignment. current version fastq2EZbakR, \"__no_feature\" (though older versions NA, bit harder deal ; later). default thus EstimateFractions() filter rows cB analyzed features value. set remove_features argument, vector strings considered ripe filtering: can also use filter certain features, like “feature1” simulated example. mentioned though, analyzed feature columns need one remove_features strings order get filtered. behavior can changed opposite extreme, single feature needs fail test entire row get filtered : mentioned, older versions fastq2EZbakR bam2bakR denote failed assignment NA. default value remove_features includes string \"NA\", properly handle filtering columns actual value NA. can convert NA’s cB file tidyr::replace_na() whatever string please: Finally, feature assignments ambiguous. , one read assign multiple instances given feature. example, assigning reads exon-exon junctions, one read may overlap multiple exon-exon junctions. fastq2EZbakR, instances handled including names features read assigned , separated “+”. can see example inspect cB created EZbakR’s isoform simulator, SimulateIsoforms(). cases, want split rows multiple rows feature assignment. , can specify split_multi_features multi_feature_cols arguments: split_multi_features = TRUE copy data multi-feature assignment rows feature columns denoted multi_feature_cols. feature names multi-feature assigned reads different “+”, can addressed altering multi_feature_sep argument.","code":"ezbdo <- EstimateFractions(ezbdo, features = 'feature') #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo, remove_features = c(\"__no_feature\", \"feature1\")) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo, filter_condition = `|`) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output example_df <- data.frame(feature = c('A', NA, 'C'),                           other_feature = c(NA, 'Y', 'Z'))  replaced_df <- replace_na(example_df,                           list(feature = '__no_feature',                                other_feature = 'NA')) replaced_df ezbdo <- EstimateFractions(ezbdo,                            split_multi_features = TRUE,                            multi_feature_cols = \"feature\") #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"fancy-functionalities","dir":"Articles","previous_headings":"","what":"Fancy functionalities","title":"EstimateFractions","text":"last section, discussed EstimateFractions() basic functionality alter key behaviors. section, discuss cooler, niche analysis strategies EstimateFractions() can implement.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"hierarchical-mutation-rate-model","dir":"Articles","previous_headings":"Fancy functionalities","what":"Hierarchical mutation rate model","title":"EstimateFractions","text":"two-component mixture modeling strategy implemented tools like bakR GRAND-SLAM, largely considered “gold-standard” analyzing NR-seq data. Like statistical method though, makes assumptions, real data often violate assumptions. Namely, models typically assume every RNA synthesized presence metabolic label equal probability incorporating said label. true though?may seem like pedantic statistical question, evidence RNA’s deviate strongly assumption. example, noted (paper Churchman lab ) mitochondrial RNA much lower mutation rates reads new RNA RNA. account heterogeneity, EstimateFractions() can implement term “hierarchical” two-component mixture model. “Hierarchical” means new read mutation rate estimated feature, estimate strongly informed sample-wide average new read mutation rate. words, given feature enough coverage strong evidence new read mutation rate different sample-wide average, feature-specific mutation rate estimated used estimating fraction high mutation content reads feature. feature limited coverage though, new read mutation rate estimate strongly pushed towards sample-wide average. words, feature-specific mutation rates “regularized” towards sample-wide average. strategy take bit longer run can implemented : , feature-specific sample-wide mutation rates saved ezbdo$mutation_rates list.usual, let’s check results:  Still good! now, suggest using strategy caution though, technically still “experimental”. particular, watch extreme feature-specific mutation rates, can IDed ","code":"ezbdo <- EstimateFractions(ezbdo,                             strategy = 'hierarchical') #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> FITTING HIERARCHICAL TWO-COMPONENT MIXTURE MODEL: #> Estimating distribution of feature-specific pnews #> Estimating fractions with feature-specific pnews #> Processing output est <- EZget(ezbdo, type = 'fractions') truth <- simdata$PerRepTruth  compare <- dplyr::inner_join(est, truth, by = c('sample', 'feature'))  plot(compare$true_fraction_highTC,      compare$fraction_highTC) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"isoform-deconvolution","dir":"Articles","previous_headings":"Fancy functionalities","what":"Isoform deconvolution","title":"EstimateFractions","text":"many years now, tools estimate transcript isoform abundances RNA-seq data. include RSEM, kallisto, Salmon, many . Wouldn’t nice similarly estimate synthesis degradation rate constants individual transcript isoforms NR-seq data? EZbakR now implements analysis strategy! use , need cB reads assigned transcript equivalence class, just fancy way saying “set isoforms completely consistent”. fastq2EZbakR able , check documentation details. can simulate cB demonstration purposes: inspect cB simulated SimulateIsoforms(), note column called transcripts, represents transcript equivalence classes. transcript IDs transcripts read consistent separated “+”’s, though case, don’t want separate copy data isoform. Whether, want estimate fractions unique equivalence class: get isoform-specific estimates, need run new function, called EstimateIsoformFractions(). though, need import transcript isoform quantification estimates tools like RSEM, used EstimateIsoformFractions(). , can use ImportIsoformQuant(). ImportIsoformQuant() three parameters: obj: EZbakRData object want want add isoform quantification information files: named vector paths isoform quantification output file want import. names relevant sample names appear cB. quant_tool: tool used isoform quantification. ImportIsoformQuant() just convenient wrapper tximport::tximport, urge read tools’s documentation information (documentation ). example, hack solution, since don’t isoform quantification output use. technically something similar tough time using ImportIsoformQuant(), wouldn’t recommend : can see comparing ground truth:  simulation bit extreme around 50% isoform abundance differences assumed completely driven differences isoform stability, leads underestimation crazy extreme fraction news. though, looks good!","code":"# Simulates a single sample worth of data simdata_iso <- SimulateIsoforms(nfeatures = 300)  # We have to manually create the metadf in this case metadf <- data.frame(sample = 'sampleA',                       tl = 4,                       condition = 'A')  ezbdo <- EZbakRData(simdata_iso$cB,                     metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ### Hack in the true, simulated isoform levels reads <- simdata_iso$ground_truth %>%   dplyr::select(transcript_id, true_count, true_TPM) %>%   dplyr::mutate(sample = 'sampleA',                 effective_length = 10000) %>%   dplyr::rename(expected_count = true_count,                 TPM = true_TPM)  # Name of table needs to have \"isoform_quant\" in it ezbdo[['readcounts']][['simulated_isoform_quant']] <- reads  ### Perform deconvolution ezbdo <- EstimateIsoformFractions(ezbdo) #> Analyzing sample sampleA... est <- EZget(ezbdo,               type = 'fractions',              features = \"transcript_id\") truth <- simdata_iso$ground_truth  compare <- truth %>%   dplyr::inner_join(est, by = c(\"feature\", \"transcript_id\"))  plot(compare$true_fn,      compare$fraction_highTC) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"using-the-apache-arrow-backend","dir":"Articles","previous_headings":"Fancy functionalities","what":"Using the Apache Arrow backend","title":"EstimateFractions","text":"NOTE: documentation section lacks good examples don’t yet example external dataset included EZbakR’s installation. Thus, describing details analysis go without showing real analysis. Look change --distant future. massive dataset 10s samples like analyze? Loading entire cB table dataset memory surely crash laptops. access sort HPC cluster, course use , nothing like convenience interactivity working dataset personal computer. , EZbakR able use Apache Arrow’s R frontend (.e., arrow package) help large datasets. steps process described .","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"step-1-create-an-arrow-dataset","dir":"Articles","previous_headings":"Fancy functionalities > Using the Apache Arrow backend","what":"Step 1: Create an Arrow Dataset","title":"EstimateFractions","text":"need create Arrow Dataset partioned “sample” column cB. create set .parquet files, one file created sample. allow EstimateFractions() load data one sample time, hold single sample cB RAM time: See arrow documentation lot details tune dataset creation process. never load entire cB memory, though may use bit much RAM try add custom filtering summarization discussed arrows docs.","code":"library(arrow)  ### Move into the directory with your cB file setwd(\"Path/to/cB/containing/directory\")   ### This will not load the cB into memory  # You can run `read_csv(\"cB.csv.gz\", n_max = 1)` to check to see what # the order of the columns are, as this order needs to match your provided # schema. ds <- open_dataset(\"cB.csv.gz\",                     format = \"csv\",                    schema = schema(                      sample = string(),                      rname = string(),                      GF = string(),                      XF = string(),                      exon_bin = string(),                      bamfile_transcripts = string(),                      junction_start = string(),                      junction_end = string(),                      TC = int64(),                      nT = int32(),                      sj = bool(),                      n = int64()                    ),                    skip_rows=1)   ### Create Arrow dataset setwd(\"Path/to/where/you/want/to/write/Arrow/Dataset\") ds %>%   group_by(sample) %>%   write_dataset(\"fulldataset/\",                 format = \"parquet\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"step-2-create-ezbakrarrowdata-object","dir":"Articles","previous_headings":"Fancy functionalities","what":"Step 2: Create EZbakRArrowData object","title":"EstimateFractions","text":"can create EZbakRArrowData object similarly create standard EZbakRData object:","code":"ds <- arrow::open_dataset(\"Path/to/where/you/want/to/Arrow/Dataset/\")   metadf <- tibble(sample = c(\"WT_1\", \"WT_2\", \"WT_ctl\",                             \"KO_1\", \"KO_2\", \"KO_ctl\"),                  tl = c(2, 2, 0,                         2, 2, 0),                  genotype = rep(c('WT', 'KO'), each = 3))   ezbado <- EZbakRArrowData(ds, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"step-3-run-estimatefractions-like-normal","dir":"Articles","previous_headings":"Fancy functionalities","what":"Step 3: Run EstimateFractions like normal","title":"EstimateFractions","text":"Finally, just run EstimateFractions() settings normally use working EZbakRData object:","code":"ezbado <- EstimateFractions(ezbado,                             features = c(\"GF\", \"XF\",                                          \"junction_start\", \"junction_end\"),                             filter_cols = c(\"XF\", \"junction_start\",                                             \"junction_end\"),                             filter_condition = `|`,                             split_multi_features = TRUE,                             multi_feature_cols = c(\"junction_start\",                                                    \"junction_end\"))"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"EstimateKinetics","text":"Many tools","code":"library(EZbakR)"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"necessary-setup","dir":"Articles","previous_headings":"","what":"Necessary Setup","title":"EZbakR for people in a hurry","text":"need install load EZbakR. Instructions can found link. Setting seed also ensure exact reproducibility analyses simulated data shown vignette. Finally, use little bit dplyr showcase key results:","code":"library(EZbakR) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union set.seed(42)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-0-create-an-ezbakrdata-object","dir":"Articles","previous_headings":"","what":"Step 0: Create an EZbakRData Object","title":"EZbakR for people in a hurry","text":"use EZbakR, need create EZbakRData object. EZbakRData object consists two components: cB data frame metadf data frame. cB stands “counts binomial” contains information mutations seen sequencing reads sample sequenced. metadf stands “metadata data frame” contains information experimental details sample (.e., long metabolic label feed ). Examples data structures look like lazily loaded load EZbakR. means can call created , example_cB example_metadf: cB data frame consists rows corresponding groups reads identical data, data corresponds : Sample origin. noted sample column cB. Mutational content. noted one columns form  (e.g., TC example_cB). value columns correspond observed number mutations. Mutable nucleotide content. noted one columns form n (e.g., nT example_cB). value columns correspond number mutable bases overlapped read. GF: Stands “gene feature” represents gene (exonic intronic regions) read overlapped XF: Stands “exonic feature” represents gene (exonic regions ) read overlapped rname: Chromosome read came . final column cB data frame n, number reads identical data columns. cB data frames easily obtained Snakemake pipeline fastq2EZbakR, available . metadf table following required columns: sample: Sample name, shows cB table. Metabolic label time information. single label, documented column called tl. used multiple labels, different label times noted column called tl_,  denotes type mutation conversion label yields. example, using s4U (conversion yields T--C mutations) s6G (conversion yields G--mutations), metadf include columns tl_TC tl_GA. remaining columns can named anything want describe aspects experiment. NOTE: currently exclusively interpreted discrete factors. Things like time-series modeling currently supported, may future releases. factors used deciding group samples averaging replicate data performing comparative analyses. later! cB metadf table, can create EZbakRData object: Now, let’s generate simulated data used remaining steps:","code":"# Check out examples: example_cB example_metadf ezbdo <- EZbakRData(example_cB, example_metadf) # Simulate 500 \"genes\" worth of data   # Simulates 2 replicates of 2 different experimental conditions simdata <- EZSimulate(nfeatures = 500, nreps = 2)  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-1-estimatefractions","dir":"Articles","previous_headings":"","what":"Step 1: EstimateFractions()","title":"EZbakR for people in a hurry","text":"first step NR-seq analysis figure fraction reads come expected mutational population. example, standard s4U labeling NR-seq experiment, reads high T--C mutation population reads low T--C mutation population. Technically, involves two steps: 1) estimating mutation rates two populations labeled sample 2) estimating fractions. steps performed single function EZbakR: EZbakRFractions(): See ?EstimateFractions() details descriptions optional parameters. can use simulated ground truth assess estimate accuracy confirm method working:  Looks good!","code":"ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output # Simulated ground truth truth <- simdata$PerRepTruth  # Get fraction estimates.    # Can also access with ezbdo$fractions[[1]] or ezbdo$fractions$feature est <- EZget(ezbdo, type = 'fractions')  # Combine compare <- dplyr::inner_join(est, truth, by = c('sample', 'feature'))  # Assess accuracy plot(compare$true_fraction_highTC, compare$fraction_highTC) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-2-estimatekinetics","dir":"Articles","previous_headings":"","what":"Step 2: EstimateKinetics()","title":"EZbakR for people in a hurry","text":"next step standard NR-seq analysis use estimates mutational population proportions (possibly normalized read counts) estimate kinetic parameters interest (e.g., degradation synthesis rate constants). simplest quickest way EstimateKinetics(): default, uses standard, steady-state, single rate constant model RNA metabolism infer degradation rate constant (kdeg) synthesis rate constant (ksyn) gene. analysis strategies implemented EstimateKinetics() include appropriate non-steady-state systems short label times. strategy argument EstimateKinetics() sets analysis strategy used. See ?EstimateKinetics details. , let’s compare ground_truth:  Great!","code":"ezbdo <- EstimateKinetics(ezbdo) # Simulated ground truth truth <- simdata$PerRepTruth  # Get fraction estimates.    # Can also access with ezbdo$fractions[[1]] or ezbdo$fractions$feature est <- EZget(ezbdo, type = 'kinetics')  # Combine compare <- dplyr::inner_join(est, truth, by = c('sample', 'feature'))  # Assess accuracy plot(log(compare$true_kdeg), compare$log_kdeg) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-3-averageandregularize","dir":"Articles","previous_headings":"","what":"Step 3: AverageAndRegularize()","title":"EZbakR for people in a hurry","text":"Typically, multiple replicates experimental condition. case, next step average data across replicates estimate overall uncertainties. can passed along downstream comparative analyses see features differences kinetic parameters different experimental conditions. averaging process done AverageAndRegularize(): See ?AverageAndRegularize() details. One cool thing AverageAndRegularize() implements heteroskedastic linear model can thus passed formula objects detail like stratify samples, whether batches like regress main parameter effects. See relevant vignette details. Finally, setting parameter = \"log_kdeg\" technically necessary default, showcases need specify kinetic parameter want average across replicates. run different parameter, new table added ezbdo$averages list: Let’s make sure estimates still accurate:  good!","code":"ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_kdeg\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_ksyn\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates truth <- simdata$AvgTruth  est <- EZget(ezbdo, type = 'averages', parameter = 'log_kdeg')  compare <- dplyr::inner_join(truth, est, by = 'feature')  plot(compare$true_logkdeg_treatmenttreatment1,      compare$mean_treatmenttreatment1) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-4-compareparameters","dir":"Articles","previous_headings":"","what":"Step 4: CompareParameters()","title":"EZbakR for people in a hurry","text":"replicate averaged parameter estimates, can compare assess “statistical significance” observed differences. done CompareParameters(): addition providing EZbakRData object output AverageAndRegularize(), also need specify three arguments: condition: metadf column (function columns) replicates stratified . simulated metadf single experimental detail column called treatment, condition . reference: value condition want consider “reference” level. experimental: value condition want consider “experimental” level. , parameter’s default value “log_kdeg”, specified explicit.CompareParameters() calculate difference average parameter : experimental - reference. EZbakR provides convenient visualization functions inspect output CompareParameters(). Volcano plot:  MA plot:","code":"ezbdo <- CompareParameters(ezbdo,                            condition = 'treatment',                            reference = 'treatment1',                            experimental = 'treatment2',                            parameter = \"log_kdeg\") EZVolcanoPlot(ezbdo, parameter = \"log_kdeg\",               condition = 'treatment',               reference = 'treatment1',               experimental = 'treatment2') EZMAPlot(ezbdo, parameter = \"log_kdeg\",          condition = 'treatment',          reference = 'treatment1',          experimental = 'treatment2')"},{"path":"https://isaacvock.github.io/EZbakR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Isaac Vock. Author, maintainer.","code":""},{"path":"https://isaacvock.github.io/EZbakR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vock (2024). EZbakR: Analyze Integrate Type Nucleotide Recoding RNA-seq Data. R package version 0.0.0.9000, https://isaacvock.github.io/EZbakR/.","code":"@Manual{,   title = {EZbakR: Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data},   author = {Isaac Vock},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://isaacvock.github.io/EZbakR/}, }"},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"welcome-to-the-alpha-release-of-ezbakr","dir":"","previous_headings":"","what":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"EZbakR one-stop-shop analyses nucleotide recoding RNA-seq datasets(NR-seq). NR-seq refers class methods (e.g., TimeLapse-seq, SLAM-seq, TUC-seq, etc.) combine RNA-seq, metabolic labeling, unique metabolic label recoding chemistries. methods originally developed dissect kinetics RNA synthesis degradation. Excitingly though, treasure trove extensions original methods created years. -date, nucleotide recoding combined TT-seq, Start-seq, Ribo-seq, scRNA-seq, Perturb-seq, subcellular fractionation, just name extensions. addition, original methods used 4-thiouridine (s4U), chemistry found work 6-thioguanosine (s6G), opening door dual-labeling experimental designs (e.g., TILAC). install update, run: point, changes made weekly, updating frequently highly suggested.","code":"library(devtools) devtools::install_github(\"isaacvock/EZbakR\")"},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s new?","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"EZbakR represents complete rewrite bakR. Improvements implemented EZbakR include: Modular function design facilitates using EZbakR kind NR-seq data, regardless experimental design data details. Support multi-label analyses. Hierarchical mutation rate estimation strategy allow feature-specific mutation rates. efficient accurate uncertainty quantification Non-steady-state analyses introduced Narain et al., 2021 Short-feed analyses assume negligible degradation existing RNA Synthesis rate estimation implemented part strategies. Improved uncertainty propogation achieve performance bakR’s slower implementations (Hybrid MCMC) strategy efficient bakR’s efficent implementation (MLE). Removal Stan dependencies. love Stan, R package dependency makes installation maintenace difficult. Optional Apache arrow backend help analyses larger--RAM datasets Linear model-based averaging replicate data support complex experimental designs maximally flexible comparative analyses. Greater flexibility terms input data structure. Namely, multiple different features can specified input cB table, multiple different experimental details can included input metadf table. novel transcript isoform deconvolution strategy allows isoform-specific kinetic parameter estimation. near future, EZbakR support: 1. Alternative overdisperse mixture modeling strategies. 2. Generalized dynamical systems modeling NR-seq data. 3. Anything bakR can isn’t currently implemented (Namely DissectMechanisms(), QC_checks(), various visualization functions).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":null,"dir":"Reference","previous_headings":"","what":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"AverageAndRegularize uses linear model average estimates parameter interest replicates, get averages set conditions specified user. specification done formulas used create design matrix parameters estimate. Currently, design matrices yield much longer runtimes others. due design matrices necessitating numerically estimating set maximum likelihood parameters, others yield simple, analytic approximations quick calculate. example, formulas ~ treatment ~ treatment:duration quick fit, formulas ~ treatment + batch currently much slower fit. eventually remedied approximation solution full models.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"","code":"AverageAndRegularize(   obj,   features = NULL,   parameter = \"log_kdeg\",   repeatID = NULL,   formula_mean = NULL,   formula_sd = NULL,   include_all_parameters = TRUE,   sd_reg_factor = 10,   error_if_singular = TRUE,   min_reads = 10,   force_optim = FALSE,   character_limit = 20,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"obj EZbakRFractions object, EZbakRData object EstimateFractions() run. features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. parameter Parameter average across replicates given condition. repeatID multiple kinetics fractions tables exist metadata, numerical index distinguished. formula_mean R formula object specifying parameter interest depends sample characteristics specified obj's metadf. common formula ~ treatment ~ treatment:duration, treatment duration replaced whatever called relevant sample characteristics metadf. ~ treatment means average value parameter estimated set samples value treatment metadf. ~ treatment:duration specifies average value parameter estimated set samples combination treatment duration values metadf. example latter case situation two treatments (e.g., drug treated untreated control) applied different durations time (e.g., 4 8 hours). formula_sd formula_mean, time specifying variance replicate estimates parameter depends sample characteristics specified obj's metadf. Unlike standard linear modeling, allows specify heteroskedastic model. suggest allowing parameter's variance depend \"treatment\" condition, changes relative RNA abundance can impact parameter variance, differential expression caused \"treatment\" impact parameter variance. include_all_parameters TRUE, additional table saved prefix fullfit_, includes parameters estimated throughout course linear modeling regularization. can nice visualizing regularized mean-variance trend. sd_reg_factor Determines strongly variance estimates shrunk towards trend. Higher numbers lead regularization. Eventually, replaced estimation much variance seems population variances. error_if_singular TRUE, linear model throw error parameters uniquely identified. often caused parameters estimated data, e.g., due limited replicate numbers correlated sample characteristics (.e., treatment also correspond batch , treatment Bs correspond batch Bs). min_reads Minimum number reads samples feature kept. force_optim Perform numerical likelihood estimation, even efficient, approximate, analytical strategy possible given formula_mean formula_sd. character_limit Limit number characters name given output table. attempt concatenate parameter name names features. long, parameter name used. overwrite TRUE, identical, existing output overwritten.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get contrasts of estimated parameters — CompareParameters","title":"Get contrasts of estimated parameters — CompareParameters","text":"Get contrasts estimated parameters","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get contrasts of estimated parameters — CompareParameters","text":"","code":"CompareParameters(   obj,   condition,   reference,   experimental,   features = NULL,   repeatID = NULL,   overwrite = TRUE,   parameter = \"log_kdeg\" )"},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get contrasts of estimated parameters — CompareParameters","text":"obj EZbakRFit object, EZbakRFractions object AverageAndRegularize() run. condition Name factor metadf whose parameter estimates different factor values like compare. reference Name reference condition factor level value. Difference calculated experimental - reference. experimental Name condition factor level value compare reference. Difference calculated experimental - reference. features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. repeatID multiple averages tables exist metadata, numerical index distinguished. overwrite TRUE, identical output overwritten exists. parameter Parameter average across replicates given condition.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"Correct experimental/bioinformatic dropout labeled RNA.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"","code":"CorrectDropout(obj, grouping_factors = NULL, features = NULL)"},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"obj EZbakRFractions object, EZbakRData object run EstimateFractions(). grouping_factors sample-detail columns metadf used group -s4U samples calculating average -s4U RPM? default value NULL cause sample-detail columns used. features Character vector set features want stratify reads estimate proportions RNA population. default NULL expect one fractions table EZbakRFractions object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an MAPlot from EZbakR comparison — EZMAPlot","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"Make MAPlot EZbakR comparison","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"","code":"EZMAPlot(   obj,   parameter = \"log_kdeg\",   condition = NULL,   reference = NULL,   experimental = NULL,   features = NULL,   plotlog2 = TRUE,   FDR_cutoff = 0.05,   difference_cutoff = 0,   size = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"obj object class EZbakRCompare, EZbakRData object run CompareParameters parameter Name parameter whose comparison want plot. condition Name condition want plot comparison two levels. Condition name column appears metadf table. reference Name reference level comparison. experimental Name experimental level comparison. features Character vector feature names comparisons made. plotlog2 TRUE, assume log(parameter) difference passed want plot log2(parameter) difference. FDR_cutoff False discovery cutoff color points. difference_cutoff Minimum absolute difference cutoff color points. size Size points, passed geom_point() size parameter. specified, point size automatically chosen.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"EZSimulate() user friendly wrapper SimulateMultiCondition(). sets convenient defaults quickly generate easy interpret output. EZSimulate() parameters SimulateMultiCondition(), also number additional parameters guide default behavior allow simulate multi-condition data without specifying multiple, sometimes complex, arguments need specify SimulateMultiCondition() get behavior. particular, users set single parameter, nfeatures (number features simulate data ), default. EZSimulate()-unique parameters ntreatments nreps default values guide simulation case nfeatures specified. particular, nreps ntreatments different conditions simulated, assumed model log(kdeg) ~ treatment log(ksyn) ~ 1. words, Different kdeg values simulated treatment level, ksyn values differ across conditions.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"","code":"EZSimulate(   nfeatures,   ntreatments = 2,   nreps = 3,   nctlreps = 1,   metadf = NULL,   mean_formula = NULL,   param_details = NULL,   seqdepth = nfeatures * 2500,   label_time = 2,   pnew = 0.05,   pold = 0.001,   readlength = 200,   Ucont = 0.25,   feature_prefix = \"Gene\",   dispslope = 5,   dispint = 0.01,   logkdegsdtrend_slope = -0.3,   logkdegsdtrend_intercept = -2.25,   logksynsdtrend_slope = -0.3,   logksynsdtrend_intercept = -2.25,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   logkdeg_diff_avg = 0,   logksyn_diff_avg = 0,   logkdeg_diff_sd = 0.5,   logksyn_diff_sd = 0.5,   pdiff_kd = 0.1,   pdiff_ks = 0,   pdiff_both = 0,   pdo = 0 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"nfeatures Number \"features\" (e.g., genes) simulated data. ntreatments Number distinct treatments simulate. parameter relevant metadf provided. nreps Number replicates treatment simulate. parameter relevant metadf provided nctlreps Number -s4U replicates treatment simulate. parameter relevant metadf provided. metadf data frame following columns: sample: Names given samples simulate. : number columns names (taken metadf columns) storing factors samples can stratified. can referenced mean_formula, described . parameters (described ) can also included metadf specify sample-specific simulation parameter: seqdepth label_time pnew pold readlength Ucont mean_formula formula object specifies linear model used relate factors  columns metadf average log(kdegs) log(ksyns) sample. param_details data frame one row column design matrix obtained model.matrix(mean_formula, metadf) describes simulate linear model parameters. columns data frame : param: Name linear model parameter appears column names design matrix model.matrix(mean_formula, metadf). reference: Boolean; TRUE want treat parameter \"reference\". means parameter values global parameters set equal unless otherwise determined (see pdiff_* parameters determined parameter differ reference). global: Boolean; TRUE want treat parameter global parameter. means single value used features. logkdeg_mean: parameter reference, value log(kdeg) linear model drawn normal distribution mean. global parameter, value used. neither , value log(kdeg) linear model either reference (difference condition's value reference) reference's value + normally distributed random variable centered value. logkdeg_sd: sd used draws normal distribution described logkdeg_mean. logksyn_mean: logkdeg_mean log(ksyn) linear model. logksyn_sd: logkdeg_sd log(kdeg) linear model. pdiff_ks: Proportion features whose value parameter log(ksyn) linear model differ reference's. number 0 1, inclusive. example, pdiff_ks 0.1, 10% features, parameter equal reference parameter + normally distributed random variable mean logksyn_mean sd logksyn_sd. 90% features, parameter equal reference. pdiff_kd: pdiff_ks log(kdeg) linear model. pdiff_both: Proportion features whose value parameter log(kdeg) log(ksyn) linear models differ reference. Value must 0 min(c(pdiff_kd, pdiff_ks)) row. param_details specified user, first column design matrix assumed represent reference parameter, parameters assumed non-global, logkdeg_mean logksyn_mean set equivalently named parameter values described reference logkdeg_diff_avg logksyn_diff_avg parameters, logkdeg_sd logksyn_sd set equivalently named parameter values described reference logkdeg_diff_sd logksyn_diff_sd parameters, pdiff_kd, pdiff_ks, pdiff_both set equivalently named parameter values. seqdepth relevant read_vect provided; case, total number reads simulate. label_time Length s^4U feed simulate. pnew Probability T mutated C read new. pold Probability T mutated C read old. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. dispslope Negative binomial dispersion parameter \"slope\" respect read counts. See DESeq2 paper dispersion model used. dispint Negative binomial dispersion parameter \"intercept\" respect read counts. See DESeq2 paper dispersion model used. logkdegsdtrend_slope Slope log10(read count) vs. log(kdeg) replicate variability trend logkdegsdtrend_intercept Intercept log10(read count) vs. log(kdeg) replicate variability trend logksynsdtrend_slope Slope log10(read count) vs. log(ksyn) replicate variability trend logksynsdtrend_intercept Intercept log10(read count) vs. log(ksyn) replicate variability trend logkdeg_mean Mean normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logkdeg_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_mean Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logksyn_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_avg Mean normal distribution non-reference log(kdeg) linear model parameters drawn feature param_details provided. logksyn_diff_avg Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_diff_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. pdiff_kd Proportion features non-reference log(kdeg) linear model parameters differ reference. pdiff_ks Proportion features non-reference log(ksyn) linear model parameters differ reference. pdiff_both Proportion features non-reference log(kdeg) log(ksyn) linear model parameters differ reference. ksyns simulated pdo Dropout rate; think probability s4U containing molecule lost library preparation sequencing. pdo 0 (default) dropout.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"Make VolcanoPlot EZbakR comparison","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"","code":"EZVolcanoPlot(   obj,   parameter = \"log_kdeg\",   condition = NULL,   reference = NULL,   experimental = NULL,   features = NULL,   plotlog2 = TRUE,   FDR_cutoff = 0.05,   difference_cutoff = 0,   size = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"obj object class EZbakRCompare, EZbakRData object run CompareParameters parameter Name parameter whose comparison want plot. condition Name condition want plot comparison two levels. Condition name column appears metadf table. reference Name reference level comparison. experimental Name experimental level comparison. features Character vector feature names comparisons made. plotlog2 TRUE, assume log(parameter) difference passed want plot log2(parameter) difference. -: probably best change general scale parameter parameter multiplied. Default log2(exp(1)) convert log() log2(). FDR_cutoff False discovery cutoff color points. difference_cutoff Minimum absolute difference cutoff color points. size Size points, passed geom_point() size parameter. specified, point size automatically chosen.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRArrowData object helper function for users — EZbakRArrowData","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"EZbakRArrowData creates object class EZbakRArrowData checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"","code":"EZbakRArrowData(cBds, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"cBds ArrowDataset following fields: sample: Name given particular sample data collected. mutational counts: Integers corresponding number particular mutation seen sequencing read. following column names allowed: TC: Number Thymine--Cytosine mutations TA: Number Thymine--Adenine mutations TG: Number Thymine--Guanine mutations CT: Number Cytosine--Thymine mutations CA: Number Cytosine--Adenine mutations CG: Number Cytosine--Guanine mutations CU: Number Cytosine--Uridine mutations : Number Adenine--Thymine mutations AC: Number Adenine--Cytosine mutations AG: Number Adenine--Guanine mutations AU: Number Adenine--Uridine mutations GT: Number Guanine--Thymine mutations GC: Number Guanine--Cytosine mutations GA: Number Guanine--Adenine mutations GU: Number Guanine--Uridine mutations TN: Number Thymine--Adenine/Cytosine/Guanine mutations CN: Number Cytosine--Adenine/Thymine/Guanine/Uridine mutations : Number Adenine--Thymine/Cytosine/Guanine/Uridine mutations GN: Number Guanine--Adenine/Cytosine/Thymine/Uridine mutations UN: Number Uridine--Adenine/Cytosine/Guanine mutations NT: Number Adenine/Cytosine/Guanine--Thymine mutations NC: Number Adenine/Thymine/Guanine/Uridine--Cytosine mutations NtoA: Number Thymine/Cytosine/Guanine/Uridine--Adenine mutations. (Naming convention changed NA taken) NU: Number Cytosine/Guanine/Adenine--Uridine mutations. NN: Number kind mutation base nucleotide count: Integers corresponding number instances particular type nucleotide whose mutations tracked corresponding mutation count column. following column names allowed: nT: Number Thymines nG: Number Guanines nA: Number Adenines nC: Number Cytosines nU: Number Uridines nN: number kind nucleotide features: columns interpreted mutation count base nucleotide count (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. metadf Data frame detailing various aspects samples included cBds. includes: sample: sample ID, correspond sample ID provided cBds. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type count column cBds label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"EZbakRArrowData object. simply list provide cBds metadf class EZbakRArrowData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRData object helper function for users — EZbakRData","title":"EZbakRData object helper function for users — EZbakRData","text":"EZbakRData creates object class EZbakRData checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRData object helper function for users — EZbakRData","text":"","code":"EZbakRData(cB, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRData object helper function for users — EZbakRData","text":"cB Data frame following columns: sample: Name given particular sample data collected. mutational counts: Integers corresponding number particular mutation seen sequencing read. following column names allowed: TC: Number Thymine--Cytosine mutations TA: Number Thymine--Adenine mutations TG: Number Thymine--Guanine mutations CT: Number Cytosine--Thymine mutations CA: Number Cytosine--Adenine mutations CG: Number Cytosine--Guanine mutations CU: Number Cytosine--Uridine mutations : Number Adenine--Thymine mutations AC: Number Adenine--Cytosine mutations AG: Number Adenine--Guanine mutations AU: Number Adenine--Uridine mutations GT: Number Guanine--Thymine mutations GC: Number Guanine--Cytosine mutations GA: Number Guanine--Adenine mutations GU: Number Guanine--Uridine mutations TN: Number Thymine--Adenine/Cytosine/Guanine mutations CN: Number Cytosine--Adenine/Thymine/Guanine/Uridine mutations : Number Adenine--Thymine/Cytosine/Guanine/Uridine mutations GN: Number Guanine--Adenine/Cytosine/Thymine/Uridine mutations UN: Number Uridine--Adenine/Cytosine/Guanine mutations NT: Number Adenine/Cytosine/Guanine--Thymine mutations NC: Number Adenine/Thymine/Guanine/Uridine--Cytosine mutations NtoA: Number Thymine/Cytosine/Guanine/Uridine--Adenine mutations. (Naming convention changed NA taken) NU: Number Cytosine/Guanine/Adenine--Uridine mutations. NN: Number kind mutation base nucleotide count: Integers corresponding number instances particular type nucleotide whose mutations tracked corresponding mutation count column. following column names allowed: nT: Number Thymines nG: Number Guanines nA: Number Adenines nC: Number Cytosines nU: Number Uridines nN: number kind nucleotide features: columns interpreted mutation count base nucleotide count (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. metadf Data frame detailing various aspects samples included cB. includes: sample: sample ID, correspond sample ID provided cB. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type count column cB label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRData object helper function for users — EZbakRData","text":"EZbakRData object. simply list provide cB metadf class EZbakRData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRFractions helper function for users — EZbakRFractions","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"EZbakRFractions creates object class EZbakRFractions checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"","code":"EZbakRFractions(fractions, metadf, name = NULL, character_limit = 20)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"fractions Data frame following columns: sample: Name given particular sample data collected. estimates population fractions: columns refer estimate fraction reads coming particular mutational population. example, standard NR-seq experiment, one column named fraction_highTC. refers fraction RNA inferred high T--C mutation rate (e.g., newly synthesized RNA pulse-labeling NR-seq experiment). estimated fractions 2 mutation types (e.g., T--C G--), need explicitly list fractions interest estimated. example, TILAC experiment, fraction_highTC_lowGA, fraction_lowTC_highGA, fraction_lowTC_lowGA. n: Number reads assigned given feature given sample. features: columns interpreted estimate population fractions (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. metadf Data frame detailing various aspects samples included fractions data frame. includes: sample: sample ID, correspond sample ID provided fractions data frame. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type referenced fractions label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects name Optional; name give fractions table. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"EZbakRFractions object. simply list provide fractions metadf class EZbakRFractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRKinetics helper function for users — EZbakRKinetics","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"EZbakRKinetics creates object class EZbakRKinetics checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"","code":"EZbakRKinetics(kinetics, metadf, features, name = NULL, character_limit = 20)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"kinetics Data frame following columns: sample: Name given particular sample data collected. features: columns interpreted mutation count base nucleotide count (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. kinetic parameter estimates: can named whatever like long start string \"se_\". reserved kinetic parameter uncertainties, provided. kinetic parameter uncertainties: Uncertainty kinetic parameter estimates. named \"se_\" followed kinetic parameter name appears relevant column name kinetics table. metadf Data frame detailing various aspects samples included kinetics data frame. includes: sample: sample ID, correspond sample ID provided kinetics data frame. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type referenced fractions label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects assay: optional column include string describes type experiment done influence EZbakR analyzes interprets data samples. Possible values assay currently include: standard: Refers \"standard\" nucleotide recoding RNA-seq methods (e.g., TimeLapse-seq, SLAM-seq, TUC-seq, etc.), cells fed single metabolic label, RNA extracted sequenced, mutations particular type counted STL: Refers Start-TimeLapse-seq, method combining Start-seq (developed Karen Adelman's lab) TimeLapse-seq. Used infer kinetics transcription initiation promoter-proximal pause site departure. TT: Refers Transient-Transcriptome NR-seq, method combining TT-seq (developed Patrick Cramer's lab) NR-seq. TT-seq involves biochemically enriching labeled RNA. combining method nucleotide recoding chemistry (first done Simon lab TT-TimeLapse-seq since done SLAM chemistry, often referred TTchem-seq), possible bioinformatically filter reads coming unlabeled RNA background. TILAC: Refers TILAC, method developed Simon lab achieve spike-free normalization RNA-seq data use dual labeling approach inspired proteomic method SILAC. subcellular: Refers techniques subcellular TimeLapse-seq (developed Stirling Churchman's lab) combine subcellular fractionation NR-seq infer additional kinetic parameters. sc: Refers single-cell RNA-seq implementations NR-seq. features Features tracked kinetics data frame. Needs specified explicitly automatically inferred. name Optional; name give fractions table. character_limit name chosen automatically, limit number characters said name. default name yields string longer , kinetics table named kinetics1","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"EZbakRKinetics object. simply list provided kinetics metadf class EZbakRKinetics","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily get EZbakR table of estimates of interest — EZget","title":"Easily get EZbakR table of estimates of interest — EZget","text":"Easily get EZbakR table estimates interest","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily get EZbakR table of estimates of interest — EZget","text":"","code":"EZget(   obj,   type = c(\"fractions\", \"kinetics\", \"readcounts\", \"averages\", \"comparisons\"),   features = NULL,   populations = NULL,   fraction_design = NULL,   isoforms = NULL,   kstrat = NULL,   parameter = NULL,   counttype = NULL,   condition = NULL,   experimental = NULL,   reference = NULL,   repeatID = NULL,   returnNameOnly = FALSE,   exactMatch = FALSE,   alwaysCheck = FALSE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily get EZbakR table of estimates of interest — EZget","text":"obj EZbakRData object type class EZbakR outputs like search . Equivalent name list EZbakRData object contains tables interest. features Features must present table interest. exactMatch TRUE, features must also features present table. populations relevant type == \"fractions\". Mutational populations must analyzed generate table interest. fraction_design relevant type == \"fractions\". Fraction design table used generate table interest. isoforms relevant table result isoform deconvolution kstrat relevant type == \"kinetics\". Short \"kinetics strategy\"; strategy used infer kinetic parameters. parameter relevant type == \"averages\" \"comparisons\". parameter averaged compared? counttype String denoting type read count information looking . Current options \"TMM_normalized\", \"transcript\", \"matrix\". -: sure used way currently... condition Condition specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". experimental Experimental condition specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". reference Reference condition specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". repeatID Numerical ID duplicate objects metadata. returnNameOnly TRUE, names tables passed search criteria returned. Else, single table passing search criteria returned. one table passes search criteria returnNameOnly == FALSE, error thrown. exactMatch TRUE, features populations, can vectors, ensure provided vectors features populations exactly match relevant metadata vectors. alwaysCheck TRUE, even single table type interest, still run checks queries.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate fractions of each RNA population using Apache Arrow backend. — EstimateFractions.EZbakRArrowData","title":"Estimate fractions of each RNA population using Apache Arrow backend. — EstimateFractions.EZbakRArrowData","text":"alternative default EstimateFractions method can help analyses larger RAM datasets. provided \"cB\" expected -disk Arrow Dataset. Furthermore, expected partitioned sample name, allow method read single-sample worth data memory time. can significantly reduce RAM usage. Input object created EZbakRArrowData().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate fractions of each RNA population using Apache Arrow backend. — EstimateFractions.EZbakRArrowData","text":"","code":"# S3 method for EZbakRArrowData EstimateFractions(   obj,   features = \"all\",   mutrate_populations = \"all\",   fraction_design = NULL,   Poisson = TRUE,   strategy = c(\"standard\", \"hierarchical\"),   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   split_multi_features = FALSE,   multi_feature_cols = NULL,   multi_feature_sep = \"+\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   hier_readcutoff = 300,   init_pnew_prior_sd = 0.8,   pnew_prior_sd_min = 0.01,   pold_est = NULL,   character_limit = 20,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate fractions of each RNA population using Apache Arrow backend. — EstimateFractions.EZbakRArrowData","text":"obj EZbakRArrowData object features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB file. mutrate_populations Character vector set mutational populations want infer rates mutations . default, mutation rates estimated populations present cB. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. call function create_fraction_design(...), providing vector mutational population names input, create fraction_design table , assumption every single possible combination mutational populations present data. can edit present column necessary get appropriate fraction_design use case. See details required contents fraction_design interpretation. fraction_design must one column per element mutrate_populations, columns sharing name mutrate_populations. must also one additional column named present. elements fraction_design booleans (TRUE FALSE). include possible combinations TRUE FALSE mutrate_populations columns. TRUE one columns represents population RNA expected background mutation rates type. present denote whether population RNA expected exist data. example, assume typical TimeLapse-seq/SLAM-seq/TUC-seq/etc. experiment fed cells s^4U recoded incorporated s^4U nucleotide reverse transcriptase read cytosine. means mutrate_populations \"TC\", since want estimate fraction RNA s^4U labeled, .e., fraction high T--C mutation content. fraction_design thus two columns: TC present. also two rows. One rows must value TRUE TC, must value FALSE. row value TRUE TC represents population reads high T--C mutation content, .e., reads RNA synthesized s^4U present. row value FALSE TC reprsents population reads low T--C mutation content, .e., reads RNA existed prior s^4U labeling. populations exist data, value present column TRUE . See lazily loaded standard_fraction_design object example tibble look like. (\"lazily loaded standard_fraction_design object\" means run print(standard_fraction_design) loading EZbakR library(EZbakR), can see contents. specifically, lazily loaded means table loaded memory ask , via something like print() call.) another example, consider TILAC, NR-seq extension developed Simon lab. TILAC originally described Courvan et al., 2022. method, two populations RNA, one s^4U fed cells one s^6G fed cells, pooled prepped sequencing together. allows internally controlled comparisons RNA abundance without spike-ins. s^4U recoded cytosine analog TimeLapse chemistry (similar chemistry) s^6G recoded adenine analog. Thus, fraction_design includes columns called TC GA. unique aspect TILAC fraction_design table one possible populations, TC GA TRUE, denoted present (present = FALSE). RNA exposed s^4U s^6G, thus population reads high T--C G--mutational content exist. see example TILAC fraction_design table look like, see lazily loaded tilac_fraction_design object. Poisson TRUE, use U-content adjusted Poisson mixture modeling strategy. Often provides significant speed gain without sacrificing accuracy. strategy String denoting new read mutation rate estimation strategy use. Options include: standard: Estimate single new read old read mutation rate sample. done via binomial mixture model aggregating hierarchical: Estimate feature-specific new read mutation rate, regularizing feature-specific estimate sample-wide prior. Currently compatible single mutation type mixture modeling. filter_cols feature columns used filter feature-less reads. default value \"\" checks feature columns whether read failed get assigned said feature. filter_condition two possible values make sense: `&` `|`. set `&`, features filter_cols must \"null\" value (.e., value included remove_features) row get filtered . set `|`, single feature filter_cols needs one \"null\" values get filtered . remove_features feature names indicate failed assignment read given feature. fastq2EZbakR pipeline uses value '__no_feature'. split_multi_features set reads maps ambiguously multiple features, data reads copied feature ambiguous set? TRUE, multi_feature_cols also must set. Examples set TRUE includes analyzing exonic bins (concept defined original DEXSeq paper), exon-exon junctions, etc. multi_feature_cols Character vector columns potential include assignment multiple features. columns features split split_multi_features TRUE. multi_feature_sep String representing ambiguous feature assignments distinguished feature names. example, default value \"+\" denotes read maps multiple features (call featureA featureB, example), feature column value \"featureA+featureB\" read. pnew_prior_mean Mean logit(pnew) prior. pnew_prior_sd Standard deviation logit(pnew) prior. pold_prior_mean Mean logit(pold) prior. pold_prior_sd Standard deviation logit(pold) prior. hier_readcutoff strategy == hierarchical, features many reads used infer distribution feature-specific labeled read mutation rates. init_pnew_prior_sd strategy == hierarchical, initial logit(pnew) prior standard deviation regularize feature-specific labeled read mutation rate estimates. pnew_prior_sd_min minimum logit(pnew) prior standard deviation strategy set \"hierarchcial\". EZbakR try estimate empirically standard deviation initial feature-specific logit(pnew) estimates using high coverage features, minus average uncertainty logit(pnew) estimates. difference can sometimes negative, value pnew_prior_sd_min imputed case. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate fractions of each RNA population with standard EZbakRData object — EstimateFractions.EZbakRData","title":"Estimate fractions of each RNA population with standard EZbakRData object — EstimateFractions.EZbakRData","text":"default fraction estimation strategy EZbakR. cB assumed -memory table obj expected EZbakRData object created EZbakRData(). larger RAM cB files, see relevant EZbakRArrowData method.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate fractions of each RNA population with standard EZbakRData object — EstimateFractions.EZbakRData","text":"","code":"# S3 method for EZbakRData EstimateFractions(   obj,   features = \"all\",   mutrate_populations = \"all\",   fraction_design = NULL,   Poisson = TRUE,   strategy = c(\"standard\", \"hierarchical\"),   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   split_multi_features = FALSE,   multi_feature_cols = NULL,   multi_feature_sep = \"+\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   hier_readcutoff = 300,   init_pnew_prior_sd = 0.8,   pnew_prior_sd_min = 0.01,   pold_est = NULL,   character_limit = 20,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate fractions of each RNA population with standard EZbakRData object — EstimateFractions.EZbakRData","text":"obj EZbakRData object features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB file. mutrate_populations Character vector set mutational populations want infer rates mutations . default, mutation rates estimated populations present cB. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. call function create_fraction_design(...), providing vector mutational population names input, create fraction_design table , assumption every single possible combination mutational populations present data. can edit present column necessary get appropriate fraction_design use case. See details required contents fraction_design interpretation. fraction_design must one column per element mutrate_populations, columns sharing name mutrate_populations. must also one additional column named present. elements fraction_design booleans (TRUE FALSE). include possible combinations TRUE FALSE mutrate_populations columns. TRUE one columns represents population RNA expected background mutation rates type. present denote whether population RNA expected exist data. example, assume typical TimeLapse-seq/SLAM-seq/TUC-seq/etc. experiment fed cells s^4U recoded incorporated s^4U nucleotide reverse transcriptase read cytosine. means mutrate_populations \"TC\", since want estimate fraction RNA s^4U labeled, .e., fraction high T--C mutation content. fraction_design thus two columns: TC present. also two rows. One rows must value TRUE TC, must value FALSE. row value TRUE TC represents population reads high T--C mutation content, .e., reads RNA synthesized s^4U present. row value FALSE TC reprsents population reads low T--C mutation content, .e., reads RNA existed prior s^4U labeling. populations exist data, value present column TRUE . See lazily loaded standard_fraction_design object example tibble look like. (\"lazily loaded standard_fraction_design object\" means run print(standard_fraction_design) loading EZbakR library(EZbakR), can see contents. specifically, lazily loaded means table loaded memory ask , via something like print() call.) another example, consider TILAC, NR-seq extension developed Simon lab. TILAC originally described Courvan et al., 2022. method, two populations RNA, one s^4U fed cells one s^6G fed cells, pooled prepped sequencing together. allows internally controlled comparisons RNA abundance without spike-ins. s^4U recoded cytosine analog TimeLapse chemistry (similar chemistry) s^6G recoded adenine analog. Thus, fraction_design includes columns called TC GA. unique aspect TILAC fraction_design table one possible populations, TC GA TRUE, denoted present (present = FALSE). RNA exposed s^4U s^6G, thus population reads high T--C G--mutational content exist. see example TILAC fraction_design table look like, see lazily loaded tilac_fraction_design object. Poisson TRUE, use U-content adjusted Poisson mixture modeling strategy. Often provides significant speed gain without sacrificing accuracy. strategy String denoting new read mutation rate estimation strategy use. Options include: standard: Estimate single new read old read mutation rate sample. done via binomial mixture model aggregating hierarchical: Estimate feature-specific new read mutation rate, regularizing feature-specific estimate sample-wide prior. Currently compatible single mutation type mixture modeling. filter_cols feature columns used filter feature-less reads. default value \"\" checks feature columns whether read failed get assigned said feature. filter_condition two possible values make sense: `&` `|`. set `&`, features filter_cols must \"null\" value (.e., value included remove_features) row get filtered . set `|`, single feature filter_cols needs one \"null\" values get filtered . remove_features feature names indicate failed assignment read given feature. fastq2EZbakR pipeline uses value '__no_feature'. split_multi_features set reads maps ambiguously multiple features, data reads copied feature ambiguous set? TRUE, multi_feature_cols also must set. Examples set TRUE includes analyzing exonic bins (concept defined original DEXSeq paper), exon-exon junctions, etc. multi_feature_cols Character vector columns potential include assignment multiple features. columns features split split_multi_features TRUE. multi_feature_sep String representing ambiguous feature assignments distinguished feature names. example, default value \"+\" denotes read maps multiple features (call featureA featureB, example), feature column value \"featureA+featureB\" read. pnew_prior_mean Mean logit(pnew) prior. pnew_prior_sd Standard deviation logit(pnew) prior. pold_prior_mean Mean logit(pold) prior. pold_prior_sd Standard deviation logit(pold) prior. hier_readcutoff strategy == hierarchical, features many reads used infer distribution feature-specific labeled read mutation rates. init_pnew_prior_sd strategy == hierarchical, initial logit(pnew) prior standard deviation regularize feature-specific labeled read mutation rate estimates. pnew_prior_sd_min minimum logit(pnew) prior standard deviation strategy set \"hierarchcial\". EZbakR try estimate empirically standard deviation initial feature-specific logit(pnew) estimates using high coverage features, minus average uncertainty logit(pnew) estimates. difference can sometimes negative, value pnew_prior_sd_min imputed case. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate fractions of each RNA population — EstimateFractions","title":"Estimate fractions of each RNA population — EstimateFractions","text":"Estimate fractions RNA population","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate fractions of each RNA population — EstimateFractions","text":"","code":"EstimateFractions(   obj,   features = \"all\",   mutrate_populations = \"all\",   fraction_design = NULL,   Poisson = TRUE,   strategy = c(\"standard\", \"hierarchical\"),   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   split_multi_features = FALSE,   multi_feature_cols = NULL,   multi_feature_sep = \"+\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   hier_readcutoff = 300,   init_pnew_prior_sd = 0.8,   pnew_prior_sd_min = 0.01,   pold_est = NULL,   character_limit = 20,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate fractions of each RNA population — EstimateFractions","text":"obj EZbakRData EZbakRArrowData object features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB file. mutrate_populations Character vector set mutational populations want infer rates mutations . default, mutation rates estimated populations present cB. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. call function create_fraction_design(...), providing vector mutational population names input, create fraction_design table , assumption every single possible combination mutational populations present data. can edit present column necessary get appropriate fraction_design use case. See details required contents fraction_design interpretation. fraction_design must one column per element mutrate_populations, columns sharing name mutrate_populations. must also one additional column named present. elements fraction_design booleans (TRUE FALSE). include possible combinations TRUE FALSE mutrate_populations columns. TRUE one columns represents population RNA expected background mutation rates type. present denote whether population RNA expected exist data. example, assume typical TimeLapse-seq/SLAM-seq/TUC-seq/etc. experiment fed cells s^4U recoded incorporated s^4U nucleotide reverse transcriptase read cytosine. means mutrate_populations \"TC\", since want estimate fraction RNA s^4U labeled, .e., fraction high T--C mutation content. fraction_design thus two columns: TC present. also two rows. One rows must value TRUE TC, must value FALSE. row value TRUE TC represents population reads high T--C mutation content, .e., reads RNA synthesized s^4U present. row value FALSE TC reprsents population reads low T--C mutation content, .e., reads RNA existed prior s^4U labeling. populations exist data, value present column TRUE . See lazily loaded standard_fraction_design object example tibble look like. (\"lazily loaded standard_fraction_design object\" means run print(standard_fraction_design) loading EZbakR library(EZbakR), can see contents. specifically, lazily loaded means table loaded memory ask , via something like print() call.) another example, consider TILAC, NR-seq extension developed Simon lab. TILAC originally described Courvan et al., 2022. method, two populations RNA, one s^4U fed cells one s^6G fed cells, pooled prepped sequencing together. allows internally controlled comparisons RNA abundance without spike-ins. s^4U recoded cytosine analog TimeLapse chemistry (similar chemistry) s^6G recoded adenine analog. Thus, fraction_design includes columns called TC GA. unique aspect TILAC fraction_design table one possible populations, TC GA TRUE, denoted present (present = FALSE). RNA exposed s^4U s^6G, thus population reads high T--C G--mutational content exist. see example TILAC fraction_design table look like, see lazily loaded tilac_fraction_design object. Poisson TRUE, use U-content adjusted Poisson mixture modeling strategy. Often provides significant speed gain without sacrificing accuracy. strategy String denoting new read mutation rate estimation strategy use. Options include: standard: Estimate single new read old read mutation rate sample. done via binomial mixture model aggregating hierarchical: Estimate feature-specific new read mutation rate, regularizing feature-specific estimate sample-wide prior. Currently compatible single mutation type mixture modeling. filter_cols feature columns used filter feature-less reads. default value \"\" checks feature columns whether read failed get assigned said feature. filter_condition two possible values make sense: `&` `|`. set `&`, features filter_cols must \"null\" value (.e., value included remove_features) row get filtered . set `|`, single feature filter_cols needs one \"null\" values get filtered . remove_features feature names indicate failed assignment read given feature. fastq2EZbakR pipeline uses value '__no_feature'. split_multi_features set reads maps ambiguously multiple features, data reads copied feature ambiguous set? TRUE, multi_feature_cols also must set. Examples set TRUE includes analyzing exonic bins (concept defined original DEXSeq paper), exon-exon junctions, etc. multi_feature_cols Character vector columns potential include assignment multiple features. columns features split split_multi_features TRUE. multi_feature_sep String representing ambiguous feature assignments distinguished feature names. example, default value \"+\" denotes read maps multiple features (call featureA featureB, example), feature column value \"featureA+featureB\" read. pnew_prior_mean Mean logit(pnew) prior. pnew_prior_sd Standard deviation logit(pnew) prior. pold_prior_mean Mean logit(pold) prior. pold_prior_sd Standard deviation logit(pold) prior. hier_readcutoff strategy == hierarchical, features many reads used infer distribution feature-specific labeled read mutation rates. init_pnew_prior_sd strategy == hierarchical, initial logit(pnew) prior standard deviation regularize feature-specific labeled read mutation rate estimates. pnew_prior_sd_min minimum logit(pnew) prior standard deviation strategy set \"hierarchcial\". EZbakR try estimate empirically standard deviation initial feature-specific logit(pnew) estimates using high coverage features, minus average uncertainty logit(pnew) estimates. difference can sometimes negative, value pnew_prior_sd_min imputed case. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate isoform-specific fraction news (or more generally ","title":"Estimate isoform-specific fraction news (or more generally ","text":"Combines output EstimateFractions transcript isoform quantification performed outside tool (e.g., RSEM, kallisto, salmon, etc.) infer transcript isoform-specific fraction news (generally fraction reads coming particular mutation population).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate isoform-specific fraction news (or more generally ","text":"","code":"EstimateIsoformFractions(   obj,   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   fraction_name = NULL,   quant_name = NULL,   gene_to_transcript = NULL,   overwrite = TRUE,   TPM_min = 1,   count_min = 10 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate isoform-specific fraction news (or more generally ","text":"obj EZbakRData object features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. fraction_name Name fraction estimate table use. stored obj$fractions list name. Can also rely specifying features /populations EZget() find . quant_name Name transcript isoform quantification table use. stored obj$readcounts list name. Use ImportIsoformQuant() create table. quant_name NULL, search tables containing string \"isoform_quant\" name, naming convention used ImportIsoformQuant(). one table exists, error thrown specify exact name quant_name. gene_to_transcript Table columns transcript_id feature related columns appear relevant fractions table. relevant hack deal case STAR includes transcriptome alignment transcripts opposite strand RNA actually originated. table used filter transcript-feature combinations exist. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs. TPM_min Minimum TPM transcript kept analysis. count_min Minimum expected_count transcript kept analysis.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function for estimating kinetic parameters. — EstimateKinetics","title":"Generic function for estimating kinetic parameters. — EstimateKinetics","text":"Generic function estimating kinetic parameters.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function for estimating kinetic parameters. — EstimateKinetics","text":"","code":"EstimateKinetics(   obj,   strategy = c(\"standard\", \"tilac\", \"NSS\", \"shortfeed\", \"pulse-chase\"),   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   grouping_factors = NULL,   character_limit = 20,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function for estimating kinetic parameters. — EstimateKinetics","text":"obj EZbakRFractions object, EZbakRData object EstimateFractions() run. strategy Kinetic parameter estimation strategy. Options include: standard: Estimate single new read old read mutation rate sample. done via binomial mixture model aggregating NSS: Use strategy similar presented Narain et al., 2021 assumes provided -s4U data provides reference much RNA present start labeling. case, grouping_factors must also set. shortfeed: Estimate kinetic parameters assuming degradation labeled RNA, appropriate metabolic label feed time much shorter average half-life RNA system. tilac: Estimate TILAC-ratio described Courvan et al., 2022. pulse-chase (YET IMPLEMENTED): Estimate kdeg pulse-chase experiment. kdeg estimated time point label present. includes pulse-samples, well samples including chase pulse. custom (YET IMPLEMENTED): Provide custom function takes fraction estimates input produces output kinetic parameter estimates. features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. grouping_factors sample-detail columns metadf used group -s4U samples calculating average -s4U RPM? default value NULL cause sample-detail columns used. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function for estimating kinetic parameters. — EstimateKinetics","text":"EZbakRKinetics object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mutation rates — EstimateMutRates.EZbakRArrowData","title":"Estimate mutation rates — EstimateMutRates.EZbakRArrowData","text":"Two component mixture models fit data estimate global high low mutation rates samples. Estimation mutation rates regularized use informative priors whose parameters can altered using arguments defined","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mutation rates — EstimateMutRates.EZbakRArrowData","text":"","code":"# S3 method for EZbakRArrowData EstimateMutRates(   obj,   populations = \"all\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   pold_est = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mutation rates — EstimateMutRates.EZbakRArrowData","text":"obj EZbakRData object populations Character vector set mutational populations want infer fractions . example, say cB file contains columns tracking T--C G--pnew_prior_mean logit-Normal mean logit(pnew) prior. pnew_prior_sd logit-Normal sd logit(pnew) prior. pold_prior_mean logit-Normal mean logit(pold) prior. pold_prior_sd logit-Normal sd logit(pold) prior. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRArrowData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mutation rates — EstimateMutRates.EZbakRArrowData","text":"method expects input object contain -disk Arrow Dataset place -memory cB file. Furtheromore, dataset expected partitioned individual samples. allows EZbakR load single sample worth data memory time, can significantly reduce RAM usage. input object created EZbakRArrowData().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mutation rates — EstimateMutRates.EZbakRData","title":"Estimate mutation rates — EstimateMutRates.EZbakRData","text":"Two component mixture models fit data estimate global high low mutation rates samples. Estimation mutation rates regularized use informative priors whose parameters can altered using arguments defined . default method expects input obj include -memory cB table. analyses larger RAM datasets, see EZbakRArrowData method.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mutation rates — EstimateMutRates.EZbakRData","text":"","code":"# S3 method for EZbakRData EstimateMutRates(   obj,   populations = \"all\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   pold_est = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mutation rates — EstimateMutRates.EZbakRData","text":"obj EZbakRData object populations Character vector set mutational populations want infer fractions . example, say cB file contains columns tracking T--C G--pnew_prior_mean logit-Normal mean logit(pnew) prior. pnew_prior_sd logit-Normal sd logit(pnew) prior. pold_prior_mean logit-Normal mean logit(pold) prior. pold_prior_sd logit-Normal sd logit(pold) prior. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mutation rates — EstimateMutRates","title":"Estimate mutation rates — EstimateMutRates","text":"Two component mixture models fit data estimate global high low mutation rates samples. Estimation mutation rates regularized use informative priors whose parameters can altered using arguments defined .","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mutation rates — EstimateMutRates","text":"","code":"EstimateMutRates(   obj,   populations = \"all\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   pold_est = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mutation rates — EstimateMutRates","text":"obj EZbakRData EZbakRArrowData object populations Character vector set mutational populations want infer fractions . example, say cB file contains columns tracking T--C G--pnew_prior_mean logit-Normal mean logit(pnew) prior. pnew_prior_sd logit-Normal sd logit(pnew) prior. pold_prior_mean logit-Normal mean logit(pold) prior. pold_prior_sd logit-Normal sd logit(pold) prior. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":null,"dir":"Reference","previous_headings":"","what":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"convenient wrapper tximport() importing isoform quantification data EZbakRData object. necessary run functions EstimateIsoformFractions.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"","code":"ImportIsoformQuant(   obj,   files,   quant_tool = c(\"none\", \"salmon\", \"sailfish\", \"alevin\", \"piscem\", \"kallisto\", \"rsem\",     \"stringtie\"),   ... )"},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"obj EZbakRData object. files named vector paths transcript quantification files like import. passed first argument tximport::tximport() (also named files). names vector sample names appear metadf EZbakRData object. quant_tool String denoting type software used generate abundances. get passed type argument tximport::tximport(). described documentation tximport 'Options \"salmon\", \"sailfish\", \"alevin\", \"piscem\", \"kallisto\", \"rsem\", \"stringtie\", \"none\". argument used autofill arguments (geneIdCol, etc.) \"none\" means user specify columns. aware specifying type \"none\" ignore arguments (geneIdCol, etc.)'. Referenced 'arguments ' can specified part .... ... Additional arguments passed tximport::tximport(). Especially relevant set quant_tool \"none\".","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple simulation function — SimpleSim","title":"Simple simulation function — SimpleSim","text":"Simple simulation function","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple simulation function — SimpleSim","text":"","code":"SimpleSim(   nreads = 1000,   fn = 0.5,   pnew = 0.05,   pold = 0.001,   rlen = 100,   Ucont = 0.25 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple simulation function — SimpleSim","text":"nreads Number reads simulate fn Fraction reads new simulation. Whether read new determined draw Bernoulli(fn) distribution. pnew T--C mutation rate new reads pold T--C mutation rate old reads rlen Length simulated reads Ucont Fraction nucleotides simulated reads Ts (U RNA)","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"SimulateIsoforms() performs simple simulation isoform-specific kinetic parameters showcase test EstimateIsoformFractions(). assumes set reads (fraction total set funique parameter) map uniquely given isoform, rest ambiguous isoforms gene. Mutational content reads simulated SimulateOneRep().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"","code":"SimulateIsoforms(   nfeatures,   nt = NULL,   seqdepth = nfeatures * 2500,   label_time = 4,   sample_name = \"sampleA\",   feature_prefix = \"Gene\",   pnew = 0.1,   pold = 0.002,   funique = 0.2,   readlength = 200,   Ucont = 0.25,   avg_numiso = 2,   psynthdiff = 0.5,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"nfeatures Number \"features\" simulate data . feature simulated number transcript isoforms nt (Optional), can provide vector number isoforms like simulate nfeatures features. Vector can either length 1, case many isoforms simulated features, length equal nfeatures. seqdepth Total number sequencing reads simulate label_time Length s^4U feed simulate. sample_name Character vector assign sample column output simulated data table (cB table). feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. pnew Probability T mutated C read new. pold Probability T mutated C read old. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. avg_numiso Average number isoforms feature. Feature-specific isoform counts drawn Poisson distribution average. NOTE: insure features multiple isoforms, simulated number isoforms drawn Poisson distribution incremented 2. Thus, actual average number isoforms feature avg_numiso + 2. psynthdiff Percentage genes isoform abundance differences synthesis driven. synthesis driven, isoform abundance differences driven differences isoform kdegs. logkdeg_mean meanlog log-normal distribution kdegs simulated logkdeg_sd sdlog log-normal distribution kdegs simulated logksyn_mean meanlog log-normal distribution ksyns simulated logksyn_sd sdlog log-normal distribution ksyns simulated","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"SimulateMultiCondition highly flexibly simulator combines linear modeling log(kdeg)'s log(ksyn)'s SimulateOneRep simulate NR-seq dataset. linear model allows simulate multiple distinct treatments, batch effects, interaction effects, etc. current downside flexibility relative complexity implement. Easier use simulators way EZbakR.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"","code":"SimulateMultiCondition(   nfeatures,   metadf,   mean_formula,   param_details = NULL,   seqdepth = nfeatures * 2500,   label_time = 2,   pnew = 0.05,   pold = 0.001,   readlength = 200,   Ucont = 0.25,   feature_prefix = \"Gene\",   dispslope = 5,   dispint = 0.01,   logkdegsdtrend_slope = -0.3,   logkdegsdtrend_intercept = -2.25,   logksynsdtrend_slope = -0.3,   logksynsdtrend_intercept = -2.25,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   logkdeg_diff_avg = 0,   logksyn_diff_avg = 0,   logkdeg_diff_sd = 0.5,   logksyn_diff_sd = 0.5,   pdiff_kd = 0.1,   pdiff_ks = 0,   pdiff_both = 0,   pdo = 0 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"nfeatures Number \"features\" (e.g., genes) simulate data metadf data frame following columns: sample: Names given samples simulate. : number columns names (taken metadf columns) storing factors samples can stratified. can referenced mean_formula, described . parameters (described ) can also included metadf specify sample-specific simulation parameter: seqdepth label_time pnew pold readlength Ucont mean_formula formula object specifies linear model used relate factors  columns metadf average log(kdegs) log(ksyns) sample. param_details data frame one row column design matrix obtained model.matrix(mean_formula, metadf) describes simulate linear model parameters. columns data frame : param: Name linear model parameter appears column names design matrix model.matrix(mean_formula, metadf). reference: Boolean; TRUE want treat parameter \"reference\". means parameter values global parameters set equal unless otherwise determined (see pdiff_* parameters determined parameter differ reference). global: Boolean; TRUE want treat parameter global parameter. means single value used features. logkdeg_mean: parameter reference, value log(kdeg) linear model drawn normal distribution mean. global parameter, value used. neither , value log(kdeg) linear model either reference (difference condition's value reference) reference's value + normally distributed random variable centered value. logkdeg_sd: sd used draws normal distribution described logkdeg_mean. logksyn_mean: logkdeg_mean log(ksyn) linear model. logksyn_sd: logkdeg_sd log(kdeg) linear model. pdiff_ks: Proportion features whose value parameter log(ksyn) linear model differ reference's. number 0 1, inclusive. example, pdiff_ks 0.1, 10% features, parameter equal reference parameter + normally distributed random variable mean logksyn_mean sd logksyn_sd. 90% features, parameter equal reference. pdiff_kd: pdiff_ks log(kdeg) linear model. pdiff_both: Proportion features whose value parameter log(kdeg) log(ksyn) linear models differ reference. Value must 0 min(c(pdiff_kd, pdiff_ks)) row. param_details specified user, first column design matrix assumed represent reference parameter, parameters assumed non-global, logkdeg_mean logksyn_mean set equivalently named parameter values described reference logkdeg_diff_avg logksyn_diff_avg parameters, logkdeg_sd logksyn_sd set equivalently named parameter values described reference logkdeg_diff_sd logksyn_diff_sd parameters, pdiff_kd, pdiff_ks, pdiff_both set equivalently named parameter values. seqdepth relevant read_vect provided; case, total number reads simulate. label_time Length s^4U feed simulate. pnew Probability T mutated C read new. pold Probability T mutated C read old. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. dispslope Negative binomial dispersion parameter \"slope\" respect read counts. See DESeq2 paper dispersion model used. dispint Negative binomial dispersion parameter \"intercept\" respect read counts. See DESeq2 paper dispersion model used. logkdegsdtrend_slope Slope log10(read count) vs. log(kdeg) replicate variability trend logkdegsdtrend_intercept Intercept log10(read count) vs. log(kdeg) replicate variability trend logksynsdtrend_slope Slope log10(read count) vs. log(ksyn) replicate variability trend logksynsdtrend_intercept Intercept log10(read count) vs. log(ksyn) replicate variability trend logkdeg_mean Mean normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logkdeg_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_mean Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logksyn_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_avg Mean normal distribution non-reference log(kdeg) linear model parameters drawn feature param_details provided. logksyn_diff_avg Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_diff_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. pdiff_kd Proportion features non-reference log(kdeg) linear model parameters differ reference. pdiff_ks Proportion features non-reference log(ksyn) linear model parameters differ reference. pdiff_both Proportion features non-reference log(kdeg) log(ksyn) linear model parameters differ reference. ksyns simulated pdo Dropout rate; think probability s4U containing molecule lost library preparation sequencing. pdo 0 (default) dropout.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a single replicate of NR-seq data — SimulateOneRep","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"SimulateOneRep, users option either provide vectors feature-specific read counts, fraction news, kdegs, ksyns simulation, drawn relevant distributions whose properties can tuned various optional parameters SimulateOneRep. number mutable nucleotides (nT) read drawn binomial distribution readlength trials probability \"success\" equal Ucont. read's status new old drawn Bernoulli distribution probability \"success\" equal feature's fraction new. read new, number mutations read drawn binomial distribution probability mutation equal pnew. read old, number mutations instead drawn binomial distribution probability mutation equal pold.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"","code":"SimulateOneRep(   nfeatures,   read_vect = NULL,   label_time = 2,   sample_name = \"sampleA\",   feature_prefix = \"Gene\",   fn_vect = NULL,   kdeg_vect = NULL,   ksyn_vect = NULL,   pnew = 0.05,   pold = 0.002,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   seqdepth = nfeatures * 2500,   readlength = 200,   Ucont = 0.25,   feature_pnew = FALSE,   pnew_kdeg_corr = FALSE,   logit_pnew_mean = -2.5,   logit_pnew_sd = 0.1 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"nfeatures Number \"features\" (e.g., genes) simulate data read_vect Vector length = nfeatures; specifies number reads simulated feature. provided, number reads simulated equal round(seqdepth * (ksyn_i/kdeg_i)/sum(ksyn/kdeg)). words, normalized steady-state abundance feature multiplied total number reads simulated rounded nearest integer. label_time Length s^4U feed simulate. sample_name Character vector assign sample column output simulated data table (cB table). feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. fn_vect Vector length = nfeatures; specifies fraction new use feature's simulation. provided kdeg_vect , fn_vect = 1 - exp(-kdeg_vect*label_time). fn_vect kdeg_vect provided, kdegs simulated joint distribution described converted fn_vect kdeg_vect user-provided. kdeg_vect Vector length = nfeatures; specifies degradation rate constant use feature's simulation. provided fn_vect , kdeg_vect = -log(1 - fn_vect)/label_time. kdeg_vect fn_vect provided, feature's kdeg_vect value drawn log-normal distrubition meanlog = logkdeg_mean sdlog = logkdeg_sd. kdeg_vect actually simulated case read_vect also provided, used simulate read counts described . ksyn_vect Vector length = nfeatures; specifies synthesis rate constant use feature's simulation. provided, read_vect also provided, feature's ksyn_vect value drawn log-normal distribution meanlog = logksyn_mean sdlog = logksyn_sd. ksyn's need simulated read_vect provided, influence read counts. pnew Probability T mutated C read new. pold Probability T mutated C read old. logkdeg_mean necessary, meanlog log-normal distribution kdegs simulated logkdeg_sd necessary, sdlog log-normal distribution kdegs simulated logksyn_mean necessary, meanlog log-normal distribution ksyns simulated logksyn_sd necessary, sdlog log-normal distribution ksyns simulated seqdepth relevant read_vect provided; case, total number reads simulate. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. feature_pnew Boolean; TRUE, simulate different pnew feature pnew_kdeg_corr Boolean; relevant feature_pnew TRUE. , setting pnew_kdeg_corr TRUE ensure higher kdeg transcripts higher pnew. logit_pnew_mean feature_pnew TRUE, logit(pnew) feature drawn normal distribution mean. logit_pnew_sd feature_pnew TRUE, logit(pnew) feature drawn normal distribution standard deviation.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a fraction_design table for EstimateFractions — create_fraction_design","title":"Generate a fraction_design table for EstimateFractions — create_fraction_design","text":"Generate fraction_design table EstimateFractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a fraction_design table for EstimateFractions — create_fraction_design","text":"","code":"create_fraction_design(mutrate_populations)"},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a fraction_design table for EstimateFractions — create_fraction_design","text":"mutrate_populations Character vector set mutational populations present data. example, s4U fed data standard nucleotide recoding chemistry (e.g., TimeLapse, SLAM, TUC, AMUC, etc.) mutrate_populations c(\"TC\"). Dual labeling experiments s4U s6G feeds mutrate_populations c(\"TC\", \"GA\").","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a fraction_design table for EstimateFractions — create_fraction_design","text":"fraction_design table assumes every possible combination mutational populations listed mutrate_populations present data. present column can modified assumption incorrect.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":null,"dir":"Reference","previous_headings":"","what":"Example cB table — example_cB","title":"Example cB table — example_cB","text":"example cB table used create EZbakRData object. cB table subset cB file DCP2 KO dataset published Luo et al., 2020. original file large (69 MB), example cB file downsampled contains subset reads chromosome 21.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example cB table — example_cB","text":"","code":"example_cB"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":"example-cb","dir":"Reference","previous_headings":"","what":"example_cB","title":"Example cB table — example_cB","text":"tibble 10,000 rows 7 columns: sample Sample name rname Chromosome name GF Gene name reads aligning region gene XF Gene name reads aligning exclusively exonic regions gene TC Number T--C mutations nT Number Ts n Number reads value first 6 columns","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example cB table — example_cB","text":"Luo et al. (2020) Biochemistry. 59(42), 4121-4142","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":null,"dir":"Reference","previous_headings":"","what":"Example metadf — example_metadf","title":"Example metadf — example_metadf","text":"example metadf table used create EZbakRData object. metadf describes DCP2 KO dataset published Luo et al., 2020.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example metadf — example_metadf","text":"","code":"example_metadf"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":"example-metadf","dir":"Reference","previous_headings":"","what":"example_metadf","title":"Example metadf — example_metadf","text":"tibble 6 rows 3 columns sample Sample name tl Metabolic label feed time genotype Whether sample collected WT DCP2 KO cells","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example metadf — example_metadf","text":"Luo et al. (2020) Biochemistry. 59(42), 4121-4142","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get normalized read counts from either an EZbakRFractions object. — get_normalized_read_counts.EZbakRFractions","title":"Get normalized read counts from either an EZbakRFractions object. — get_normalized_read_counts.EZbakRFractions","text":"Uses TMM normalization strategy, similar used DESeq2 edgeR.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get normalized read counts from either an EZbakRFractions object. — get_normalized_read_counts.EZbakRFractions","text":"","code":"# S3 method for EZbakRFractions get_normalized_read_counts(obj, features_to_analyze, fractions_name = NULL)"},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get normalized read counts from either an EZbakRFractions object. — get_normalized_read_counts.EZbakRFractions","text":"obj EZbakRFractions object. features_to_analyze Features relevant table fractions_name Name fractions table use","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get normalized read counts from either a cB table in an EZbakRData object. — get_normalized_read_counts.default","title":"Get normalized read counts from either a cB table in an EZbakRData object. — get_normalized_read_counts.default","text":"Uses TMM normalization strategy, similar used DESeq2 edgeR.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get normalized read counts from either a cB table in an EZbakRData object. — get_normalized_read_counts.default","text":"","code":"# S3 method for default get_normalized_read_counts(obj, features_to_analyze, fractions_name = NULL)"},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get normalized read counts from either a cB table in an EZbakRData object. — get_normalized_read_counts.default","text":"obj EZbakRData object. features_to_analyze Features relevant table fractions_name Name fractions table use","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"Uses TMM normalization strategy, similar used DESeq2 edgeR.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"","code":"get_normalized_read_counts(obj, features_to_analyze, fractions_name = NULL)"},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"obj EZbakRData EZbakRFractions object. features_to_analyze Features relevant table fractions_name Name fractions table use","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","title":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","text":"new_EZbakRArrowData efficiently creates object class EZbakRArrowData. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","text":"","code":"new_EZbakRArrowData(cBds, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","text":"cBds Arrow dataset tracking sample ID, mutational nucleotide content, feature assignment sequencing reads. metadf Data frame tracking features samples included cBds.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRDataobject constructor for internal use — new_EZbakRData","title":"EZbakRDataobject constructor for internal use — new_EZbakRData","text":"new_EZbakRData efficiently creates object class EZbakRData. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRDataobject constructor for internal use — new_EZbakRData","text":"","code":"new_EZbakRData(cB, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRDataobject constructor for internal use — new_EZbakRData","text":"cB Data frame tracking sample ID, mutational nucleotide content, feature assignment sequencing reads. metadf Data frame tracking features samples included cB.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRFractions object constructor — new_EZbakRFractions","title":"EZbakRFractions object constructor — new_EZbakRFractions","text":"new_EZbakRFractions efficiently creates object class EZbakRFractions. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRFractions object constructor — new_EZbakRFractions","text":"","code":"new_EZbakRFractions(fractions, metadf, name = NULL, character_limit = 20)"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRFractions object constructor — new_EZbakRFractions","text":"fractions Data frame containing information fraction reads mutational population interest. metadf Data frame reporting aspects samples included name Optional; name give fractions table. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. fractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRKinetics object constructor — new_EZbakRKinetics","title":"EZbakRKinetics object constructor — new_EZbakRKinetics","text":"new_EZbakRKinetics efficiently creates object class EZbakRKinetics. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRKinetics object constructor — new_EZbakRKinetics","text":"","code":"new_EZbakRKinetics(   kinetics,   features,   metadf,   name = NULL,   character_limit = 20 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRKinetics object constructor — new_EZbakRKinetics","text":"kinetics Data frame containing information kinetic parameters interest set features tracked. features Features tracked kinetics data frame. Needs specified explicitly automatically inferred. metadf Data frame describing samples included name Optional; name give fractions table. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. kinetics","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/standard_fraction_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard fraction_design table for EstimateFractions — standard_fraction_design","title":"Standard fraction_design table for EstimateFractions — standard_fraction_design","text":"example fraction_design table standard NR-seq experiment s^4U labeling. table tells EstimateFractions two populations reads, one high T--C mutation content one low T--C mutation content","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/standard_fraction_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard fraction_design table for EstimateFractions — standard_fraction_design","text":"","code":"standard_fraction_design"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/standard_fraction_design.html","id":"standard-fraction-design","dir":"Reference","previous_headings":"","what":"standard_fraction_design","title":"Standard fraction_design table for EstimateFractions — standard_fraction_design","text":"tibble 2 rows 2 columns: TC Boolean denoting population represented row high T--C mutational content present Boolean denoting population represented row expected present dataset","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/tilac_fraction_design.html","id":null,"dir":"Reference","previous_headings":"","what":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","title":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","text":"example fraction_design table TILAC experiment. TILAC originally described Courvan et al., 2022. method, two populations RNA, one s^4U fed cells one s^6G fed cells, pooled prepped sequencing together. allows internally controlled comparisons RNA abundance without spike-ins. s^4U recoded cytosine analog TimeLapse chemistry (similar chemistry) s^6G recoded adenine analog. Thus, fraction_design includes columns called TC GA. unique aspect TILAC fraction_design table one possible populations, TC GA TRUE, denoted present (present = FALSE). RNA exposed s^4U s^6G, thus population reads high T--C G--mutational content exist.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/tilac_fraction_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","text":"","code":"tilac_fraction_design"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/tilac_fraction_design.html","id":"tilac-fraction-design","dir":"Reference","previous_headings":"","what":"tilac_fraction_design","title":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","text":"tibble 4 rows 3 columns: TC Boolean denoting population represented row high T--C mutational content GA Boolean denoting population represented row high G--mutational content present Boolean denoting population represented row expected present dataset","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","title":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","text":"validate_EZbakRArrowData ensures input EZbakRArrowData object construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","text":"","code":"validate_EZbakRArrowData(obj)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","text":"obj object class EZbakRArrowData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRDataobject validator — validate_EZbakRData","title":"EZbakRDataobject validator — validate_EZbakRData","text":"validate_EZbakRData ensures input EZbakRData construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRDataobject validator — validate_EZbakRData","text":"","code":"validate_EZbakRData(obj)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRDataobject validator — validate_EZbakRData","text":"obj object class EZbakRData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRFractions object validator — validate_EZbakRFractions","title":"EZbakRFractions object validator — validate_EZbakRFractions","text":"validate_EZbakRFractions ensures input EZbakRFractions construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRFractions object validator — validate_EZbakRFractions","text":"","code":"validate_EZbakRFractions(obj)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRFractions object validator — validate_EZbakRFractions","text":"obj object class EZbakRFractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRKinetics object validator — validate_EZbakRKinetics","title":"EZbakRKinetics object validator — validate_EZbakRKinetics","text":"validate_EZbakRKinetics ensures input EZbakRKinetics construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRKinetics object validator — validate_EZbakRKinetics","text":"","code":"validate_EZbakRKinetics(obj, features)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRKinetics object validator — validate_EZbakRKinetics","text":"obj object class EZbakRKinetics features Features tracked kinetics data frame. Needs specified explicitly automatically inferred.","code":""}]
