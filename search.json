[{"path":"https://isaacvock.github.io/EZbakR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 EZbakR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"Increasingly, subcellular fractionation combined NR-seq, allowing researchers probe kinetics flow subcellular compartments. EZbakR’s EZDynamics() function supports analysis kind data generalized dynamical systems modeling. addition, EZDyamics(), combined fastq2EZbakR’s flexible feature assignment strategy, opens door analyses premature mature RNA dynamics. even possible combine two. vignette, learn run EZDynamics().","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"quickstart","dir":"Articles","previous_headings":"","what":"Quickstart","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"quickly cover couple use cases efficiently showcase full extent EZDynamics() functionality. sections follow, detailed description everything shown provided.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"modeling-cytoplasmic-to-nuclear-flow","dir":"Articles","previous_headings":"Quickstart","what":"Modeling cytoplasmic to nuclear flow","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"Data: Whole cell, cytoplasmic fraction, nuclear fraction NR-seq data. Goal: Fit simple model 0 -> N -> C -> 0; nuclear RNA (N) synthesized, exported cytoplasm (C), degraded (0). Pre-requisites: Create EZbakRData object Run EstimateFractions Create table feature lengths annotation Run AverageAndRegularize average fractions across replicates Input EZDynamics(): EZbakRData object run AverageAndRegularize matrix, referred “graph”, describing species modeling relationships one another: list equations describing RNA actually measured related species modeling: Running EZDynamics: Assessing accuracy since simulated data known ground truth:","code":"### SIMULATE DATA  simdata <- EZSimulate(nfeatures = 200,                       ntreatments = 1,                       mode = \"dynamics\",                       label_time = c(1, 3),                       dynamics_preset = \"nuc2cyto\")                ### EZBAKR ANALYSES  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output   # Lengths of features: # In simulation, all features are same length, so this is here for illustrative # purposes only feature_lengths <- tibble(   GF = unique(simdata$cB$GF),   length = 1000 )   # Averaging fractions rather than kinetics # Note the model, which specifies that we want to average data for a given # compartment AND label time (tl). ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~tl:compartment - 1,                               type = \"fractions\",                               feature_lengths = feature_lengths,                               parameter = \"logit_fraction_highTC\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates ### Input #2: the graph graph <- matrix(c(0, 1, 0,                   0, 0, 2,                   3, 0, 0),                 nrow = 3,                 ncol = 3,                 byrow = TRUE) colnames(graph) <- c(\"0\", \"N\", \"C\") rownames(graph) <- colnames(graph)  # Each row and column represents an RNA species being modeled # Here we are modeling the dynamics of nuclear (N) and cytoplasmic (C) # RNA. \"0\" represents no RNA, and must appear in the graph. N is synthesized # from 0 (i.e., its synthesis kinetics are 0-th order), and C is degraded to 0 # # Numbers in graph should range from 0 to the number of parameters in your model. # Order is arbitrary modeled_to_measured <- list(   nuclear = list(GF ~ N),   cytoplasm = list(GF ~ C),   total = list(GF ~ C + N) # total RNA is a combination of C and N ) # See documentation (?EZDynamics()) for descriptions of all parameters # specified. Bit of trickery here with an object loaded with EZbakR # called ode_models. More on this later ezbdo <- EZDynamics(ezbdo,                     graph = graph,                     sub_features = \"GF\",                     grouping_features = \"GF\",                     sample_feature = \"compartment\",                     modeled_to_measured = ode_models$nuc2cyto$formulas) gt <- simdata$ground_truth$parameter_truth  dynfit <- ezbdo$dynamics$dynamics1   compare <- dplyr::inner_join(dynfit, gt %>% dplyr::rename(GF = feature),                              by = \"GF\")   true_scale_factor <- mean(exp(compare$logk1[compare$logk1 < 9.9]) / compare$true_k1[compare$logk1 < 9.9])   gPk1 <- compare %>%   dplyr::mutate(density = get_density(     x = log(true_k1),     y = log(exp(logk1)/true_scale_factor),     n = 200   )) %>%   ggplot(aes(x = log(true_k1),              y = log(exp(logk1)/true_scale_factor),              color = density)) +   geom_point(size=0.9) +   theme_classic() +   scale_color_viridis_c() +   xlab(\"log(true ksyn)\") +   ylab(\"log(estimated ksyn)\") +   geom_abline(slope =1,               intercept = 0,               color = 'darkred',               linewidth = 0.75,               linetype = 'dotted') +   theme(axis.text=element_text(size=10),     axis.title=element_text(size=12),     legend.text=element_text(size=10),     legend.title=element_text(size=12))     gPk2 <- compare %>%   dplyr::mutate(density = get_density(     x = log(true_k2),     y = logk2,     n = 200   )) %>%   ggplot(aes(x = log(true_k2),              y = logk2,              color = density)) +   geom_point(size=0.9) +   theme_classic() +   scale_color_viridis_c() +   xlab(\"log(true kexp)\") +   ylab(\"log(estimated kexp)\") +   geom_abline(slope =1,               intercept = 0,               color = 'darkred',               linewidth = 0.75,               linetype = 'dotted') +   theme(axis.text=element_text(size=10),     axis.title=element_text(size=12),     legend.text=element_text(size=10),     legend.title=element_text(size=12))  gPk3 <- compare %>%   dplyr::mutate(density = get_density(     x = log(true_k3),     y = logk3,     n = 200   )) %>%   ggplot(aes(x = log(true_k3),              y = logk3,              color = density)) +   geom_point(size=0.9) +   theme_classic() +   scale_color_viridis_c() +   xlab(\"log(true kdeg)\") +   ylab(\"log(estimated kdeg)\") +   geom_abline(slope =1,               intercept = 0,               color = 'darkred',               linewidth = 0.75,               linetype = 'dotted') +   theme(axis.text=element_text(size=10),     axis.title=element_text(size=12),     legend.text=element_text(size=10),     legend.title=element_text(size=12))  gPk1 gPk2 gPk3"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"modeling-nuclear-degradation","dir":"Articles","previous_headings":"Quickstart","what":"Modeling nuclear degradation","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":", fit model nuclear RNA degrade. longer want make assumption? Just change graph specify N can degrade 0: Analyzing data model :","code":"### Input #2: the graph graph <- matrix(c(0, 1, 0,                   3, 0, 2,                   4, 0, 0),                 nrow = 3,                 ncol = 3,                 byrow = TRUE) colnames(graph) <- c(\"0\", \"N\", \"C\") rownames(graph) <- colnames(graph)  # Each row and column represents an RNA species being modeled # Here we are modeling the dynamics of nuclear (N) and cytoplasmic (C) # RNA. \"0\" represents no RNA, and must appear in the graph. N is synthesized # from 0 (i.e., its synthesis kinetics are 0-th order), and C is degraded to 0 # # Numbers in graph should range from 0 to the number of parameters in your model. # Order is arbitrary ##### SIMULATE DATA  simdata <- EZSimulate(nfeatures = 50,                       ntreatments = 1,                       mode = \"dynamics\",                       label_time = c(1, 3),                       dynamics_preset = \"nuc2cytowithNdeg\")  ##### EZBAKR ANALYSES  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output   # Lengths of features: # In simulation, all features are same length, so this is here for illustrative # purposes only feature_lengths <- tibble(   GF = unique(simdata$cB$GF),   length = 1000 )   # Averaging fractions rather than kinetics # Note the model, which specifies that we want to average data for a given # compartment AND label time (tl). ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~tl:compartment - 1,                               type = \"fractions\",                               feature_lengths = feature_lengths,                               parameter = \"logit_fraction_highTC\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Fit ODE model # Getting some help from ode_models object again ezbdo <- EZDynamics(ezbdo,                     graph = graph,                     sub_features = \"GF\",                     grouping_features = \"GF\",                     sample_feature = \"compartment\",                     modeled_to_measured = ode_models$nuc2cytowithNdeg$formulas)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"modeling-pre--and-mature-rna-dynamics","dir":"Articles","previous_headings":"Quickstart","what":"Modeling pre- and mature RNA dynamics","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"Data: Total RNA NR-seq data Goal: Fit simple model 0 -> P -> M -> 0; pre-RNA (P) synthesized, gets preprocessed mature RNA (M), eventually degraded. case, cB file need least two feature columns. example actually 3, one called GF, represents purely intronic data, one called XF, represents purely exonic data, one called feature, just convenient union XF GF (.e., value XF GF isn’t “__no_feature”, meaning assignable particular group). , assume XF reads correspond solely mature RNA, GF reads correspond solely premature RNA. choices can altered though. graph case looks just like nuclear cytoplasmic model without nuclear degradation. fact, ’s identical column row names changed clarity: couple things change time running model: main differences note : feature length table now include set features uniquely define distinct features. case means least GF XF. formula_mean includes label time. two sub_features, GF XF. feature column grouping_feature. sample_feature EZDynamics. modeled species (premature mature RNA) assayed samples.","code":"graph <- matrix(c(0, 1, 0,                   0, 0, 2,                   3, 0, 0),                 nrow = 3,                 ncol = 3,                 byrow = TRUE) colnames(graph) <- c(\"0\", \"P\", \"M\") rownames(graph) <- colnames(graph) ##### SIMULATE DATA  simdata <- EZSimulate(nfeatures = 50,                       ntreatments = 1,                       mode = \"dynamics\",                       label_time = c(1, 3),                       dynamics_preset = \"preRNA\")  ##### EZBAKR ANALYSES  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output   # Lengths of features: # In simulation, all features are same length, so this is here for illustrative # purposes only features <- unique(simdata$cB$feature) feature_lengths <- tibble(   GF = c(features,          rep(\"__no_feature\", times = length(features))),   XF = c(rep(\"__no_feature\", times = length(features)),          features),   length = 1000 )   # Averaging fractions rather than kinetics # Note the model, which specifies that we want to average data for a given # compartment AND label time (tl). ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~tl - 1,                               type = \"fractions\",                               feature_lengths = feature_lengths,                               parameter = \"logit_fraction_highTC\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Fit ODE model # Getting some help from ode_models object again ezbdo <- EZDynamics(ezbdo,                     graph = graph,                     sub_features = c(\"GF\", \"XF\"),                     grouping_features = \"feature\",                     modeled_to_measured = ode_models$preRNA$formulas$total)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"cytoplasmic-to-nuclear-flow-of-pre--and-mature-rna","dir":"Articles","previous_headings":"Quickstart","what":"Cytoplasmic to nuclear flow of pre- and mature RNA","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"can mix match two types data discussed thus far, namely nuclear + cytoplasmic fractionation total RNA data. allows us model nuclear cytoplasmic dynamics premature mature RNA. example, consider model nuclear premature RNA (NP) first synthesized, either processed mature nuclear RNA (NM), exported cytoplasm (CP). NM can exported mature cytoplasmic RNA (CM), CP can processed CM. graph case looks like: Fitting model looks like combination nuc2cyto preRNA models:","code":"graph <- matrix(c(0, 1, 0, 0, 0,                   0, 0, 2, 3, 0,                   0, 0, 0, 0, 4,                   0, 0, 0, 0, 5,                   6, 0, 0, 0, 0),                 nrow = 5,                 ncol = 5,                 byrow = TRUE)  colnames(graph) <- c(\"0\", \"NP\", \"NM\", \"CP\",\"CM\") rownames(graph) <- colnames(graph) ##### SIMULATE DATA  simdata <- EZSimulate(nfeatures = 50,                       ntreatments = 1,                       mode = \"dynamics\",                       label_time = c(1, 3),                       dynamics_preset = \"nuc2cytowithpreRNA\")  ##### EZBAKR ANALYSES  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output   # Lengths of features: # In simulation, all features are same length, so this is here for illustrative # purposes only features <- unique(simdata$cB$feature) feature_lengths <- tibble(   GF = c(features,          rep(\"__no_feature\", times = length(features))),   XF = c(rep(\"__no_feature\", times = length(features)),          features),   length = 1000 )   # Averaging fractions rather than kinetics # Note the model, which specifies that we want to average data for a given # compartment AND label time (tl). ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~tl:compartment - 1,                               type = \"fractions\",                               feature_lengths = feature_lengths,                               parameter = \"logit_fraction_highTC\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Fit ODE model # Getting some help from ode_models object again ezbdo <- EZDynamics(ezbdo,                     graph = graph,                     sub_features = c(\"GF\", \"XF\"),                     grouping_features = \"feature\",                     sample_feature = \"compartment\",                     modeled_to_measured = ode_models$nuc2cytowithpreRNA$formulas)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"performing-comparative-analyses","dir":"Articles","previous_headings":"Quickstart","what":"Performing comparative analyses","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"examples involved estimating kinetic parameters single biological condition. multiple distinct conditions want compare parameter estimates across conditions? EZbakR can ! ’s example :","code":"### SIMULATE DATA  # Now we are simulating two distinct biological conditions. # Default is for about 50% of all features to have differences in # all parameters.  simdata <- EZSimulate(nfeatures = 200,                       ntreatments = 2,                       mode = \"dynamics\",                       label_time = c(1, 3),                       dynamics_preset = \"nuc2cyto\")                ### EZBAKR ANALYSES  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output   # Lengths of features: # In simulation, all features are same length, so this is here for illustrative # purposes only feature_lengths <- tibble(   GF = unique(simdata$cB$GF),   length = 1000 )   # DIFFERENT FROM SINGLE CONDITION ANALYSIS: \"treatment\" is included in the formula. ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~tl:compartment:treatment - 1,                               type = \"fractions\",                               feature_lengths = feature_lengths,                               parameter = \"logit_fraction_highTC\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates   # Nothing changes here! ezbdo <- EZDynamics(ezbdo,                     graph = ode_models$nuc2cyto$graph,                     sub_features = \"GF\",                     grouping_features = \"GF\",                     sample_feature = \"compartment\",                     modeled_to_measured = ode_models$nuc2cyto$formulas)   # Now we can run CompareParameters. Need to: # 1) Let it know you want to use EZDynamics output (type = \"dynamics\") # 2) Specify the \"design_factor\" (treatment in this case)  # 3) Specify the \"parameter\" you want to compare  # (let's compare log(k2), a.k.a logk2). ezbdo <- CompareParameters(ezbdo,                            type = \"dynamics\",                            parameter = \"logk2\",                            design_factor = \"treatment\",                            reference = \"treatment1\",                            experimental = \"treatment2\")   # Can make a volcano plot # Here I have specified everything to be exhaustive, but # in this case we could just specify `parameter = \"logk2\"`, # since we only have one logk2 comparative analysis in our # EZbakRData object EZVolcanoPlot(ezbdo,               parameter = \"logk2\",               design_factor = \"treatment\",               reference = \"treatment1\",               experimental = \"treatment2\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"taking-a-deeper-dive","dir":"Articles","previous_headings":"","what":"Taking a deeper dive","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"section explore greater detail many components make EZDynamics tick. discuss structure information convey.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"running-ezdynamics","dir":"Articles","previous_headings":"Taking a deeper dive","what":"Running EZDynamics","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"EZDynamics following important/required parameters: EZbakRData object run AverageAndRegularize(). matrix, referred “graph” (like mathematical concept, things make ggplot), specifying RNA dynamical systems model. list formulas describing measured feature relates features model “graph”. feature columns mentioned list formulas (sub_features). feature columns define overarching features estimate kinetic parameters (grouping_features). column metadf distinguishes different samples assying different species RNA. (sample_feature). read , check function documentation ?EZDynamics. “graph” list formulas described .","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"the-graph","dir":"Articles","previous_headings":"Taking a deeper dive","what":"The graph","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"tells EZDynamics model like fit. matrix many rows columns. row/column represents given specie RNA. One rows/columns must always “0”, denote “RNA”. RNA can synthesized “RNA”, can degraded “RNA”. rows/columns tangible RNA species, like premature RNA, cytoplasmic RNA. names can whatever want, sake, try make make sense. Element ,j (ith row, jth column) matrix specifies whether species can converted species j. , element integer index 1 number possible conversions (.e., number parameters model). integer arbitrary, typically like filling matrix row row (top bottom), left right. example, wanted model nuclear export synthesized RNA (N), eventual degradation cytoplasmic RNA (C), define following “graph”: first row/column corresponds “RNA”, second row/column corresponds “nuclear RNA”, third row/column corresponds “cytoplasmic RNA”. Thus: Row 1, column 1 = 0 -> 0, trivial non-transformation, thus receives value 0. NOTE: diagonal matrix always 0, reason. Row 1, column 2 = 0 -> N, represents zeroth-order synthesis nuclear RNA, process assuming occurs. Thus, gets non-zero integer index. chosen 1 case Row 1, column 3 = 0 -> C, represent zeroth-order synthesis cytoplasmic RNA, process assume never occurs. Cytoplasmic RNA model comes nuclear RNA. Thus, gets 0 Row 2, column 1 = N -> 0, represents first-order degradation nuclear RNA, case assume happen. gets 0. Row 2, column 2 = N -> N, trivially 0 Row 2, column 3 = N -> C, represents first-order conversion nuclear RNA cytoplasmic RNA, better known nuclear export. assume occur, gets integer index, chosen 2. Row 3, column 1 = C -> 0, represents first-order degradation cytoplasmic RNA, assume occurs. thus gets integer index, chosen 3. Row 3, column 2 = C -> N, represent re-entry cytoplasmic RNA nucleus, assuming doesn’t happen, thus gets value 0. Row 3, column 3 = C -> C, trivially 0 model three parameters, rate synthesis nuclear RNA, rate constant nuclear export, rate constant cytoplasmic RNA degradation. Thus, graph matrix needs 1, 2, 3 somewhere (integer indexes processes), .","code":"graph <- matrix(   c(0, 1, 0,     0, 0, 2,     3, 0, 0),   ncol = 3,   nrow = 3,   byrow = TRUE ) colnames(graph) <- c(\"0\", \"N\", \"C\") rownames(graph) <- colnames(graph)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"identifiability","dir":"Articles","previous_headings":"Taking a deeper dive > The graph","what":"Identifiability","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"Left devices, sure dream fantastical mind-bending models RNA dynamics. models “fittable”. say, likely don’t data necessary estimate reasonable values parameters intricate models. case, say model “identifiable”. Roughly speaking, model case identifiable number parameters <= 2 * (number assayed RNA species). example, case nuclear/cytoplasmic model discussed , 3 parameters. Typically, trying fit model, nuclear fraction NR-seq data, cytoplasmic fraction NR-seq data, whole cell NR-seq data. nuclear fraction assay one specie RNA (nuclear RNA, denoted N graph constructed ). cytoplasmic fraction assay one specie RNA (cytoplasmic RNA, denoted C graph ). two alone, 2 species, means can theory estimate 4 parameters. Can theoretically fit complicated model whole cell data? Well whole cell data assays combination two species, nuclear (N) cytoplasmic (C) RNA. already assayed samples, thus whole cell data doesn’t provide anything terms additional model complexity freedom. say whole cell data case isn’t important. fact, key normalizing data (see ). Without , able use read counts fraction help infer kinetic parameters. case, number parameters estimate equal number assayed RNA species, rather double amount. factor 1 vs. 2 comes fact get two pieces information RNA specie: fraction labeled, number reads. can’t normalize read counts though, effectively get one piece information per specie. limit number estimatable parameters quoted simple limit theoretical limit. ’s kind like best case scenario number parameters hope estimate. practice though, parameters practically identifiable. say, perfect, noise-less data determine values, real data, become difficult pin accurately. often dynamic range problem, large range values particular parameter model expected much impact data observe. EZbakR can help identify case; see section uncertainty quantification .","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"the-formulas","dir":"Articles","previous_headings":"Taking a deeper dive","what":"The formulas","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"addition model, also need specify EZDynamics() things measured relate RNA species modeling. example, might single feature column cB analyze (e.g., XF, fastq2EZbakR output represents data reads definitively exonic regions). actual specie RNA graph feature represents though differ sample sample though, example analyzing subcellular fractionation NR-seq data. addition, times analyzing multiple cB feature columns (e.g., GF XF, representing reads gene, exonic reads gene, respectively). case, feature likely represent different RNA species, combination RNA species. cases, formula objects used convey EZDynamics() . list formula objects get passed EZDynamics() via modeled_to_measured parameter. element list needs formula describing features cB, potentially given set samples, relates species graph.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"example-1-nuclear-and-cytoplasmic-fractionation","dir":"Articles","previous_headings":"Taking a deeper dive > The formulas","what":"Example 1: nuclear and cytoplasmic fractionation","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"Consider case modeling nuclear, cytoplasmic, total NR-seq data. Assume metadf column called compartment, specifies samples represent three fractions. example, metadf might look like: Let’s also assume cB file single feature column, let’s call XF. list pass modeled_to_measured must one element value compartment shows metadf. element needs describe XF sample related species graph. Say referred two species graph, nuclear RNA (N graph) cytoplasmic RNA (C graph). modeled_to_measured : says : total RNA samples, XF represents sum cytoplasmic (C) nuclear (N) RNA. nuclear RNA samples, XF represents nuclear RNA (N). cytoplasmic RNA samples, XF represents cytoplasmic RNA (C).","code":"metadf <- tibble(   sample = c(\"cyto_1\", \"cyto_2\",              \"nuc_1\", \"nuc_2\",              \"tot_1\", \"tot_3\"),   tl = 1,   compartment = c(\"cytoplasmic\", \"cytoplasmic\",                   \"nuclear\", \"nuclear\",                   \"total\", \"total\") ) mtom <- list(   total = list(XF ~ C + N),   nuclear = list(XF ~ N),   cytoplasmic = list(XF ~ C) )"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"example-2-pre-rna-dynamics","dir":"Articles","previous_headings":"Taking a deeper dive > The formulas","what":"Example 2: pre-RNA dynamics","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"Now, consider case modeling premature mature RNA dynamics total NR-seq data. case, sample assays exact RNA species. Therefore, won’t need specify separate formulae sample. difference though cB file need one feature column. example, fastq2EZbakR can output cB files XF GF columns. XF represents data reads mapping exclusively exonic regions. GF represents data reads (intronic exonic) gene. case, need provide list one element per feature. reasonable modeled_to_measured list might look like case: assuming M represents mature RNAs graph, P represents premature RNA. interpret set formulas, need note one thing: GF called grouping_feature sub_feature call EZDynamics(). refresher, grouping_features never value “__no_feature”, similar null-assignment value. included final output. sub_features describe modeled_to_measured; represent specific RNA species, combinations RNA species. example, GF grouping feature sub feature, GF modeled_to_measured actually represents entries cB XF “__no_feature” (similar). say, represents case reads overlap intronic portions gene. , formulas say : XF represents mature RNA GF represents premature RNA NOTE: bit complexity , true intronic reads definitively premature RNA, exonic reads necessarily definitely mature RNA. accurate split XF two features, call XF_sj XF_nosj (sj = splice junction). former instances splice junction mapping reads, (almost) definitively mature RNA, latter represent reads don’t overlap splice junctions, thus come either premature mature RNA. formula case look like: aside, fastq2EZbakR includes sj column output cB, value TRUE data reads overlapping exon-exon splice junctions, allowing create XF split .","code":"mtom <- list(   XF ~ M,   GF ~ P ) mtom <- list(   XF_sj ~ M,   XF_nosj ~ P + M,   GF ~ P )"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"example-3-prernamature-rna-nuclearcytoplasmic-dynamics","dir":"Articles","previous_headings":"Taking a deeper dive > The formulas","what":"Example 3: preRNA/mature RNA nuclear/cytoplasmic dynamics","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"want model premature mature RNA dynamics nuclear cytoplasmic RNA? case, need list lists, one inner-list per compartment (e.g., total, nuclear, cytoplasmic) inner-list describing multiple cB feature columns related modeled species. Let’s say fitting following model (“graph” form): NP = nuclear pre-RNA; NM = nuclear mature RNA; CP = cytoplasmic pre-RNA; CM = cytoplasmic mature RNA. metadf looks like Example 1 section, modeled_to_measured might look like: just combination Example 1 Example 2 lists, Example 2 lists effectively inside Example 1 lists.","code":"graph <- matrix(c(0, 1, 0, 0, 0,                   0, 0, 2, 3, 0,                   0, 0, 0, 0, 4,                   0, 0, 0, 0, 5,                   6, 0, 0, 0, 0),                 nrow = 5,                 ncol = 5,                 byrow = TRUE)  colnames(graph) <- c(\"0\", \"NP\", \"NM\", \"CP\",\"CM\") rownames(graph) <- colnames(graph) mtom <- list(   total = list(     GF ~ NP + CP,     XF ~ NM + CM   ),   nuclear = list(     GF ~ NP,     XF ~ NM   ),   cytoplasmic = list(     GF ~ CP,     XF ~ CM   )  )"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"the-ode_models-object","dir":"Articles","previous_headings":"Taking a deeper dive","what":"The ode_models object","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"convenience, EZbakR provides list popular graphs formulas lazily loaded list called ode_models. EZbakR loaded, can inspect contents list. can read contents running ?ode_models R session (pull data’s documentation). ’ll save suspense tell 6 elements: nuc2cyto: Simplest model nuclear cytoplasmic RNA dynamics: 0 -> N -> C -> 0 preRNA: Simplest model pre-RNA mature RNA dynamics: 0 -> P -> M -> 0 preRNAwithPdeg: preRNA, now pre-RNA can also degrade. nuc2cytowithNdeg: nuc2cyto, now nuclear RNA can also degrade. subtlseq: Subcellular TimeLapse-seq model, similar described Iestwaart et al., 2024. Simplest model discussed , lacking nuclear degradation: 0 -> CH -> NP -> CY -> PL -> 0, CY can also degrade. CH = chromatin bound RNA. NP = nucleoplasmic RNA, chromatin. CY = cytoplasmic RNA, polysomes. PL = polysome bound RNA. Quickstart documentation , used formula lists stored several cases simplify code. make hard assumptions called certain compartments metadf, bit careful .","code":""},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"sparknotes","dir":"Articles","previous_headings":"Taking a deeper dive > Normalization","what":"SparkNotes","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"detailed description EZbakR can normalize read counts. , present brief synopsis main takeaways: want analyze subcellular fractionation NR-seq data, normalization key. properly normalize subcellular fractionation data, option normalization derive scale factors spike-ins, provide via scale_factors parameter. data frame two columns, one “scale” (scale factor), whatever sample_feature (e.g., “compartment”). Thus, providing single scale factor samples given sample_feature value. Normalization different samples sample_feature value handled AverageAndRegularize(), mostly automatic. See discussion exception . Option B normalization EZbakR figure scale factors. done via modeling global, length normalized fraction reads labeled sample. strategy works sufficient set combinations individual sample types. example, trying normalize cytoplasmic/nuclear fractionation NR-seq data, need cytoplasmic data, nuclear data, also combination two (.e., whole cell data). relationship fraction reads labeled three samples gives EZbakR information needed infer relative molecular abundances species compartment. pursuing option B, important EZbakR length normalizes read counts. done passing table feature lengths feature_lengths parameter AverageAndRegularize(). columns table include names features modeling (e.g., XF), additional column called “length”. “length” denote effective length feature.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"the-details","dir":"Articles","previous_headings":"Taking a deeper dive > Normalization","what":"The details","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"EZDynamics() can use two pieces information infer kinetic parameters specified model given feature: fraction reads feature labeled (.k.., fraction labeled). number reads said feature. former “internally normalized” quantity. can thought ratio read counts sample (# reads labeled RNA / total # reads). RNA-seq read count normalization scale factor applied numerator applied denominator well, thus cancel . Thus, fraction labeled require read count normalization used effectively. Modeling read counts hand require read counts normalized. usually means multiplying read counts sample-wide scale factors, differences normalized read count correspond differences absolute molecular abundances given RNA. Read count normalization difficult RNA populations different samples differ drastically, e.g. total molecular abundances RNA one sample greater another (say RNA exists cytoplasm nucleus, data cytoplasmic nuclear fractions). Standard statistical normalization strategies fail, assume sample-wide differences exist. options read count normalization setting analyzing subcellular fractionation data : Derive spike-ins. Don’t normalize read counts, use fraction labeled infer kinetic parameters. downside greatly limiting complexity models can fit. Let EZbakR infer scale factors automatically. 1 technically ideal, though getting spike-ins work well can easier said done. scale factors provided, EZbakR try 3. strategy works modeling total fraction reads labeled given sample function value samples. example, cytoplasmic, nuclear, whole cell NR-seq data, can model whole cell global fraction labeled weighted average cytoplasmic nuclear global fraction labeled’s. weights related relative molecular abundances cytoplasmic nuclear RNA, making precisely normalization scale factors .","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZDynamics.html","id":"uncertainty-quantification","dir":"Articles","previous_headings":"Taking a deeper dive","what":"Uncertainty quantification","title":"Dynamical systems modeling in EZbakR: EZDynamics()","text":"output EZDynamics table stored dynamics element EZbakRData object. can access <obj>$dynamics$<dynamics_table_name>, replacing <obj> called EZbakRData object, dynamics_table_name whatever EZbakR called table, using EZget. interpreting output, mindful uncertainty estimates (“se_”) given parameter. Often, parameters model theoretically identifiable, meaning theory enough data estimate , practically identifiable. High uncertainties can flag instances latter. represents “high” can vary bit dataset dataset parameter parameter, range uncertainties seen across estimated parameters can give good sense good. cases practical unidentifiability, pretty clear stratification low high uncertainty estimates.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZQC.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"QCing your NR-seq data with EZbakR: EZQC()","text":"Quality control checks important part high throughput dataset analysis, analyzing NR-seq data different. Therefore, EZbakR provides function, EZQC() help identify potential problems NR-seq data. section, discuss run EZQC() looks . also provide suggestions best design analyze NR-seq experiments. Let’s start loading EZbakR, use throughout vignette: NOTE: EZQC() EZbakR’s instantiation bakR’s QC_checks(), though differs number key ways. Thus, don’t expect output behavior exactly mimic QC_checks(). said, much discussion QCing NR-seq data present bakR’s vignette still relevant interpreting EZbakR’s output.","code":"library(EZbakR)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZQC.html","id":"ezqc","dir":"Articles","previous_headings":"","what":"EZQC","title":"QCing your NR-seq data with EZbakR: EZQC()","text":"EZQC() can take two different inputs: EZbakRData object. can created EZbakRData(). EZbakRFractions object. EZbakRData object run EstimateFractions(). example shown : first case (EZbakRData input), following checked: Correlation read counts replicates Raw mutation rates Labeled unlabeled read mutation rates second case (EZbakRFractions input), things checked, addition : Correlation fraction estimates (e.g., fraction labeled single label experiments) replicates. Distribution fraction estimates. Replicate correlation intuitive QC metric ensures replicates agree well. three metrics NR-seq specific metrics assess extent metabolic label readily incorporated nascent RNA, appropriateness metabolic label feed time used (.e., long cells fed label, sometimes referred label time). general, want see: High labeled read mutation rates (referred pnew within EZbakR). Low unlabeled read mutation rates (referred pold within EZbakR). Roughly equal proportions mutational populations (e.g., labeled unlabeled reads single label experiment).","code":"simdata <- EZSimulate(250)  ezbdo <- EZbakRData(simdata$cB,                     simdata$metadf)  ### Input: EZbakRData object qc <- EZQC(ezbdo) #> CHECKING RAW MUTATION RATES... #> CHECKING INFERRED MUTATION RATES... #> CHECKING READ COUNT CORRELATIONS... #> log10(read counts) correlation for each pair of replicates are: #> # A tibble: 12 × 3 #>    sample_1 sample_2 correlation #>    <chr>    <chr>          <dbl> #>  1 sample1  sample2        0.984 #>  2 sample1  sample3        0.983 #>  3 sample1  sample7        0.983 #>  4 sample2  sample3        0.985 #>  5 sample2  sample7        0.986 #>  6 sample3  sample7        0.985 #>  7 sample4  sample5        0.982 #>  8 sample4  sample6        0.984 #>  9 sample4  sample8        0.986 #> 10 sample5  sample6        0.983 #> 11 sample5  sample8        0.985 #> 12 sample6  sample8        0.986 #>  #> log10(read counts) correlations are high, suggesting good reproducibility! #>    ### Input: EZbakRFractions object ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output qc_fn <- EZQC(ezbdo) #> CHECKING RAW MUTATION RATES... #> CHECKING INFERRED MUTATION RATES... #> CHECKING READ COUNT CORRELATIONS... #> log10(read counts) correlation for each pair of replicates are: #> # A tibble: 12 × 3 #>    sample_1 sample_2 correlation #>    <chr>    <chr>          <dbl> #>  1 sample1  sample2        0.984 #>  2 sample1  sample3        0.983 #>  3 sample1  sample7        0.983 #>  4 sample2  sample3        0.985 #>  5 sample2  sample7        0.986 #>  6 sample3  sample7        0.985 #>  7 sample4  sample5        0.982 #>  8 sample4  sample6        0.984 #>  9 sample4  sample8        0.986 #> 10 sample5  sample6        0.983 #> 11 sample5  sample8        0.985 #> 12 sample6  sample8        0.986 #>  #> log10(read counts) correlations are high, suggesting good reproducibility! #>  #> CHECKING FRACTION LABELED DISTRIBUTIONS... #> Average fractions for each sample are: #> # A tibble: 6 × 3 #>   sample  avg_fraction fraction_type   #>   <chr>          <dbl> <chr>           #> 1 sample1        0.303 fraction_highTC #> 2 sample2        0.306 fraction_highTC #> 3 sample3        0.303 fraction_highTC #> 4 sample4        0.309 fraction_highTC #> 5 sample5        0.308 fraction_highTC #> 6 sample6        0.307 fraction_highTC #>  #> Labeling rates (e.g., fraction labeled for single label experiments) look good! #>  #> CHECKING FRACTION LABELED CORRELATIONS... #> logit(fraction_highTC) correlation for each pair of replicates are: #> # A tibble: 6 × 3 #>   sample_1 sample_2 correlation #>   <chr>    <chr>          <dbl> #> 1 sample1  sample2        0.967 #> 2 sample1  sample3        0.960 #> 3 sample2  sample3        0.964 #> 4 sample4  sample5        0.950 #> 5 sample4  sample6        0.959 #> 6 sample5  sample6        0.962 #>  #> logit(fraction_highTC) correlations are high, suggesting good reproducibility! #>"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZQC.html","id":"ezqc-output","dir":"Articles","previous_headings":"EZQC","what":"EZQC output","title":"QCing your NR-seq data with EZbakR: EZQC()","text":"Inside output objects (qc qc_fn code), find number plots. output named list, one plot present element list. named elements contents follows: raw mutation rate = (total # mutations) / (total # mutable nucleotides) Raw mutation rate high samples fed relevant label, low unfed samples. inferred labeled mutation rate rate mutation particular type seen reads RNA synthesized presence relevant metabolic label. inferred unlabeled mutation rate mutation rate, reads RNA synthesized prior labeling. sometimes referred conversion background rates, respectively. plot includes subtitle guidelines interpretation. Inferred labeled mutation rates preferably much higher unlabeled mutation rates samples. plots named according samples compared (e.g., “sample1_vs_sample2”). Ideally, peak around 1 / (# populations). standard, single label experiment, 0.5 (# populations = 2; labeled unlabeled). present provided EZbakRFractions object input! present provided EZbakRFractions object input!","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZQC.html","id":"what-to-do-if-the-qc-looks-iffy","dir":"Articles","previous_headings":"EZQC","what":"What to do if the QC looks iffy?","title":"QCing your NR-seq data with EZbakR: EZQC()","text":"Potential problem #1: Labeled read mutation rates low Possible solutions: Better read alignment settings ensure recovery high mutation content reads. fastq2EZbakR’s default config includes STAR settings used multiple labs help . Tools like grandRescue developed Erhard lab may also help. ran fastq2EZbakR, properly set strandedness library? can check intermediate files produced fastq2EZbakR test hypothesis; see details. using short label time, incorporation rates low, EZbakR may just tough time estimating labeled read mutation rate. -label data, can use infer single background mutation rate samples, estimate labeled read mutation rate, fixing unlabeled read mutation rate. can done setting pold_from_no_label=TRUE call EstimateFractions(). fact, even like defaulting setting -label samples available. may need optimize concentration metabolic label fed cells. simple TAMRA-labeling dot blot assay can used broadly access incorporation metabolic label particular system. Potential problem #2: Labeled read mutation rates acceptable, raw mutation rates low. case, fraction estimate replicate correlation may also low. Possible solutions: may need use longer label time ensure better representation labeled RNA samples. Either way, using pold_from_no_label=TRUE EstimateFractions() call, described , likely good idea ensure accurate labeled read mutation rate inference. Potential problem #3: Poor correlation read counts across replicates, especially -label +label, different label time +label, samples. may sign dropout, described , , , . reads highly labeled RNA underrepresented +label data. can try: Decreasing metabolic label concentration. Decreasing metabolic label feed time. Using RNA handling protocol suggested . Better read alignment settings avoid loss high mutation content reads. See potential solutions problem #1 described details. Running EZbakR’s CorrectDropout() try bioinformatically correct biases induced dropout. requires -label data distinct biological conditions. Suggestions 1 2 can help matter cause dropout (e.g., adverse effects label, RNA handling problems, read alignment problems, etc.). three suggestions suited case dropout seem biological origin. general, proven strategy distinguish cause dropout exist, may want try assessing trends sequencing tracks (e.g., look dropoff coverage near 3’ end transcripts upon increased labeling) performing differential expression GO analysis + -label samples assess potential upregulation transcriptional repression stress pathways.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZQC.html","id":"characteristics-of-a-good-nr-seq-experiment","dir":"Articles","previous_headings":"","what":"Characteristics of a good NR-seq experiment:","title":"QCing your NR-seq data with EZbakR: EZQC()","text":"list discuss , opinion, makes ideal NR-seq dataset: Multiple +label (e.g., s4U) replicates biological condition assessed. Nothing radical , replicates important settings. least one, though preferably multiple, replicates -label (e.g., regular RNA-seq) controls biological condition assessed. crucial control ensure label(s) used significant impact treated cells. can also help correct certain instances bias (.e., dropout) present NR-seq datasets. suffer longer exposure cells metabolic label, thus incurring greater risk physiological impact. require comparisons across samples infer kinetic parameters, yielding noisier estimates. almost never necessary dynamics unlabeled RNA pulse-label experiment identical labeled RNA pulse-chase experiment. Rare exceptions rules exist, unless really good reason use pulse-chase design, pulse-labels default. humans mice, means 4 hours, isn’t specific species RNA interested probing. 2 hour label times typical tend work great systems. yeast much shorter, around 30 minutes. Typical values range 100 μ\\mathrm{\\mu}M 1 mM, simple, low throughput assays (e.g., dot blots) used ensure sufficient incorporation metabolic label given concentration. Different cell lines can exhibit wildly different levels label uptake, thus best assess unique biological context plan NR-seq . Lower concentrations better avoid adverse effects, make sure incorporation lower concentrations still robust committing.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EZget.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Convenient fetching of EZbakR outputs: EZget()","text":"vignette shows use EZget() function provided EZbakR. cases multiple tables particular type EZbakRData object, can greatly facilitate extracting table interest. part vignette, also describe EZbakRData object organized.","code":"library(EZbakR)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZget.html","id":"ezbakrdata-objects","dir":"Articles","previous_headings":"","what":"EZbakRData objects","title":"Convenient fetching of EZbakR outputs: EZget()","text":"Let’s first analyze simulated data generate EZbakRData object can explore contents : EZbakRData object list can contain following items: cB: cB table provided upon object creation. metadf: metadf table provided upon object creation. fractions: List fractions estimates generated EstimateFractions(). kinetics: List kinetic parameter estimates generated EstimateKinetics(). averages: List parameter replicate averages generated AverageAndRegularize(). comparisons: List comparisons parameter averages, generated CompareParameters(). dynamics: List dynamical systems model parameter estimated, generateld EZDynamics(). readcounts: List tables read counts generated various EZbakR functions. metadata: List elements corresponding lists tables described . Describes various features tables can fetched EZget(). EZbakRData object list, elements can accessed ways:","code":"simdata <- EZSimulate(nfeatures = 300, nreps = 2)  # Make initial EZbakRData object ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate fractions twice, and don't overwrite the first analysis # Second run will use different model; see EstimateFractions vignette for details ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo, strategy = 'hierarchical', overwrite = FALSE) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> FITTING HIERARCHICAL TWO-COMPONENT MIXTURE MODEL: #> Estimating distribution of feature-specific pnews #> Estimating fractions with feature-specific pnews #> Processing output  # Estimate kinetic parameters with three different strategies # See EstimateKinetics vignettes for details. ezbdo <- EstimateKinetics(ezbdo, repeatID = 1) ezbdo <- EstimateKinetics(ezbdo, repeatID = 1, strategy = \"shortfeed\") ezbdo <- EstimateKinetics(ezbdo, repeatID = 2, strategy = \"shortfeed\") # `$` notation: ezbdo$fractions$feature #> # A tibble: 1,800 × 6 #>    sample  feature fraction_highTC logit_fraction_highTC se_logit_fraction_hig…¹ #>    <chr>   <chr>             <dbl>                 <dbl>                   <dbl> #>  1 sample1 Gene1            0.102                  -2.17                  0.0620 #>  2 sample1 Gene10           0.222                  -1.25                  0.111  #>  3 sample1 Gene100          0.188                  -1.46                  0.0719 #>  4 sample1 Gene101          0.184                  -1.49                  0.0338 #>  5 sample1 Gene102          0.141                  -1.81                  0.0926 #>  6 sample1 Gene103          0.116                  -2.03                  0.0871 #>  7 sample1 Gene104          0.152                  -1.72                  0.0398 #>  8 sample1 Gene105          0.0827                 -2.41                  0.0875 #>  9 sample1 Gene106          0.177                  -1.54                  0.0893 #> 10 sample1 Gene107          0.161                  -1.65                  0.0466 #> # ℹ 1,790 more rows #> # ℹ abbreviated name: ¹​se_logit_fraction_highTC #> # ℹ 1 more variable: n <int>  # `[[]]` notation with element names ezbdo[['fractions']][['feature']] #> # A tibble: 1,800 × 6 #>    sample  feature fraction_highTC logit_fraction_highTC se_logit_fraction_hig…¹ #>    <chr>   <chr>             <dbl>                 <dbl>                   <dbl> #>  1 sample1 Gene1            0.102                  -2.17                  0.0620 #>  2 sample1 Gene10           0.222                  -1.25                  0.111  #>  3 sample1 Gene100          0.188                  -1.46                  0.0719 #>  4 sample1 Gene101          0.184                  -1.49                  0.0338 #>  5 sample1 Gene102          0.141                  -1.81                  0.0926 #>  6 sample1 Gene103          0.116                  -2.03                  0.0871 #>  7 sample1 Gene104          0.152                  -1.72                  0.0398 #>  8 sample1 Gene105          0.0827                 -2.41                  0.0875 #>  9 sample1 Gene106          0.177                  -1.54                  0.0893 #> 10 sample1 Gene107          0.161                  -1.65                  0.0466 #> # ℹ 1,790 more rows #> # ℹ abbreviated name: ¹​se_logit_fraction_highTC #> # ℹ 1 more variable: n <int>  # `[[]]` notation with numeric indices ezbdo[[4]][[1]] #> # A tibble: 1,800 × 6 #>    sample  feature fraction_highTC logit_fraction_highTC se_logit_fraction_hig…¹ #>    <chr>   <chr>             <dbl>                 <dbl>                   <dbl> #>  1 sample1 Gene1            0.102                  -2.17                  0.0620 #>  2 sample1 Gene10           0.222                  -1.25                  0.111  #>  3 sample1 Gene100          0.188                  -1.46                  0.0719 #>  4 sample1 Gene101          0.184                  -1.49                  0.0338 #>  5 sample1 Gene102          0.141                  -1.81                  0.0926 #>  6 sample1 Gene103          0.116                  -2.03                  0.0871 #>  7 sample1 Gene104          0.152                  -1.72                  0.0398 #>  8 sample1 Gene105          0.0827                 -2.41                  0.0875 #>  9 sample1 Gene106          0.177                  -1.54                  0.0893 #> 10 sample1 Gene107          0.161                  -1.65                  0.0466 #> # ℹ 1,790 more rows #> # ℹ abbreviated name: ¹​se_logit_fraction_highTC #> # ℹ 1 more variable: n <int>"},{"path":"https://isaacvock.github.io/EZbakR/articles/EZget.html","id":"using-ezget","dir":"Articles","previous_headings":"","what":"Using EZget","title":"Convenient fetching of EZbakR outputs: EZget()","text":"EZget() provides alternative strategy getting particular table. two required arguments: obj: EZbakRData object like get table . type: type table looking . Options “fractions”, “kinetics”, “readcounts”, “averages”, “comparisons”, lists tables described . remaining parameters search criteria specify. full list can seen function docs (?EZget()). except strings vectors strings input, metadata checked see provided string contained respective metadata slot. example, can extract kinetics table generated standard analysis like : cases, multiple tables exact metadata exist. example, metadata fractions tables : feature columns reads grouped. “feature” fractions tables. mutational populations analyzed. “TC” fractions tables. fraction_design table used. standard fraction_design single mutation type analysis fractions tables. Since set overwrite = FALSE second run EstimateFractions, tables saved. distinguishes final piece metadata saved tables: repeatID. numerical ID distinguishes multiple instances table. ID 1 first object created, 2 second, etc. Thus, analysis standard mixture model repeatID 1, analysis hierarchical mixture model repeatID 2. can thus access latter : three parameters tune EZget()’s behavior. : returnNameOnly: TRUE, names tables consistent search criterion specify returned. throw warning one table passes criteria, error case. returnNameOnly FALSE, error thrown one table matches search criteria. exactMatch: features populations arguments two arguments can vectors strings. Setting exactMatch TRUE force provided features populations vectors exactly match table’s metadata table returned. alternative (default) behavior, provided feature(s) population(s) contained table’s metadata. alwaysCheck: single table relevant type present EZbakRData object, EZget() automatically returns table without checking see search criteria match. set alwaysCheck TRUE, table searched normal returned metadata match search criteria.","code":"kinetics <- EZget(ezbdo,                   type = \"kinetics\",                   kstrat = \"standard\") h_fxn <- EZget(ezbdo,                 type = 'fractions',                repeatID = 2)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Universal first step: EstimateFractions()","text":"first step almost NR-seq analysis estimating much mutational population present feature sample. example, standard TimeLapse-seq/SLAM-seq/TUC-seq/etc. experiment, need first estimate fraction reads feature high T--C mutational content. EstimateFractions() designed exactly task. vignette, walk basics using EstimateFractions(), also diving unique functionality.","code":"library(EZbakR)  # Going to show one tidyr trick to help with cB filtering library(tidyr)  # Going to use a bit of dplyr magic in my demonstrations library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The basics","title":"Universal first step: EstimateFractions()","text":"First, let’s simulate data showcase EstimateFractions() works: Technically, need run EstimateFractions(), providing EZbakRData object, fine: Despite , important realize EstimateFractions() automating lot things hood. particular, making following assumptions data: want analyze every mutational population tracked cB file. case, just “TC” column simulated cB. possible mutational populations present data. feature sets want estimate fractions includes unique combination feature columns cB. case, just “feature” column simulated cB. want filter rows feature columns string “__no_feature” “NA”. Rows multiple feature assignments given feature column split separate rows feature assignment. rest section, discuss adjust behaviors.","code":"simdata <- EZSimulate(nfeatures = 300, nreps = 2)  ezbdo <- EZbakRData(simdata$cB, simdata$metadf) ezbdo <- EstimateFractions(ezbdo,                            features = \"feature\") #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # NOTE: # For real data from fastq2EZbakR, you will often # want to set `features = \"XF\"`, specifying analysis # of reads mapping to exonic regions of genes."},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"tuning-the-mutational-modeling","dir":"Articles","previous_headings":"The basics","what":"Tuning the mutational modeling","title":"Universal first step: EstimateFractions()","text":"multiple mutation-type columns cB, like analyze subset , subset can specified using mutrate_populations argument: check ?EstimateFractions(), see default value “”, means use present mutation-type columns. addition, hood, EstimateFractions() creates termed fractions design matrix. “design matrix” really just data frame n + 1 columns, n number mutation-types analyzing. EZbakR provides lazily loaded examples check . “Standard” TC-fractions design matrix: one column mutation-type, one column called present. value mutation-type column either TRUE FALSE. TRUE indicates row describes population high levels mutation-type. first row example describes high T--C mutation content population. value present column denotes whether population expected present data. first row present value TRUE expect high T--C mutation content reads +label data (don’t worry -label controls, properly handled automatically). second row TC value FALSE, indicating pertains population reads low T--C mutation content. population also expected exist standard NR-seq dataset, present value also `TRUE. complicated example, consider fractions design matirx TILAC. TILAC method s4U labeled RNA population mixed s6G labeled population. case, expected reads either high T--C content (new reads s4U labeled sample), high G--content (new reads s6G labeled sample), reads low T--C G--mutational content (old reads either sample). However, NEVER expect read high T--C high G--content, samples subjected labels: present value TC == TRUE GA == TRUE row FALSE. dually high mutation population present data. populations present though, present values TRUE. can automatically generate fraction design table : default, create_fraction_design assumes possible populations present. can edit table better reflect true circumstances particular experiment. don’t provide fraction design table, EstimateFractions() use default output create_fraction_design() ensure possible populations modeled. rarely going truly accurate fraction design table multi-label experiments, conservative default can easily adjust.","code":"ezbdo <- EstimateFractions(ezbdo, mutrate_populations = \"TC\") #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output # Observe contents of cB standard_fraction_design # Observe contents of cB tilac_fraction_design # Three populations for fun: fd_table <- create_fraction_design(c(\"TC\", \"GA\", \"CG\")) fd_table"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"tuning-the-feature-set-choice-and-filtering","dir":"Articles","previous_headings":"The basics","what":"Tuning the feature set choice and filtering","title":"Universal first step: EstimateFractions()","text":"fastq2EZbakR, upstream pipeline developed conveniently produce output compatible EZbakR, able assign reads lots different “features”. include genes, exonic regions genes, transcript equivalence classes, exon-exon junctions, . make full effective use diverse set feature assignments, important understand EstimateFractions() treat various feature columns cB. Often, interested analyzing subsets features separately. example, might make sense estimate fractions gene + transcript equivalence class combos, gene + exon-exon junction combos, standard exonic-gene feature, cB. can specify features use given analysis via setting features argument: example, one feature column called feature, practice, features argument can provided vector feature column names. Sometimes, read assignable given feature. case, likely characteristic string denotes failed assignment. current version fastq2EZbakR, \"__no_feature\" (though older versions NA, bit harder deal ; later). default thus EstimateFractions() filter rows cB analyzed features value. set remove_features argument, vector strings considered ripe filtering: can also use filter certain features, like “feature1” simulated example. mentioned though, analyzed feature columns need one remove_features strings order get filtered. behavior can changed opposite extreme, single feature needs fail test entire row get filtered : mentioned, older versions fastq2EZbakR bam2bakR denote failed assignment NA. default value remove_features includes string \"NA\", properly handle filtering columns actual value NA. can convert NA’s cB file tidyr::replace_na() whatever string please: Finally, feature assignments ambiguous. , one read assign multiple instances given feature. example, assigning reads exon-exon junctions, one read may overlap multiple exon-exon junctions. fastq2EZbakR, instances handled including names features read assigned , separated “+”. cases, want split rows multiple rows feature assignment. , can specify split_multi_features multi_feature_cols arguments: split_multi_features = TRUE copy data multi-feature assignment rows feature columns denoted multi_feature_cols. feature names multi-feature assigned reads different “+”, can addressed altering multi_feature_sep argument.","code":"ezbdo <- EstimateFractions(ezbdo, features = 'feature') #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo, remove_features = c(\"__no_feature\", \"feature1\")) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo, filter_condition = `|`) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output example_df <- data.frame(feature = c('A', NA, 'C'),                           other_feature = c(NA, 'Y', 'Z'))  replaced_df <- replace_na(example_df,                           list(feature = '__no_feature',                                other_feature = 'NA')) replaced_df ezbdo <- EstimateFractions(ezbdo,                            split_multi_features = TRUE,                            multi_feature_cols = \"feature\") #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"improving-estimates","dir":"Articles","previous_headings":"","what":"Improving estimates","title":"Universal first step: EstimateFractions()","text":"Two things can impact accuracy fractions estimation: Dropout: phenomenon metabolically labeled RNA sequencing reads derived RNA lost either library preparation computational processing raw sequencing data. Several labs independently identified discussed prevalence dropout NR-seq metabolic labeling RNA-seq experiments. Recent work suggests three potential causes : 1) Loss labeled RNA plastic surfaces RNA extraction, 2) RT falloff due modifications metabolic labeling made NR-seq chemistries, 3) loss reads many NR-induced mutations due poor read alignment. Inaccurate mutation rate estimates section, discuss strategies can use address two challenges.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"correcting-for-dropout","dir":"Articles","previous_headings":"Improving estimates","what":"Correcting for dropout","title":"Universal first step: EstimateFractions()","text":"-label data compare , EZbakR can use data quantify correct dropout. Currently, default strategy used EZbakR similar implemented grandR originally described . Alternatively, EZbakR also implements previously implemented bakR. Internal benchmarks suggest grandR strategy bit conservative (overestimates dropout) robust bakR strategy. bakR strategy advantage explicitly derived particular generative model dropout (details ), allowing things like model fit assessment. sort functionality currently implemented EZbakR though, chosen default grandR strategy now. implement dropout correction, run CorrectDropout(), specifying metadf sample characteristic columns used associate -label +label samples: grouping_factors technically required argument, EZbakR try infer automatically. EZbakR assumes metadf sample characteristic columns used grouping though, important know default can altered necessary. alter correction strategy, set strategy parameter CorrectDropout() (options “grandR” “bakR”).","code":"ezbdo <- CorrectDropout(ezbdo,                          grouping_factors = \"treatment\") #> Estimated rates of dropout are: #>    sample  pdo #> 1 sample1 0.01 #> 2 sample2 0.01 #> 3 sample3 0.01 #> 4 sample4 0.01"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"inferring-background-mutation-rates-from--label-data","dir":"Articles","previous_headings":"Improving estimates","what":"Inferring background mutation rates from -label data","title":"Universal first step: EstimateFractions()","text":"cases (e.g., label incorporation rates low, short label time used), can difficult estimate high low mutation rates given sample. curtail challenge, can use -label data infer background mutation rates, estimate chemically induced mutation rate fixing background mutation rate -label rate. , just need set pold_from_nolabel TRUE: default, single background mutation rate (pold) estimated using -label data. Alternatively, can specify sample characteristics stratify -label data, one pold estimated per group samples value metadf columns specified grouping_factors:","code":"ezbdo <- EstimateFractions(ezbdo,                            pold_from_nolabel = TRUE) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateFractions(ezbdo,                            pold_from_nolabel = TRUE,                            grouping_factors = 'treatment') #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"fancy-functionalities","dir":"Articles","previous_headings":"","what":"Fancy functionalities","title":"Universal first step: EstimateFractions()","text":"first section, discussed basic functionality EstimateFractions() alter key behaviors. section, discuss cooler, niche analysis strategies EstimateFractions() can implement.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"hierarchical-mutation-rate-model","dir":"Articles","previous_headings":"Fancy functionalities","what":"Hierarchical mutation rate model","title":"Universal first step: EstimateFractions()","text":"two-component mixture modeling strategy implemented tools like bakR GRAND-SLAM, largely considered “gold-standard” analyzing NR-seq data. Like statistical method though, makes assumptions, real data often violate assumptions. Namely, models typically assume every RNA synthesized presence metabolic label equal probability incorporating said label. true though?may seem like pedantic statistical question, evidence RNA’s deviate strongly assumption. example, noted (paper Churchman lab ) mitochondrial RNA much lower mutation rates reads new RNA RNA. account heterogeneity, EstimateFractions() can implement term “hierarchical” two-component mixture model. “Hierarchical” means new read mutation rate estimated feature, estimate strongly informed sample-wide average new read mutation rate. words, given feature enough coverage strong evidence new read mutation rate different sample-wide average, feature-specific mutation rate estimated used estimating fraction high mutation content reads feature. feature limited coverage though, new read mutation rate estimate strongly pushed towards sample-wide average. words, feature-specific mutation rates “regularized” towards sample-wide average. strategy take bit longer run can implemented : , feature-specific sample-wide mutation rates saved ezbdo$mutation_rates list.usual, let’s check results:  Still good!","code":"ezbdo <- EstimateFractions(ezbdo,                             strategy = 'hierarchical') #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> FITTING HIERARCHICAL TWO-COMPONENT MIXTURE MODEL: #> Estimating distribution of feature-specific pnews #> Estimating fractions with feature-specific pnews #> Processing output est <- EZget(ezbdo, type = 'fractions') truth <- simdata$PerRepTruth  compare <- dplyr::inner_join(est, truth, by = c('sample', 'feature'))  plot(compare$true_fraction_highTC,      compare$fraction_highTC) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"isoform-deconvolution","dir":"Articles","previous_headings":"Fancy functionalities","what":"Isoform deconvolution","title":"Universal first step: EstimateFractions()","text":"many years now, tools estimate transcript isoform abundances RNA-seq data. include RSEM, kallisto, Salmon, many . Wouldn’t nice similarly estimate synthesis degradation rate constants individual transcript isoforms NR-seq data? EZbakR now implements analysis strategy! use , need cB reads assigned transcript equivalence class, just fancy way saying “set isoforms completely consistent”. fastq2EZbakR able , check documentation details. can simulate cB demonstration purposes: inspect cB simulated SimulateIsoforms(), note column called transcripts, represents transcript equivalence classes. transcript IDs transcripts read consistent separated “+”’s, though case, don’t want separate copy data isoform. Whether, want estimate fractions unique equivalence class: get isoform-specific estimates, need run new function, called EstimateIsoformFractions(). though, need import transcript isoform quantification estimates tools like RSEM, used EstimateIsoformFractions(). , can use ImportIsoformQuant(). ImportIsoformQuant() three parameters: obj: EZbakRData object want want add isoform quantification information files: named vector paths isoform quantification output file want import. names relevant sample names appear cB. quant_tool: tool used isoform quantification. ImportIsoformQuant() just convenient wrapper tximport::tximport, urge read tools’s documentation information (documentation ). example, hack solution, since don’t isoform quantification output use. technically something similar tough time using ImportIsoformQuant(), wouldn’t recommend : can see comparing ground truth:  simulation bit extreme around 50% isoform abundance differences assumed completely driven differences isoform stability, leads underestimation crazy extreme fraction news. though, looks good!","code":"# Simulates a single sample worth of data simdata_iso <- SimulateIsoforms(nfeatures = 300)  # We have to manually create the metadf in this case metadf <- data.frame(sample = 'sampleA',                       tl = 4,                       condition = 'A')  ezbdo <- EZbakRData(simdata_iso$cB,                     metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ### Hack in the true, simulated isoform levels reads <- simdata_iso$ground_truth %>%   dplyr::select(transcript_id, true_count, true_TPM) %>%   dplyr::mutate(sample = 'sampleA',                 effective_length = 10000) %>%   dplyr::rename(expected_count = true_count,                 TPM = true_TPM)  # Name of table needs to have \"isoform_quant\" in it ezbdo[['readcounts']][['simulated_isoform_quant']] <- reads  ### Perform deconvolution ezbdo <- EstimateIsoformFractions(ezbdo) #> Analyzing sample sampleA... est <- EZget(ezbdo,               type = 'fractions',              features = \"transcript_id\") truth <- simdata_iso$ground_truth  compare <- truth %>%   dplyr::inner_join(est, by = c(\"feature\", \"transcript_id\"))  plot(compare$true_fn,      compare$fraction_highTC) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"using-the-apache-arrow-backend","dir":"Articles","previous_headings":"Fancy functionalities","what":"Using the Apache Arrow backend","title":"Universal first step: EstimateFractions()","text":"NOTE: documentation section lacks good examples don’t yet example external dataset included EZbakR’s installation. Thus, describing details analysis go without showing real analysis. Look change --distant future. massive dataset 10s samples like analyze? Loading entire cB table dataset memory surely crash laptops. access sort HPC cluster, course use , nothing like convenience interactivity working dataset personal computer. , EZbakR able use Apache Arrow’s R frontend (.e., arrow package) help large datasets. steps process described .","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"step-1-create-an-arrow-dataset","dir":"Articles","previous_headings":"Fancy functionalities > Using the Apache Arrow backend","what":"Step 1: Create an Arrow Dataset","title":"Universal first step: EstimateFractions()","text":"need create Arrow Dataset partioned “sample” column cB. create set .parquet files, one file created sample. allow EstimateFractions() load data one sample time, hold single sample cB RAM time: See arrow documentation lot details tune dataset creation process. never load entire cB memory, though may use bit much RAM try add custom filtering summarization discussed arrows docs.","code":"library(arrow)  ### Move into the directory with your cB file setwd(\"Path/to/cB/containing/directory\")   ### This will not load the cB into memory  # You can run `read_csv(\"cB.csv.gz\", n_max = 1)` to check to see what # the order of the columns are, as this order needs to match your provided # schema. ds <- open_dataset(\"cB.csv.gz\",                     format = \"csv\",                    schema = schema(                      sample = string(),                      rname = string(),                      GF = string(),                      XF = string(),                      exon_bin = string(),                      bamfile_transcripts = string(),                      junction_start = string(),                      junction_end = string(),                      TC = int64(),                      nT = int32(),                      sj = bool(),                      n = int64()                    ),                    skip_rows=1)   ### Create Arrow dataset setwd(\"Path/to/where/you/want/to/write/Arrow/Dataset\") ds %>%   group_by(sample) %>%   write_dataset(\"fulldataset/\",                 format = \"parquet\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"step-2-create-ezbakrarrowdata-object","dir":"Articles","previous_headings":"Fancy functionalities > Using the Apache Arrow backend","what":"Step 2: Create EZbakRArrowData object","title":"Universal first step: EstimateFractions()","text":"can create EZbakRArrowData object similarly create standard EZbakRData object:","code":"ds <- arrow::open_dataset(\"Path/to/where/you/want/to/Arrow/Dataset/\")   metadf <- tibble(sample = c(\"WT_1\", \"WT_2\", \"WT_ctl\",                             \"KO_1\", \"KO_2\", \"KO_ctl\"),                  tl = c(2, 2, 0,                         2, 2, 0),                  genotype = rep(c('WT', 'KO'), each = 3))   ezbado <- EZbakRArrowData(ds, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"step-3-run-estimatefractions-like-normal","dir":"Articles","previous_headings":"Fancy functionalities > Using the Apache Arrow backend","what":"Step 3: Run EstimateFractions like normal","title":"Universal first step: EstimateFractions()","text":"Finally, just run EstimateFractions() settings normally use working EZbakRData object:","code":"ezbado <- EstimateFractions(ezbado,                             features = c(\"GF\", \"XF\",                                          \"junction_start\", \"junction_end\"),                             filter_cols = c(\"XF\", \"junction_start\",                                             \"junction_end\"),                             filter_condition = `|`,                             split_multi_features = TRUE,                             multi_feature_cols = c(\"junction_start\",                                                    \"junction_end\"))"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateFractions.html","id":"simulating-the-arrow-workflow","dir":"Articles","previous_headings":"Fancy functionalities > Using the Apache Arrow backend","what":"Simulating the Arrow workflow","title":"Universal first step: EstimateFractions()","text":"give opportunity explore using Arrow backend controlled setting, workflow simulate cB, create temporary arrow dataset , run EstimateFractions() EZbakRArrowData object: case, single sample analyzed time reduce RAM usage, arrow dataset allows EZbakR load sample currently analyzed RAM. Note result slight runtime hit relative non-arrow analysis. Thus, best reserved working large datasets.","code":"library(arrow) #>  #> Attaching package: 'arrow' #> The following object is masked from 'package:utils': #>  #>     timestamp  simdata <- EZSimulate(nfeatures = 250)  outdir <- tempdir() dataset_dir <- file.path(outdir, \"arrow_dataset\")  write_dataset(   simdata$cB,   path = dataset_dir,   format = \"parquet\",   partitioning = \"sample\" )  ds <- open_dataset(dataset_dir)  ezbdo <- EZbakRArrowData(ds,                     simdata$metadf)   ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Estimating fractions for each sample: #> ANALYZING sample1... #> Extracting data for sample of interest and summarize out nucleotide content #> Adding mutation rate estimation information #> Estimating fractions #> ANALYZING sample2... #> Extracting data for sample of interest and summarize out nucleotide content #> Adding mutation rate estimation information #> Estimating fractions #> ANALYZING sample3... #> Extracting data for sample of interest and summarize out nucleotide content #> Adding mutation rate estimation information #> Estimating fractions #> ANALYZING sample4... #> Extracting data for sample of interest and summarize out nucleotide content #> Adding mutation rate estimation information #> Estimating fractions #> ANALYZING sample5... #> Extracting data for sample of interest and summarize out nucleotide content #> Adding mutation rate estimation information #> Estimating fractions #> ANALYZING sample6... #> Extracting data for sample of interest and summarize out nucleotide content #> Adding mutation rate estimation information #> Estimating fractions #> ANALYZING sample7... #> Counting reads #>  #> ANALYZING sample8... #> Counting reads #>  #> Processing output"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"goal standard, single label, NR-seq experiments assess kinetics RNA synthesis degradation. EZbakR, task EstimateKinetics(). vignette discuss basics standard analysis implemented EstimateKinetics(), touch two alternative analysis strategies EstimateKinetics() also implements: non-steady-state short-feed analyses.","code":"library(EZbakR)"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"running-the-standard-kdeg-and-ksyn-estimation","dir":"Articles","previous_headings":"The basics","what":"Running the standard kdeg and ksyn estimation","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"demonstrate estimate synthesis degradation rate constants using standard analysis workflow simulated data: Setting strategy = \"standard\" strictly necessary, highlight argument can alter. multiple fractions tables, need specify aspects metadata table want use. hood, EZbakR passing arguments EZget(), check vignette EZget() better understand works: case, repeatID specified two fractions table present identical metadata aspects. metadata can specify : features: Set features analyzed, subset features unique table interest. populations: Mutation populations analyzed. Relevant one tables single-label analysis, multi-label analysis. EstimateKinetics()’s standard analysis strategy compatible single-label analyses. fraction_design: fraction design table used analysis interest. Rarely necessary specify case.","code":"# Simulate data simdata <- EZSimulate(nfeatures = 300, nreps = 2)  # Create an `EZbakRData` object ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate synthesis and degradation rate constants ezbdo <- EstimateKinetics(ezbdo,                           strategy = \"standard\") # Create another fractions table ezbdo2 <- EstimateFractions(ezbdo, overwrite = FALSE) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate synthesis and degradation rate constants   # Use the 1st identical fractions table you created ezbdo2 <- EstimateKinetics(ezbdo2,                           repeatID = 1,                           strategy = \"standard\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"what-is-the-standard-strategy","dir":"Articles","previous_headings":"The basics","what":"What is the “standard” strategy?","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"standard strategy makes following assumptions: conducted pulse-label experiment. means, cells labeled period time refer label time, RNA extracted labeling. contrast pulse-chase design, label certain amount time (pulse time) chase regular nucleotide certain amount time (chase time). Eventually, EZbakR support kinetic parameter inference pulse-chase design, say end vignette. populations RNA analyzed steady-state course metabolic labeling. means levels constant changing response perturbation labeling. RNA synthesis 0-th order, constant rate process, RNA degradation 1st-order, single rate constant process. assumptions met, dynamics given RNA population well described following differential equation: dRdt=ksyn−kdeg*R \\begin{align} \\frac{\\text{dR}}{\\text{dt}} = k_{\\text{syn}} - k_{\\text{deg}}*\\text{R}  \\end{align}  R\\text{R} represents concentration RNA time ksynk_{\\text{syn}} kdegk_{\\text{deg}} synthesis degradation rate constants, respectively. general solution differential equation : R(t)=ksynkdeg+(Ro−ksynkdeg)*e−tl*kdeg \\begin{align} \\text{R(t)} = \\frac{ k_{\\text{syn}}}{k_{\\text{deg}}} +  (\\text{R}_\\text{o} - \\frac{ k_{\\text{syn}}}{k_{\\text{deg}}})* e^{-\\text{tl}*k_{\\text{deg}}} \\end{align} Ro\\text{R}_\\text{o} initial concentration RNA tl\\text{tl} label time. Thus concentration new RNA (Ro=0\\text{R}_\\text{o} = 0) function time : Rnew(t)=ksynkdeg*(1−e−tl*kdeg) \\begin{align} \\text{R}_{\\text{new}}\\text{(t)} = \\frac{ k_{\\text{syn}}}{k_{\\text{deg}}}*(1 - e^{-\\text{tl}*k_{\\text{deg}}}) \\end{align}  assuming total RNA concentration changing labeling, since steady-state concentration RNA (solve R setting dRdt=0\\frac{\\text{dR}}{\\text{dt}} = 0) ksynkdeg\\frac{ k_{\\text{syn}}}{k_{\\text{deg}}}, get fraction RNA new (denoted θ\\theta) : θ=1−e−tl*kdeg \\begin{align} \\theta = 1 - e^{-\\text{tl}*k_{\\text{deg}}} \\end{align}  can thus solve degradation rate constant, use normalized read counts infer synthesis rate constant. kdeg=−log(1−θ)tlksyn=(normalized read count)*kdeg \\begin{align} k_{\\text{deg}} &= -\\frac{\\text{log}(1 - \\theta)}{\\text{tl}} \\\\ k_{\\text{syn}} &= (\\text{normalized read count})*k_{\\text{deg}} \\end{align} NOTE: degradation rate constants estimated manner absolute units (1/time), whereas synthesis rate constants relative units (read counts/time). Thus, degradation rate constant estimation “internally normalized” (fraction new ratio two unnormalized quantities normalization scale factor), whereas synthesis rate constant estimates require normalization across libraries samples. stage, EZbakR uses TMM normalization (packages like edgeR DESeq2) calculate normalized read counts. near future, also support users providing external scale factors (e.g., derived spike-ins).","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"short-feed-analyses","dir":"Articles","previous_headings":"","what":"Short feed analyses","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"Sometimes advantageous use fairly short label time. example, NR-seq commonly used replacement enrichment based metabolic labeling methods (e.g., TT-seq), short label time used ensure limited degradation newly synthesized RNA feed. EZbakR formalizes strategy provides way estimate synthesis degradation rate constants context.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"how-to-run-it","dir":"Articles","previous_headings":"Short feed analyses","what":"How to run it","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"Everything standard case, except now set strategy = \"shortfeed\":","code":"# Estimate synthesis and degradation rate constants ezbdo <- EstimateKinetics(ezbdo,                           strategy = \"shortfeed\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"what-is-the-shortfeed-strategy","dir":"Articles","previous_headings":"Short feed analyses","what":"What is the “shortfeed” strategy?","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"case extremely short label feed time (relative average half-life RNA analyzed), can assume degradation newly synthesized RNA label time. Thus, following differential equation solution said ODE describes dynamics new RNA: dRdt=ksynRnew(t)=ksyn*t \\begin{align} \\frac{\\text{dR}}{\\text{dt}} &= k_{\\text{syn}} \\\\ \\text{R}_{\\text{new}}\\text{(t)} &=  k_{\\text{syn}}*\\text{t} \\end{align}  Assuming concentration new RNA proportional normalized number new reads yields following estimate ksynk_{\\text{syn}}: ksyn=θ*(normalized read count)tl k_{\\text{syn}} =  \\frac{\\theta*(\\text{normalized read count})}{\\text{tl}}  Assuming RNA levels steady-state (standard analysis), yields following estimate degradation rate constant: normalized read count=ksynkdegkdeg=ksynnormalized read countkdeg=θtl \\begin{align} \\text{normalized read count} &= \\frac{k_{\\text{syn}}}{k_{\\text{deg}}} \\\\ k_{\\text{deg}} &= \\frac{k_{\\text{syn}}}{\\text{normalized read count}} \\\\ k_{\\text{deg}} &= \\frac{\\theta}{\\text{tl}} \\end{align} calculus enthusiasts among may recognize estimate kdegk_{\\text{deg}} equivalent 1st order Taylor series approximation “standard” estimate strategy. coincidence, assumption short feed equivalent assuming θ\\theta close 0 (RNA old). may also seem odd estimate bounded 0 1/tl, just reflects assumption made strategy RNA half lives much shorter label time.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"non-steady-state-nss-analyses","dir":"Articles","previous_headings":"","what":"Non-steady-state (NSS) analyses","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"NOTE: strategy described slight modification discussed Narain et al., 2021. use EZbakR’s “NSS” strategy, please cite paper well EZbakR. One key assumptions made “standard” analysis strategy assumption RNA levels steady-state labeling. assumption can violated perturbation applied cells shortly start , , labeling. can also violated studying process (e.g., development) state cells changing course experiment. EstimateKinetic() can adjust kinetic parameter estimation strategy accordingly, though requires making assumptions experiment performed. See details","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"requirements-of-the-nss-strategy","dir":"Articles","previous_headings":"Non-steady-state (NSS) analyses","what":"Requirements of the “NSS” strategy","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"case, important discuss key aspects strategy works showcasing . Namely: Instead assuming fraction new given sample related degradation rate constant, EZbakR compare old read levels labeled sample set samples provide information RNA abundances start labeling. EZbakR assumes metadf contains two additional columns. One specify samples belong biological condition/analysis time point thus assay similar RNA populations. specify group samples identified first column provide information RNA population existed start labeling. example, suppose time course following samples: “sampleA”: -s4U data collected start time course “sampleB”: +s4U data collected 2 hour labeling period started start time course. “sampleC”: +s4U data collected 2 hour labeling period started time point equivalent end labeling “sampleB”. case, “sampleA” provides information initial RNA concentrations “sampleB”, “sampleB” provides information initial RNA concentrations “sampleC”. Therefore, metadf look like: One thing note value enter “sampleA”’s reference technically arbitrary, -s4U sample estimating degradation rate constants . Thus, enter string value column named “reference” example.","code":"metadf <- data.frame(   sample = c('sampleA',              'sampleB',              'sampleC'),   tl = c(0, 2, 2),   group = c(\"a\",              \"b\",              \"c\"),   reference = c(\"a\",                 \"a\",                 \"c\") )"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"how-to-run-it-1","dir":"Articles","previous_headings":"Non-steady-state (NSS) analyses","what":"How to run it","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"difference case tell EZbakR metadf columns correspond two additional columns explained . relevant parameters : grouping_factor: column defines groups samples assay RNA population? reference_factor: column defines groups samples assay RNA population existed start labeling? case, experimental details column metadf called “treatment”, specified grouping_factors.","code":"# new metadf metadf <- data.frame(sample = paste0('sample', 1:6),                  tl = c(2, 2, 2, 2, 0, 0),                  group = c('b', 'b',                            'c', 'c',                            'a', 'b'),                  ref = c('a', 'a',                          'b', 'b',                          'a', 'a'))  # Create an `EZbakRData` object ezbdo <- EZbakRData(simdata$cB, metadf)  # Estimate fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate synthesis and degradation rate constants ezbdo <- EstimateKinetics(ezbdo,                           strategy = \"NSS\",                           grouping_factor = \"group\",                           reference_factor = \"ref\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"what-is-the-nss-strategy","dir":"Articles","previous_headings":"Non-steady-state (NSS) analyses","what":"What is the “NSS” strategy?","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"can see Narain et al. alternative discussion strategy. like relax assumption total RNA levels unchanging course labeling. can considering dynamics old RNA labeling. assume single, unchanging degradation rate constant describes turnover, following ODE solution describe dynamics: dRdt=−kdeg*RRold(t)=Ro*e−kdeg*t \\begin{align} \\frac{\\text{dR}}{\\text{dt}} &= -k_{\\text{deg}}*\\text{R} \\\\ \\text{R}_{\\text{old}}\\text{(t)} &=  \\text{R}_{\\text{o}}*e^{-k_{\\text{deg}}*\\text{t}} \\end{align}  steady-state case, Ro\\text{R}_{\\text{o}} equivalent steady-state RNA level (ksynkdeg\\frac{ k_{\\text{syn}}}{k_{\\text{deg}}}). away steady-state case though, assumption longer valid. Despite , assume second estimate Ro\\text{R}_{\\text{o}}. assumption, estimate kdegk_{\\text{deg}} follows: kdeg=−log(Rold(t)/Ro)tl k_{\\text{deg}} = -\\frac{\\text{log}(\\text{R}_{\\text{old}}\\text{(t)}/\\text{R}_{\\text{o}})}{\\text{tl}} can return general solution differential equation described ‘standard’ analysis strategy section: R(t)=ksynkdeg+(Ro−ksynkdeg)*e−tl*kdegRnew(t)=ksynkdeg*(1−e−tl*kdeg) \\begin{align} \\text{R(t)} &= \\frac{ k_{\\text{syn}}}{k_{\\text{deg}}} +  (\\text{R}_\\text{o} - \\frac{ k_{\\text{syn}}}{k_{\\text{deg}}})* e^{-\\text{tl}*k_{\\text{deg}}} \\\\ \\text{R}_{\\text{new}}\\text{(t)} &= \\frac{ k_{\\text{syn}}}{k_{\\text{deg}}}*(1 - e^{-\\text{tl}*k_{\\text{deg}}}) \\end{align}  second line set Ro=0\\text{R}_\\text{o} = 0 new RNA start labeling, derive estimator ksynk_{\\text{syn}}: ksyn=θ*(normalized read count)*kdeg1−e−kdeg*tl k_{\\text{syn}} = \\frac{\\theta*(\\text{normalized read count)}*k_{\\text{deg}}}{1 - e^{-k_{\\text{deg}}*\\text{tl}}}  yields estimator steady-state case θ=1−e−kdeg*tl\\theta = 1 - e^{-k_{\\text{deg}}*\\text{tl}}. make strategy work, just need estimate starting levels old RNA. Thus, need sort RNA-seq data timepoint equivalent start labeling. One thing may wondering just much non-steady-state analysis really still assuming constant rate constants? rates synthesis degradation actively modulated cell label time? won’t present detailed proof , turns strategy laid best can . case rate constants changing label time, can think estimates strategy time averages true rate constants, averaged labeling period.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/EstimateKinetics.html","id":"pulse-chase-analyses","dir":"Articles","previous_headings":"","what":"Pulse-chase analyses","title":"Standard kinetic parameter estimation: EstimateKinetics()","text":"infrastructure place EZbakR support pulse-chase analyses kinetic parmaeters (e.g., metadf can accept specification pulse chase time). Thus, future, EZbakR provide support. said, like take time argue almost ever pulse-chase NR-seq experiment. Pulse-chase experimental designs suffer number shortcomings almost never necessary NR-seq experiments. many classic examples pulse-chase experimental designs used assess kinetics RNA metabolism. cases though, point pulse create species RNA whose dynamics completely driven degradation kinetics RNA. example, pioneering studies Parker lab elucidating mechanisms RNA degradation involved pulsing particular nutrient stimulate transcription construct. chase washed nutrient shut transcription construct, meaning RNA produced exclusively degrade post-chase. pulse metabolic label like s4U though, already created species RNA whose dynamics completely degradation driven: unlabeled RNA. Following metabolic label pulse nucleotide chase thus redundant, switching degradation driven population unlabeled RNA labeled RNA. addition, pulse-chase experiments often necessitate extensive exposure cells metabolic label, increases possibility cytotoxic effects metabolic label. Finally, analysis pulse-chase experiments complicated pulse-label design. estimate kinetics degradation, need know fraction RNA feature interest labeled pulse. means estimating synthesis degradation kinetics requires two separate samples, RNA extracted pulse RNA extracted chase. pulse alone, can get information can get though!! want multiple time points? Just multiple pulses. Pulse-labels easier perform easier analyze pulse-chases.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/Linear-modeling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Linear modeling in EZbakR","text":"Typically, multiple replicates NR-seq data two “conditions”. case, common want compare kinetic parameter estimates across various conditions. addition, sometimes need account complex experimental designs potential batch effects. task generalized linear modeling, vignette, see perform kind modeling EZbakR. EZbakR significantly improves upon predecessor, bakR, allowing users specify identifiable design matrix, thus supporting wider arrange comparative analyses possible bakR.","code":"library(EZbakR) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://isaacvock.github.io/EZbakR/articles/Linear-modeling.html","id":"example-scenarios","dir":"Articles","previous_headings":"","what":"Example scenarios","title":"Linear modeling in EZbakR","text":"section, blaze common examples. eventually write later sections get details linear regression case need deeply understand generalize beyond show section. cases, specification linear model like fit done formula_mean argument EZbakR’s AverageAndRegularize() function.","code":""},{"path":"https://isaacvock.github.io/EZbakR/articles/Linear-modeling.html","id":"the-simplest-case-a-single-condition-factor","dir":"Articles","previous_headings":"Example scenarios","what":"The simplest case: a single “condition” factor","title":"Linear modeling in EZbakR","text":"Often, difference samples can described single factor. example, may performed NR-seq wild-type (WT) cells, variety knock-(KO) cell lines. , case, likely single experimental detail factor metadf: , simulate fit relevant model log(kdeg)’s well log(ksyn)’s: Everything default EZbakR stuff discussed vignettes get AverageAndRegularize(). , using formula_mean parameter describe want relate parameter averaged factors metadf. ~ genotype means want calculate average values parameter value genotype appears metadf. CompareParameters() case can used get comparisons parameter averages two genotypes. design_factor describes multi-leveled factor included formula_mean like compare two levels . difference parameters calculated experimental - reference. case, differences represent log-fold differences kdegs ksyns (since difference logs log ratio; log(b) - log() = log(b/)). two conditions data, nothing changes run AverageAndRegularize(), need run CompareParameters() comparison want make. can visualize comparative analysis results using MA plots volcano plots like :","code":"metadf <- tibble(sample = c(\"sampleA\", \"sampleB\", \"sampleC\",                             \"sampleD\", \"sampleE\", \"sampleF\"),                  tl = c(0, 2, 2,                         0, 2, 2),                  genotype = c(\"WT\", \"WT\", \"WT\",                                \"KO\", \"KO\", \"KO\"))   # Simulate kdeg and ksyn differences set.seed(43) simdata <- EZSimulate(500,                       metadf = metadf %>% dplyr::rename(label_time = tl),                       mean_formula = ~genotype -1,                       pdiff_ks = 0.1)   ezbdo <- EZbakRData(simdata$cB,                     metadf)   ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ezbdo <- EstimateKinetics(ezbdo)  ### Linear modeling in EZbakR:  # Estimate average log(kdeg) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~ genotype) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Estimate average log(ksyn) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_ksyn\",                               formula_mean = ~ genotype) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates   # Calculate difference in log(kdeg) between the two genotypes ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            design_factor = \"genotype\",                            reference = \"WT\",                            experimental = \"KO\")  # Calculate differe in log(ksyn) between the two genotypes ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_ksyn\",                            design_factor = \"genotype\",                            reference = \"WT\",                            experimental = \"KO\") # Assess log(kdeg) differences EZVolcanoPlot(ezbdo,               parameter = \"log_kdeg\") EZMAPlot(ezbdo,               parameter = \"log_kdeg\") # Assess log(ksyn) differences EZVolcanoPlot(ezbdo,               parameter = \"log_ksyn\") EZMAPlot(ezbdo,               parameter = \"log_ksyn\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/Linear-modeling.html","id":"dealing-with-multiple-factors-simple-interaction-model","dir":"Articles","previous_headings":"Example scenarios","what":"Dealing with multiple factors: simple interaction model","title":"Linear modeling in EZbakR","text":"one variable tweak replicate replicate? Maybe multiple cell lines distinct genotypes, also treat cell lines drug cases? metadf may look like: simplest thing case estimate average parameter values unique combination two () factors. can done simple formula_mean ~ genotype:treatment: quirk case use CompareParameters. set design_factor blank string, list full parameter names reference experimental. can see parameter names looking metadata relevant AverageAndRegularize object: ’s bit hack, hope intuitive option case near future. ’ll note though, easier way case. interaction model works just like single parameter model factor one level per unique combination factors. defined metadf looks like: set formula_mean AverageAndRegularize() ~condition. hack comes DESeq2 documentation, check alternate discussion.","code":"metadf <- tibble(   sample = c(\"sampleA\", \"sampleB\", \"sampleC\",              \"sampleD\", \"sampleE\", \"sampleF\",              \"sampleG\", \"sampleH\", \"sampleI\",              \"sampleJ\", \"sampleK\", \"sampleL\"),   tl = c(0, 2, 2,          0, 2, 2,          0, 2, 2,          0, 2, 2),   genotype = c(\"WT\", \"WT\", \"WT\",                \"WT\", \"WT\", \"WT\",                \"KO\", \"KO\", \"KO\",                \"KO\", \"KO\", \"KO\"),   treatment = c(\"nodrug\", \"nodrug\", \"nodrug\",                 \"drug\", \"drug\", \"drug\",                 \"nodrug\", \"nodrug\", \"nodrug\",                 \"drug\", \"drug\", \"drug\") )   # Simulate kdeg and ksyn differences set.seed(43) simdata <- EZSimulate(500,                       metadf = metadf %>% dplyr::rename(label_time = tl),                       mean_formula = ~genotype:treatment -1,                       pdiff_ks = 0.1)   ezbdo <- EZbakRData(simdata$cB,                     metadf)   ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ezbdo <- EstimateKinetics(ezbdo)  ### Linear modeling in EZbakR:  # Estimate average log(kdeg) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~ genotype:treatment) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Estimate average log(ksyn) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_ksyn\",                               formula_mean = ~ genotype:treatment) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates   # Calculate difference in log(kdeg) between WT drug and no drug ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            design_factor = \"\",                            reference = \"genotypeWT:treatmentnodrug\",                            experimental = \"genotypeWT:treatmentdrug\")  # Calculate difference in log(kdeg) between KO drug and no drug ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            design_factor = \"\",                            reference = \"genotypeKO:treatmentnodrug\",                            experimental = \"genotypeKO:treatmentdrug\")  # Calculate difference in log(kdeg) between KO and WT nodrug ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            design_factor = \"\",                            reference = \"genotypeWT:treatmentnodrug\",                            experimental = \"genotypeKO:treatmentnodrug\")   ### You could do same for log_ksyn ezbdo$metadata$averages$logkdeg_feature$fit_params #> [1] \"genotypeKO:treatmentdrug\"   \"genotypeKO:treatmentnodrug\" #> [3] \"genotypeWT:treatmentdrug\"   \"genotypeWT:treatmentnodrug\" metadf$condition <- factor(paste0(metadf$genotype, metadf$treatment)) metadf"},{"path":"https://isaacvock.github.io/EZbakR/articles/Linear-modeling.html","id":"dealing-with-multiple-factors-estimating-an-actual-interaction-term","dir":"Articles","previous_headings":"Example scenarios","what":"Dealing with multiple factors: estimating an actual interaction term","title":"Linear modeling in EZbakR","text":"Ok, two factor case want specify regress actual interaction effect? interpretation parameters model bit complicated, ’s fit model: model bit quirky following 4 parameters: genotypeWT: represents average WT, nodrug parameter value. genotypeKO: represents average KO, nodrug parameter value. treatmentdrug: represents average effect drug treatment just reference level genotype (WT case). genotypeKO:treatmentdrug: “interaction term”, intuitively represents difference KO WT drug effects. mind, things can CompareParameters() includes: Assessing impact drug treatment non-reference genotype currently possible, currently inactive param_function parameter CompareParameters(). situation unique need assess sum three parameters (genotypeKO, treatmentdrug, genotypeKO:treatmentdrug). Alternatively, drug impact KO can estimated simply using model discussed last section.","code":"# factor() ensures that WT + nodrug is treated as the reference # which probably makes more intuitive sense metadf <- tibble(   sample = c(\"sampleA\", \"sampleB\", \"sampleC\",              \"sampleD\", \"sampleE\", \"sampleF\",              \"sampleG\", \"sampleH\", \"sampleI\",              \"sampleJ\", \"sampleK\", \"sampleL\"),   tl = c(0, 2, 2,          0, 2, 2,          0, 2, 2,          0, 2, 2),   genotype = factor(c(\"WT\", \"WT\", \"WT\",                \"WT\", \"WT\", \"WT\",                \"KO\", \"KO\", \"KO\",                \"KO\", \"KO\", \"KO\"),                levels = c(\"WT\", \"KO\")),   treatment = factor(c(\"nodrug\", \"nodrug\", \"nodrug\",                 \"drug\", \"drug\", \"drug\",                 \"nodrug\", \"nodrug\", \"nodrug\",                 \"drug\", \"drug\", \"drug\"),                 levels = c(\"nodrug\", \"drug\")) )   # Simulate kdeg and ksyn differences set.seed(43) simdata <- EZSimulate(500,                       metadf = metadf %>% dplyr::rename(label_time = tl),                       mean_formula = ~genotype*treatment -1,                       pdiff_ks = 0.1)   ezbdo <- EZbakRData(simdata$cB,                     metadf)   ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ezbdo <- EstimateKinetics(ezbdo)  ### Linear modeling in EZbakR:  # Estimate average log(kdeg) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~ genotype*treatment) #> Fitting linear model #>  #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Estimate average log(ksyn) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_ksyn\",                               formula_mean = ~ genotype*treatment) #> Fitting linear model #>  #> Estimating coverage vs. variance trend #> Regularizing variance estimates   # Viewing parameters will be easier in the future ezbdo$metadata$averages$logkdeg_feature$fit_params #> [1] \"genotypeWT\"               \"genotypeKO\"               #> [3] \"treatmentdrug\"            \"genotypeKO:treatmentdrug\" # Assess significance of interaction term ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            param_name = \"genotypeKO:treatmentdrug\")  # Assess significance of drug effect on WT ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            param_name = \"treatmentdrug\")  # Assess difference of WT and KO ezbdo <- CompareParameters(ezbdo,                            parameter = \"log_kdeg\",                            design_factor = \"genotype\",                            reference = \"WT\",                            experimental = \"KO\")"},{"path":"https://isaacvock.github.io/EZbakR/articles/Linear-modeling.html","id":"regressing-out-potential-batch-effects","dir":"Articles","previous_headings":"Example scenarios","what":"Regressing out potential batch effects","title":"Linear modeling in EZbakR","text":"final common situation discuss multiple factors metadf, represent technical factors rather biological ones. technical factors constitute often called “batches”, technical factors can influence parameter estimates thus risk confounder analyses. Linear modeling offers simple strategy attempting deal problem. Consider following metadf: technical factor calling “batch” suspect may influence NR-seq data, independent biological difference two genotypes. like “regress ” technical effect. can done specifying ~genotype + batch formula_mean AverageAndRegularize().: three parameters : genotypeWT: Average WT parameter value, batch averages “regressed ”. genotypeKO: Average KO parameter value, batch averages regressed . batchB: Average difference batches, accounting apparent biological differences batches. Unlike interaction model (~genotype*treatment), parameters genotypeWT genotypeKO longer simple averages samples relevant factor value. Rather, represent average accounts differences batches biological conditions. MAJOR NOTE: AverageAndRegularize() fail error model “identifiable”. means, don’t enough independent data points estimate parameters desired linear model, EZbakR won’t let fit said model. Consider following metadf, contains technical factor “batch” examples discussed section: try fit model described section (formula_mean = ~genotype + batch), EZbakR fail error. wasn’t able fit model slightly different metadf? fit model, need able estimate impact “batch” independent impact “genotype”. case though, batch ’s instances “WT” datasets, batch B’s instances “KO” datasets. Thus, model distinguish batch effects real biological differences. like asking solve equation 5 = x + z x z. infinite number combinations x z satisfy equation. Conclusion: suspect batch effects influence measurements (e.g., day sample collected , collected sample, etc.) need ensure technical effects evenly distributed among various biological conditions. Don’t process “WT” datasets one day “KO” different day. Make sure every batch samples includes biologically distinct conditions testing.","code":"# factor() ensures that WT is treated as the reference # which probably makes more intuitive sense metadf <- tibble(sample = c(\"sampleA\",                              \"sampleB\", \"sampleC\", \"sampleD\", \"sampleE\",                             \"sampleF\",                              \"sampleG\", \"sampleH\", \"sampleI\", \"sampleJ\"),                  tl = c(0,                          2, 2, 2, 2,                         0,                          2, 2, 2, 2),                  genotype = factor(c(\"WT\",                               \"WT\", \"WT\", \"WT\", \"WT\",                               \"KO\",                               \"KO\", \"KO\", \"KO\", \"KO\"),                               levels = c(\"WT\", \"KO\")),                  batch = c(\"A\",                             \"A\", \"B\", \"A\", \"B\",                            \"A\",                             \"A\", \"B\", \"A\", \"B\"))  # Simulate kdeg and ksyn differences set.seed(43) simdata <- EZSimulate(500,                       metadf = metadf %>% dplyr::rename(label_time = tl),                       mean_formula = ~genotype + batch -1,                       pdiff_ks = 0.1)   ezbdo <- EZbakRData(simdata$cB,                     metadf)   ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ezbdo <- EstimateKinetics(ezbdo)  ### Linear modeling in EZbakR:  # Estimate average log(kdeg) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~ genotype + batch) #> Fitting linear model #>  #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Estimate average log(ksyn) for each genotype ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_ksyn\",                               formula_mean = ~ genotype + batch) #> Fitting linear model #>  #> Estimating coverage vs. variance trend #> Regularizing variance estimates   # Viewing parameters will be easier in the future ezbdo$metadata$averages$logkdeg_feature$fit_params #> [1] \"genotypeWT\" \"genotypeKO\" \"batchB\""},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"necessary-setup","dir":"Articles","previous_headings":"","what":"Necessary Setup","title":"EZbakR for people in a hurry","text":"need install load EZbakR. Instructions can found link. Setting seed also ensure exact reproducibility analyses simulated data shown vignette. Finally, use little bit dplyr showcase key results:","code":"library(EZbakR) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union set.seed(42)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-0-create-an-ezbakrdata-object","dir":"Articles","previous_headings":"","what":"Step 0: Create an EZbakRData Object","title":"EZbakR for people in a hurry","text":"use EZbakR, need create EZbakRData object. EZbakRData object consists two components: cB data frame metadf data frame. cB stands “counts binomial” contains information mutations seen sequencing reads sample sequenced. metadf stands “metadata data frame” contains information experimental details sample (.e., long metabolic label feed ). Examples data structures look like lazily loaded load EZbakR. means can call created , example_cB example_metadf: cB data frame consists rows corresponding groups reads identical data, data corresponds : Sample origin. noted sample column cB. Mutational content. noted one columns form  (e.g., TC example_cB). value columns correspond observed number mutations. Mutable nucleotide content. noted one columns form n (e.g., nT example_cB). value columns correspond number mutable bases overlapped read. GF: Stands “gene feature” represents gene (exonic intronic regions) read overlapped XF: Stands “exonic feature” represents gene (exonic regions ) read overlapped rname: Chromosome read came . final column cB data frame n, number reads identical data columns. cB data frames easily obtained Snakemake pipeline fastq2EZbakR, available . metadf table following required columns: sample: Sample name, shows cB table. Metabolic label time information. single label, documented column called tl. used multiple labels, different label times noted column called tl_,  denotes type mutation conversion label yields. example, using s4U (conversion yields T--C mutations) s6G (conversion yields G--mutations), metadf include columns tl_TC tl_GA. remaining columns can named anything want describe aspects experiment. NOTE: currently exclusively interpreted discrete factors. Things like time-series modeling currently supported, may future releases. factors used deciding group samples averaging replicate data performing comparative analyses. later! cB metadf table, can create EZbakRData object: Now, let’s generate simulated data used remaining steps:","code":"# Check out examples: example_cB example_metadf ezbdo <- EZbakRData(example_cB, example_metadf) # Simulate 500 \"genes\" worth of data   # Simulates 2 replicates of 2 different experimental conditions simdata <- EZSimulate(nfeatures = 500, nreps = 2)  ezbdo <- EZbakRData(simdata$cB, simdata$metadf)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-1-estimatefractions","dir":"Articles","previous_headings":"","what":"Step 1: EstimateFractions()","title":"EZbakR for people in a hurry","text":"first step NR-seq analysis figure fraction reads come expected mutational population. example, standard s4U labeling NR-seq experiment, reads high T--C mutation population reads low T--C mutation population. Technically, involves two steps: 1) estimating mutation rates two populations labeled sample 2) estimating fractions. steps performed single function EZbakR: EZbakRFractions(): See ?EstimateFractions() well associated vignette details descriptions optional parameters. can use simulated ground truth assess estimate accuracy confirm method working:  Looks good!","code":"ezbdo <- EstimateFractions(ezbdo, features = \"feature\") #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ### NOTE: ### For real data from fastq2EZbakR, you will likely ### want to set `features = \"XF\"`. See EstimateFractions() ### vignette for details # Simulated ground truth truth <- simdata$PerRepTruth  # Get fraction estimates.    # Can also access with ezbdo$fractions[[1]] or ezbdo$fractions$feature est <- EZget(ezbdo, type = 'fractions')  # Combine compare <- dplyr::inner_join(est, truth, by = c('sample', 'feature'))  # Assess accuracy plot(compare$true_fraction_highTC, compare$fraction_highTC) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-2-estimatekinetics","dir":"Articles","previous_headings":"","what":"Step 2: EstimateKinetics()","title":"EZbakR for people in a hurry","text":"next step standard NR-seq analysis use estimates mutational population proportions (possibly normalized read counts) estimate kinetic parameters interest (e.g., degradation synthesis rate constants). simplest quickest way EstimateKinetics(): default, uses standard, steady-state, single rate constant model RNA metabolism infer degradation rate constant (kdeg) synthesis rate constant (ksyn) gene. analysis strategies implemented EstimateKinetics() include appropriate non-steady-state systems short label times. strategy argument EstimateKinetics() sets analysis strategy used. See ?EstimateKinetics details. , let’s compare ground_truth:  Great!","code":"ezbdo <- EstimateKinetics(ezbdo) # Simulated ground truth truth <- simdata$PerRepTruth  # Get fraction estimates.    # Can also access with ezbdo$fractions[[1]] or ezbdo$fractions$feature est <- EZget(ezbdo, type = 'kinetics')  # Combine compare <- dplyr::inner_join(est, truth, by = c('sample', 'feature'))  # Assess accuracy plot(log(compare$true_kdeg), compare$log_kdeg) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-3-averageandregularize","dir":"Articles","previous_headings":"","what":"Step 3: AverageAndRegularize()","title":"EZbakR for people in a hurry","text":"Typically, multiple replicates experimental condition. case, next step average data across replicates estimate overall uncertainties. can passed along downstream comparative analyses see features differences kinetic parameters different experimental conditions. averaging process done AverageAndRegularize(): See ?AverageAndRegularize() details. One cool thing AverageAndRegularize() implements heteroskedastic linear model can thus passed formula objects detail like stratify samples, whether batches like regress main parameter effects. See relevant vignette details. Finally, setting parameter = \"log_kdeg\" technically necessary default, showcases need specify kinetic parameter want average across replicates. run different parameter, new table added ezbdo$averages list: Let’s make sure estimates still accurate:  good!","code":"ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_kdeg\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates ezbdo <- AverageAndRegularize(ezbdo,                               parameter = \"log_ksyn\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates truth <- simdata$AvgTruth  est <- EZget(ezbdo, type = 'averages', parameter = 'log_kdeg')  compare <- dplyr::inner_join(truth, est, by = 'feature')  plot(compare$true_logkdeg_treatmenttreatment1,      compare$mean_treatmenttreatment1) abline(0,1)"},{"path":"https://isaacvock.github.io/EZbakR/articles/Quickstart.html","id":"step-4-compareparameters","dir":"Articles","previous_headings":"","what":"Step 4: CompareParameters()","title":"EZbakR for people in a hurry","text":"replicate averaged parameter estimates, can compare assess “statistical significance” observed differences. done CompareParameters(): addition providing EZbakRData object output AverageAndRegularize(), also need specify three arguments: condition: metadf column (function columns) replicates stratified . simulated metadf single experimental detail column called treatment, condition . reference: value condition want consider “reference” level. experimental: value condition want consider “experimental” level. , parameter’s default value “log_kdeg”, specified explicit.CompareParameters() calculate difference average parameter : experimental - reference. EZbakR provides convenient visualization functions inspect output CompareParameters(). Volcano plot:  MA plot:","code":"ezbdo <- CompareParameters(ezbdo,                            condition = 'treatment',                            reference = 'treatment1',                            experimental = 'treatment2',                            parameter = \"log_kdeg\") EZVolcanoPlot(ezbdo, parameter = \"log_kdeg\",               condition = 'treatment',               reference = 'treatment1',               experimental = 'treatment2') EZMAPlot(ezbdo, parameter = \"log_kdeg\",          condition = 'treatment',          reference = 'treatment1',          experimental = 'treatment2')"},{"path":"https://isaacvock.github.io/EZbakR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Isaac Vock. Author, maintainer.","code":""},{"path":"https://isaacvock.github.io/EZbakR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vock (2025). EZbakR: Analyze Integrate Type Nucleotide Recoding RNA-seq Data. R package version 0.0.0.9000, https://isaacvock.github.io/EZbakR/.","code":"@Manual{,   title = {EZbakR: Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data},   author = {Isaac Vock},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://isaacvock.github.io/EZbakR/}, }"},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"welcome-to-ezbakr","dir":"","previous_headings":"","what":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"EZbakR highly flexible tool analyses nucleotide recoding RNA-seq datasets (NR-seq; e.g., TimeLapse-seq, SLAM-seq, TUC-seq, etc.). See preprint discussion motivation behind EZbakR companion pipeline fastq2EZbakR, well validation novel functionality. install update, run: point, changes made weekly, updating frequently highly recommended. Documentation : https://isaacvock.github.io/EZbakR/","code":"if (!require(\"remotes\", quietly = TRUE))     install.packages(\"remotes\") remotes::install_github(\"isaacvock/EZbakR\")"},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"Currently, following functionalities dedicated vignettes: Quickstart: Takes standard workflow, similar bakR’s one workflow. Estimating fractions: Estimating fraction reads mutational population data. nearly universal first step NR-seq analyses. done EZbakR’s EstimateFractions() function. Estimating kinetics: Estimating kinetic parameters synthesis degradation standard NR-seq experiment. standard, single label, NR-seq analyses, next step analysis workflow estimating fraction reads labeled RNA. done EZbakR’s EstimateKinetics() function. Quality Control: Assessing quality NR-seq data. done EZbakR’s EZQC() function. Comparative analyses: Fitting flexible generalized linear model NR-seq data perform comparative analyses estimated kinetic parameters complements differential expression analyses. done EZbakR’s AverageAndRegularize() CompareParameters() functions. Dynamical systems modeling. analyses subcellular fractionation /pre-mRNA processing dynamics. done EZbakR’s EZDynamics() function. Navigating EZbakR output. Conveniently fetching data EZbakR analyses. done EZbakR’s EZget() function. implemented functionality may interest includes: Providing fractions kinetic parameter estimates input. former works similarly bakR, implemented via EZbakRFractions() function. latter unique EZbakR implemented via EZbakRKinetics() function. Simulating NR-seq data. number simulation functions implemented EZbakR. EZSimulate() convenient wrapper several .","code":""},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"update-3152025-analyses-of-transcript-isoforms","dir":"","previous_headings":"","what":"Update (3/15/2025): Analyses of transcript isoforms","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"recently (3/14/2025) put preprint describing method analyze kinetics individual transcript isoforms using short read NR-seq data total RNA. strategy touched little bit one EZbakR vignettes (one), also developed full fastq--volcano plot walkthrough using real downsampled fastq files preprint can see every step fastq2EZbakR EZbakR pipeline needs configured/run analyses. tutorial , data used tutorial . next couple weeks adding extra details/analyses tutorial, current form (3/15/2025), basics performing isoform-level analyses covered . also acts hand-tutorial EZbakR-suite can thus useful checkout try even aren’t interested particular analysis strategy.","code":""},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s new?","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"EZbakR represents complete rewrite bakR. Improvements implemented EZbakR include: Modular function design facilitates using EZbakR kind NR-seq data, regardless experimental design data details. Support multi-label analyses. Hierarchical mutation rate estimation strategy allow feature-specific mutation rates. efficient accurate uncertainty quantification. Non-steady-state analyses introduced Narain et al., 2021. Short-feed analyses assume negligible degradation existing RNA. Synthesis rate estimation implemented part strategies. Improved uncertainty propogation achieve performance bakR’s slower implementations (Hybrid MCMC) strategy efficient bakR’s efficent implementation (MLE). Removal Stan dependencies. love Stan, R package dependency makes installation maintenace difficult. Optional Apache Arrow backend help analyses larger--RAM datasets Linear model-based averaging replicate data support complex experimental designs maximally flexible comparative analyses. Greater flexibility terms input data structure. Namely, multiple different features can specified input cB table, multiple different experimental details can included input metadf table. novel transcript isoform deconvolution strategy allows isoform-specific kinetic parameter estimation. Generalized linear dynamical systems modeling NR-seq data. Supports analyses subcellular fractionation NR-seq extensions, described , , . Also supports analyses pre-mRNA processing dynamics. near future, EZbakR support anything bakR can isn’t currently implemented (Namely DissectMechanisms() various visualization functions). also number exciting developments horizon, stay tuned!","code":""},{"path":"https://isaacvock.github.io/EZbakR/index.html","id":"what-is-nr-seq","dir":"","previous_headings":"","what":"What is NR-seq?","title":"Analyze and Integrate Any Type of Nucleotide Recoding RNA-seq Data","text":"NR-seq refers class methods combine RNA-seq, metabolic labeling, unique metabolic label recoding chemistries. methods originally developed dissect kinetics RNA synthesis degradation. Excitingly though, treasure trove extensions original methods created years. -date, nucleotide recoding combined likes TT-seq, Start-seq, Ribo-seq, scRNA-seq (examples , , ), Perturb-seq, long-read sequencing, subcellular fractionation. addition, original methods used 4-thiouridine (s4U), chemistry found work 6-thioguanosine (s6G), opening door dual-labeling experimental designs (e.g., TILAC). EZbakR companion pipeline fastq2EZbakR aim provide integrated flexible framework support exciting class methods.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":null,"dir":"Reference","previous_headings":"","what":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"AverageAndRegularize fits generalized linear model data effectively average parameter estimates across replicates get overall uncertainty estimates parameters. linear model data fit specified via R formula object supplied formula_mean parameter. Uncertainty estimates regularized via hierarchical modeling strategy originally introduced bakR, though slightly improved upon since .","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"","code":"AverageAndRegularize(   obj,   features = NULL,   parameter = \"log_kdeg\",   type = \"kinetics\",   kstrat = NULL,   populations = NULL,   fraction_design = NULL,   exactMatch = TRUE,   repeatID = NULL,   formula_mean = NULL,   sd_grouping_factors = NULL,   include_all_parameters = TRUE,   sd_reg_factor = 10,   error_if_singular = TRUE,   min_reads = 10,   convert_tl_to_factor = TRUE,   regress_se_with_abs = TRUE,   force_lm = FALSE,   force_optim = force_lm,   conservative = FALSE,   character_limit = 20,   feature_lengths = NULL,   feature_sample_counts = NULL,   scale_factor_df = NULL,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"obj EZbakRFractions EZbakRKinetics object, EZbakRData object EstimateFractions() EstimateKinetics() run. features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. parameter Parameter average across replicates given condition. type type table parameter found ? Default \"kinetics\", can also set \"fractions\". kstrat type == \"kinetics\", kstrat specifies kinetic parameter inference strategy. populations Character vector set mutational populations want infer fractions . relevant type == \"fractions\". fraction_design \"Design matrix\" specifying RNA populations exist samples. relevant type == \"fractions\". exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. repeatID multiple kinetics fractions tables exist metadata, numerical index distinguished. formula_mean R formula object specifying parameter interest depends sample characteristics specified obj's metadf. common formula ~ treatment ~ treatment:duration, treatment duration replaced whatever called relevant sample characteristics metadf. ~ treatment means average value parameter estimated set samples value treatment metadf. ~ treatment:duration specifies average value parameter estimated set samples combination treatment duration values metadf. example latter case situation two treatments (e.g., drug treated untreated control) applied different durations time (e.g., 4 8 hours). NOTE: EZbakR automatically removes intercept terms model. way, ambiguity parameter defined reference. sd_grouping_factors metadf columns data grouped estimating standard deviations across replicates? NULL, EZbakR check see formula_mean specifies formula cleanly stratifies samples disjoint groups. example, formula ~ treatment assign sample single factor (value metadf's treatment column). case, standard deviations can calculated sets replicates treatment group. stratification exist, single standard deviation estimated feature (.e., homoskedasticity assumed standard linear modeling). include_all_parameters TRUE, additional table saved prefix fullfit_, includes parameters estimated throughout course linear modeling regularization. can nice visualizing regularized mean-variance trend. sd_reg_factor Determines strongly variance estimates shrunk towards trend. Higher numbers lead regularization. Eventually, replaced estimation much variance seems population variances. error_if_singular TRUE, linear model throw error parameters uniquely identified. often caused parameters estimated data, e.g., due limited replicate numbers correlated sample characteristics (.e., treatment also correspond batch , treatment Bs correspond batch Bs). min_reads Minimum number reads samples feature kept. convert_tl_to_factor label time variable included formula_mean, convert values factors avoid performing continuous regression label times. Defaults TRUE including label time regression often meant stratify samples label time , example, averaging logit(fractions). regress_se_with_abs TRUE, type == \"fractions\", standard error regressed logit fraction rather magnitude logit fraction. Makes sense set FALSE analyzing certain site-specific mutational probing methods high mutation content things likely low variance SNPs. force_lm Certain formula lend selves efficient approximations full call lm(). Namely, formulas stratify samples disjoint groups single parameter model effectively estimated group can tackled via simple averaging data group. like force EZbakR fit fully rigorous linear model though, set force_lm TRUE. force_optim Old parameter now passed value force_lm deprecated later releases conservative TRUE, conservative variance regularation performed. case, variances trend regularized trend, variances trend left unregularized. avoids underestimation variances. character_limit Limit number characters name given output table. attempt concatenate parameter name names features. long, parameter name used. feature_lengths Table effective lengths feature combination data. example, analysis includes features named GF XF, data frame columns GF, XF, length. feature_sample_counts Data frame columns  nsamps,  feature columns input AverageAndRegularize(), nsamps number samples samples feature combination needs read count threshold. scale_factor_df Data frame columns \"sample\" second column whatever name please. second column denote scale factors read counts sample multiplied order normalize read counts. overwrite TRUE, identical, existing output overwritten.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"EZbakRData object additional \"averages\" table, well fullfit table list heading, includes extra information priors used regularization purposes.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"EZbakR website extensive vignette walking various use cases model types can fit AverageAndRegularize(): vignette link. EZbakR improves upon bakR balancing extra conservativeness several steps highly powered statistical testing scheme CompareParameters() function. particular, following changes variance regularization scheme made: Sample-specific parameter uncertainties used generate conservative estimates feature-specific replicate variabilties. addition, small floor set ensure replicate variance estimates never certain level, reason. Condition-wide replicate variabilities regressed read coverage either ) |logit(estimate)| modeling average fraction labeled. captures fact thta estimates best around logit(fraction labeled) 0 get worse extreme fraction labeled's.; b) log(kdeg) modeling log degradation rate constants. first, considered strategy similar fraction labeled modeling, found agreement fully rigorous MCMC sampling approach EZbakR significantly improved just regressing hee value log kientic parameter, likely due non-linear transformation fraction labeled log(kdeg); c) coverage cases. Features replicate variabilities inferred trend replicate variabilites set equal predicted trend. helps limit underestimation parameter variance. Features -trend replicate variabilties replicate variabilities regularized Normal prior Normal likelihood Bayesian model, bakR (log(variance) inferred mean distribution, known variance inferred amount variance linear dataset-wide trend). allows CompareParameters() use less conservative statistical test calculating p-values, still controlling false discovery rates.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/AverageAndRegularize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average parameter estimates across replicates, and regularize variance estimates — AverageAndRegularize","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate Kinetics ezbdo <- EstimateKinetics(ezbdo)  # Average estimates across replicate ezbdo <- AverageAndRegularize(ezbdo) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates"},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get contrasts of estimated parameters — CompareParameters","title":"Get contrasts of estimated parameters — CompareParameters","text":"CompareParameters() calculates differences parameters estimated AverageAndRegularize() EZDynamics() performs null hypothesis statistical testing, comparing values null hypothesis 0.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get contrasts of estimated parameters — CompareParameters","text":"","code":"CompareParameters(   obj,   design_factor,   reference,   experimental,   param_name,   parameter = \"log_kdeg\",   type = \"averages\",   param_function,   condition = NULL,   features = NULL,   exactMatch = TRUE,   repeatID = NULL,   formula_mean = NULL,   sd_grouping_factors = NULL,   fit_params = NULL,   normalize_by_median = FALSE,   reference_levels = NULL,   experimental_levels = NULL,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get contrasts of estimated parameters — CompareParameters","text":"obj EZbakRFit object, EZbakRFractions object AverageAndRegularize() run. design_factor Name factor metadf whose parameter estimates different factor values like compare. specify , need also specify reference experimental. type == \"dynamics\", can multiple values, names factors like stratify group . reference Name reference design_factor factor level value. Difference calculated experimental - reference. type == \"dynamics\", specify levels design_factor(s) reference group. example, multiple design_factor's, reference must named character vector one element per design_factor, elements named corresponding design_factor. example, design_factor c(\"genotype\", \"treatment\"), like compare genotype = \"WT\" treatment = \"untreated\" (reference) genotype = \"KO\" treatment = \"treated\", reference need vector one element named \"genotype\", equal \"WT\" one element named \"treatment\" equal \"untreated\" (example created , c(genotype = \"WT\", treatment = \"untreated\")). experimental Name design_factor factor level value compare reference. Difference calculated experimental - reference. type == \"dynamics\", specify levels design_factor(s) reference group. example, multiple design_factor's, experimental must named character vector one element per design_factor, elements named corresponding design_factor. example, design_factor c(\"genotype\", \"treatment\"), like compare genotype = \"WT\" treatment = \"untreated\" (reference) genotype = \"KO\" treatment = \"treated\", experimental need vector one element named \"genotype\", equal \"KO\" one element named \"treatment\" equal \"treated\" (example created , c(genotype = \"KO\", treatment = \"treated\")). param_name want assess significance single parameter, rather comparison two parameters, specify one parameter's name . parameter Parameter average across replicates given condition. type Type table use. Can either \"averages\" \"dynamics\". param_function YET IMPLEMENTED. allow specify complicated functions parameters hypotheses need test combinations parameters rather individual parameters simple differences two parameters. condition design_factor, deprecated favor former later release. features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. repeatID multiple averages tables exist metadata, numerical index distinguished. formula_mean R formula object specifying parameter interest depends sample characteristics averages object want use. sd_grouping_factors Metadf columns data grouped estimating standard deviations across replicates averages object want use. fit_params Character vector parameter names averages object like use. normalize_by_median TRUE, median difference set equal 0. can account global biases parameter estimates due things like differences effective label times. risk eliminating real signal though, user discretion advised. reference_levels reference, exclusively parsed case type == \"dynamics, included backwards compatibility. experimental_levels experimental, exclusively parsed case type == \"dynamics, included backwards compatibility. overwrite TRUE, identical output overwritten exists.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get contrasts of estimated parameters — CompareParameters","text":"EZbakRData object additional \"comparisons\" table, detailing result comparison parameter estimate's valules across two different conditions.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get contrasts of estimated parameters — CompareParameters","text":"EZbakR website extensive vignette walking various use cases parameters can compare CompareParameters(): vignette link. essentially 3 scenarios CompareParameters() can handle: Pairwise comparisons: compare reference experimental parameter estimates specified design_factor AverageAndRegularize(). log(experimental / reference) computed \"difference\" case. Assess value single parameter, represent difference parameters. name parameter can specified via param_name argument. useful various interaction models parameters models may represent things like \"effect condition X\". Pairwise comparison dynamical systems model parameter estimate: similar first case listed , now type == \"dynamics\". design_factor can now vector metadf columns stratified parameter estimates . Eventually, 4th option via currently non-functional param_function argument implemented, allow specify functions parameters assessed, can useful certain interaction models. CompareParameters() calculates p-values using essentially asymptotic Wald test, meaning standard normal distribution integrated. P-values multiple-test adjusted using method Benjamini Hochberg, implemented R's p.adjust() function.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CompareParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get contrasts of estimated parameters — CompareParameters","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate Kinetics ezbdo <- EstimateKinetics(ezbdo)  # Average estimates across replicate ezbdo <- AverageAndRegularize(ezbdo) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Compare parameters across conditions ezbdo <- CompareParameters( ezbdo, design_factor = \"treatment\", reference = \"treatment1\", experimental = \"treatment2\" )"},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"Uses strategy described , similar originally presented Berg et al. 2024.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"","code":"CorrectDropout(   obj,   strategy = c(\"grandR\", \"bakR\"),   grouping_factors = NULL,   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   exactMatch = TRUE,   read_cutoff = 25,   dropout_cutoff = 5 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"obj EZbakRFractions object, EZbakRData object run EstimateFractions(). strategy dropout correction strategy use. Options : grandR: Described . Cite work grandR using strategy. Quasi-non-parametric strategy finds estimate dropout rate eliminates linear correlation newness transcript difference +s4U -s4U normalized read counts. bakR: Described . Uses simple generative model dropout derive likelihood function, dropout rate estimated via method maximum likelihood. \"bakR\" strategy advantage model-derived, making possible assess model fit thus whether simple assumptions \"bakR\" \"grandR\" dropout models met. \"grandR\" strategy advantage robust. Thus, \"grandR\" strategy currently used default. grouping_factors sample-detail columns metadf used group -s4U samples calculating average -s4U RPM? default value NULL cause sample-detail columns used. features Character vector set features want stratify reads estimate proportions RNA population. default NULL expect one fractions table EZbakRFractions object. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features must exactly match features metadata given fractions table used. Means specify subset features default. Set FALSE like specify feature subset. read_cutoff Minimum number reads feature used fit dropout model. dropout_cutoff Maximum ratio -s4U:+s4U RPMs feature used fit dropout model (.e., simple outlier filtering cutoff).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"EZbakRData object specified \"fractions\" table replaced dropout corrected table.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"Dropout disproportionate loss labeled RNA/reads said RNA described independently . can originate combination bioinformatic (loss high mutation content reads due alignment problems), technical (loss labeled RNA RNA extraction), biological (transcriptional shutoff rare cases caused metabolic label toxicity) sources. CorrectDropout() compares label-fed label-free controls experimental conditions estimate correct dropout. assumes single number (referred dropout rate, pdo) describes rate labeled RNA lost (relative unlabeled RNA). pdo ranges 0 (dropout) 1 (complete loss labeled RNA), thus interpreted percentage labeled RNA/reads labeled RNA disproportionately lost, relative equivalent unlabeled species.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/CorrectDropout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct for experimental/bioinformatic dropout of labeled RNA. — CorrectDropout","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Correct for dropout ezbdo <- CorrectDropout(ezbdo) #> Estimated rates of dropout are: #>    sample       pdo #> 1 sample1 0.0100000 #> 2 sample2 0.0100000 #> 3 sample3 0.0100000 #> 4 sample4 0.3799101 #> 5 sample5 0.4072284 #> 6 sample6 0.4034133"},{"path":"https://isaacvock.github.io/EZbakR/reference/DeconvolveFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Deconvolve multi-feature fractions. — DeconvolveFractions","title":"Deconvolve multi-feature fractions. — DeconvolveFractions","text":"Combines output EstimateFractions feature quantification performed outside tool (e.g., RSEM, kallisto, salmon, etc.) infer fraction news features reads always assigned unambiguously. generalization EstimateIsoformFractions performs deconvolution transcript isoforms.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/DeconvolveFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deconvolve multi-feature fractions. — DeconvolveFractions","text":"","code":"DeconvolveFractions(   obj,   feature_type = c(\"gene\", \"isoform\"),   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   exactMatch = TRUE,   fraction_name = NULL,   quant_name = NULL,   gene_to_transcript = NULL,   overwrite = TRUE,   TPM_min = 1,   count_min = 10 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/DeconvolveFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deconvolve multi-feature fractions. — DeconvolveFractions","text":"obj EZbakRData object feature_type Either \"gene\" (deconvolving gene-level fraction news, .e., resolving fusion gene component gene fraction news) \"isoform\" (deconvolving transcript isoform fraction news). features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. fraction_name Name fraction estimate table use. stored obj$fractions list name. Can also rely specifying features /populations EZget() find . quant_name Name transcript isoform quantification table use. stored obj$readcounts list name. Use ImportIsoformQuant() create table. quant_name NULL, search tables containing string \"isoform_quant\" name, naming convention used ImportIsoformQuant(). one table exists, error thrown specify exact name quant_name. gene_to_transcript Table columns transcript_id feature related columns appear relevant fractions table. relevant hack deal case STAR includes transcriptome alignment transcripts opposite strand RNA actually originated. table used filter transcript-feature combinations exist. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs. TPM_min Minimum TPM transcript kept analysis. count_min Minimum expected_count transcript kept analysis.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/DeconvolveFractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deconvolve multi-feature fractions. — DeconvolveFractions","text":"EZbakRData object additional table \"fractions\" list. form output EstimateFractions(), feature column \"transcript_id\".","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/DeconvolveFractions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deconvolve multi-feature fractions. — DeconvolveFractions","text":"DeconvolveFractions expects input \"fractions\" table estimates fraction news least one convolved feature set. convolved feature set one reads unambiguously assigned one instance feature type. example, often impossible assign short reads single transcript isoform. Thus, something like \"TEC\" assignment provided fastq2EZbakR instance convolved feature set, assignment reads transcript isoforms compatible. Another example assignment exonic regions genes, fusion genes (read may consistent putative fusion gene well one fusion components). DeconvolveFractions deconvolves fraction news fitting linear mixing model convolved fraction new estimates + feature abundance estimates. words, convolved fraction new (data) modeled weighted average single feature fraction news (parameters estimate), weights determined relative abundances features convolved set (data). convolved fraction new modeled beta distribution mean equal weighted feature fraction new average variance related number reads convolved feature set. Features estimated TPMs less TPM_min (1 default) estimated number read counts less count_min (10 default) removed convolved feature sets fraction news estimated.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/DeconvolveFractions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deconvolve multi-feature fractions. — DeconvolveFractions","text":"","code":"# Load dependencies library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Simulates a single sample worth of data simdata_iso <- SimulateIsoforms(nfeatures = 30)  # We have to manually create the metadf in this case metadf <- tibble(sample = 'sampleA',                      tl = 4,                      condition = 'A')  ezbdo <- EZbakRData(simdata_iso$cB,                     metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ### Hack in the true, simulated isoform levels reads <- simdata_iso$ground_truth %>%   dplyr::select(transcript_id, true_count, true_TPM) %>%   dplyr::mutate(sample = 'sampleA',                 effective_length = 10000) %>%   dplyr::rename(expected_count = true_count,                 TPM = true_TPM)  # Name of table needs to have \"isoform_quant\" in it ezbdo[['readcounts']][['simulated_isoform_quant']] <- reads  ### Perform deconvolution ezbdo <- DeconvolveFractions(ezbdo, feature_type = \"isoform\") #> Analyzing sample sampleA..."},{"path":"https://isaacvock.github.io/EZbakR/reference/EZDynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized dynamical systems modeling — EZDynamics","title":"Generalized dynamical systems modeling — EZDynamics","text":"EZDynamics() estimates parameters user-specified dynamical systems model. dynamical system model specified adjacency matrix, NxN matrix described (see graph documentation). Modeling can either done species assayed sample, species assayed across set independent samples (e.g., subcellular fractionation involves assaying different species different samples).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZDynamics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized dynamical systems modeling — EZDynamics","text":"","code":"EZDynamics(   obj,   graph,   sub_features,   grouping_features,   scale_factors = NULL,   sample_feature = NULL,   modeled_to_measured = NULL,   parameter_names = paste0(\"logk\", 1:max(graph)),   unassigned_name = \"__no_feature\",   type = \"averages\",   prior_means = rep(-3, times = max(graph)),   prior_sds = c(3, rep(1, times = max(graph) - 1)),   avg_params_tokeep = NULL,   avg_params_todrop = NULL,   label_time_name = \"tl\",   features = NULL,   populations = NULL,   fraction_design = NULL,   parameter = NULL,   repeatID = NULL,   exactMatch = TRUE,   feature_lengths = NULL,   use_coverage = TRUE,   normalization_repeatID = NULL,   normalization_exactMatch = TRUE,   species_to_sf = NULL,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZDynamics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized dynamical systems modeling — EZDynamics","text":"obj Currently must EZbakRData object AverageAndRegularize run. future, also support (case species assayed every sample) providing output just EstimateFractions() input, acting generalization EstimateKinetics() case. graph NxN adjacency matrix, N represents number species modeled. One species must called \"0\" represent \"RNA\" species. species species synthesized (e.g., 0 -> P, means premature RNA synthesized RNA), species species degraded (e.g., M -> 0 means mature RNA converted \"RNA\" via degradation). rows columns matrix must names modled species, rownames(graph) == colnames(graph). Entry ,j matrix either 0 species converted species j model, integer 1:npars (npars = total number parameters estimated) can. example, model 0 -> P -> M -> 0 graph: matrix(c(0, 1, 0, 0, 0, 2, 3, 0, 0), nrow = 3, ncol = 3, byrow = TRUE. sub_features feature columns distinguish different measured species? Note, measured species need name, may directly equivalent , modeled species. relationship modeled species graph sub_features needs specified modeled_to_measured names equivalent though. grouping_features features overarching feature assignments sub_features grouped? usually feature columns corresponding full-gene assignments, well higher order assignments (e.g., chromosome). sub_feature can included grouping_features never value unassigned_name (\"__no_feature\" default). one sub_feature ever fulfill criterion though. scale_factors Data frame mapping samples factors multiply read counts ensure proper normalization different RNA populations. relevant modeling relationships distinct RNA populations, example RNA nuclear cytoplasmic fractions. eventually inferred automatically. sample_feature different samples involve assaying different species, must name metadf column distinguishes different classes samples. example, analyzing subcellular fractionation dataset, likely included column metadf called \"compartment\". sample_feature, assuming ran AverageAndRegularize(), mean_formula included compartment term. modeled_to_measured sub_features identical non \"0\" species names graph, must specify relationship sub_features, sample_feature (specified), species graph. done list formulas, whose left side sub_feature whose right side function species graph. sample_feature specified, modeled_to_measured nameless list formulae. sample_feature specified, modeled_to_measured must named list formulas names correspond unique values sample_feature. latter case, elements, mapping measured features (sub_features) modeled species (names graph \"0\"). example, model 0 -> P -> M -> 0, P stands premature RNA M stands mature RNA, column called GF corresponds assignment anywhere gene, XF corresponds assignment exclusively exon mapping reads, modeled_to_measured list(GF ~ P + M, XF ~ M).. another example, model 0 -> N -> C -> 0, N stands \"nuclear RNA\" C stands \"cytoplasmic RNA\", sample_feature takes values \"nuclear\", \"cytoplasmic\", \"total\", single sub_feature called XF, modeled_to_measured shouild list(nuclear = GF ~ N, cytoplasmic = GF ~ C, total = GF ~ C + N). interpreted meaning groups samples sample_feature == \"nuclear\", reads assigned GF N species (nuclear RNA). sample_feature == \"cytoplasmic\", reads assigned GF correspond C species (cytoplasmic RNA). sample_feature == \"total\", reads assigned GF correspond combination N C (nuclear cytoplasmic RNA). parameter_names Vector names like give estimated parameters. ith element correspond name parameter given ID graph. default, just ki, numerical index. unassigned_name value sub_feature column read assigned said feature? \"__no_feature\" default. type type table like use? Currently supports \"averages\", support \"fractions\" near future. prior_means Mean log-Normal prior kinetic parameters. vector ith value mean ith parameter, = index graph prior_sds Std. dev. log-Normal prior kinetic parameter. vector ith value mean ith parameter, = index graph. avg_params_tokeep Names parameters averages table like keep. parameters discarded. include prefixes \"mean_\", \"sd_\", \"coverage_\"; imputed automatically. words, base parameter names. avg_params_todrop Names parameters averages table like drop. parameters kept. include prefixes \"mean_\", \"sd_\", \"coverage_\"; imputed automatically. words, base parameter names. label_time_name Name relevant label time column found parameter names. Defaults standard \"tl\". features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. parameter Parameter average across replicates given condition. \"logit_fraction_high\",  type mutation modeled EstimateFractions() (e.g, TC) case. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. feature_lengths Table effective lengths feature combination data. example, analysis includes features named GF XF, data frame columns GF, XF, length. use_coverage TRUE, normalized read counts used inform kinetic parameter estimates. FALSE, fraction news used, leave parameters (e.g., synthesis rate) unidentifiable, though advantage avoiding potential biases induced normalization problems. normalization_repeatID extracting fractions table needed normalization multi-sample data. multiple fractions tables exist metadata, numerical index distinguished. normalization_exactMatch extracting fractions table needed normalization multi-sample data. TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. species_to_sf List mapping individual RNA species graph different sample_feature values (sf). relevant modeling pre- mature RNA dynamics subcellular fractionation data. EZbakR can usually automatically infer , , can manually specify mapping. list one element per unique sample_feature type. element vector RNA species graph belong sample_feature type. example, whole cell, cytoplasmic, nuclear fraction data, one element called \"cytoplasmic\" one element called \"nuclear\". whole cell sample_feature sum cytoplasmic nuclear thus apply. \"cytoplasmic\" element list set RNA species present cytoplasm, e.g. cytoplasmic pre-RNA (maybe referred graph CP) cytoplasmic mature RNA (maybe referred graph CM). overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZDynamics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized dynamical systems modeling — EZDynamics","text":"EZbakRData object additional \"dynamics\" table.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZDynamics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized dynamical systems modeling — EZDynamics","text":"running AverageAndRegularize() produce input EZDynamics(), must set parameter \"logit_fraction_high\" ( = type mutation modeled EstimateFractions(), e.g., TC). multiple distinct label times, must also include label time (tl metadf) regression formula. EZDynamics() models logit(fraction high <muttype), depend label time (longer label time = higher fraction), two conditions must met. single label time though, EZDynamics able impute one value samples metadf. can also include additional interaction terms AverageAndRegularize() model different experimental conditions experiments conducted, inferred kinetic parameters can compared across conditions. Currently, complex modeling beyond simple stratification samples one condition possible EZDynamics(). normalization purposes, especially analyzing pre-mRNA processing dynamics, need provide AverageAndRegularize() table feature lengths via feature_lengths parameter. used cases length normalize read counts. Even case just modeling mature mRNA dynamics, technically necessary accurate estimation scale factors. first step EZDynamics() attempted inference normalization scale factors read counts. scale factors calculated , e.g. via specialized spike-protocols, can provide via scale_factors parameter. , EZDynamics() try infer fraction labeled's sample_feature (e.g., different subcellular compartments). relies sample_feature's combination sample_feature's. example, analyzing subcellular fractionation data, may 1) total RNA; 2) cytoplasmic RNA; 3) nuclear RNA. Total RNA = cytoplasmic + nuclear RNA, thus fraction reads labeled RNA function total cytoplasmic nuclear fraction labeled's, well relative molecular abundances cytoplasmic nuclear RNA. latter precisely scale factors need estimate. sufficient combinations data perform scale factor estimation, EZDynamics() use fraction labeled's modeling kinetic parameters. can perform post-hoc normalization estimate single synthesis rate constant, using downstream rate constants infer unknown normalization scale factor necessary combine kinetic parameter estimates read counts infer rate constant. estimating kinetic parameters, EZDynamics() infers solution linear system ODEs specified graph matrix input. done representing system equations matrix, deriving general solution levels modeled species RNA eigenvalues eigenvectors matrix. makes EZDynamics() orders magnitude efficient numerically infer solution round optimization, needing compute eigenvalues eigenvectors optimization iteration still non-trivial, meaning EZDynamics() may take anywhere 10s minutes couple hours run, depending complex model many distinct set samples experimental conditions .","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZDynamics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized dynamical systems modeling — EZDynamics","text":"","code":"##### MODELING CYTOPLASMIC TO NUCLEAR FLOW  ### Simulate data and get replicate average fractions estimates simdata <- EZSimulate(   nfeatures = 30,   ntreatments = 1,   mode = \"dynamics\",   label_time = c(1, 3),   dynamics_preset = \"nuc2cyto\" )  ezbdo <- EZbakRData(simdata$cB, simdata$metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- AverageAndRegularize(ezbdo,                               formula_mean = ~tl:compartment - 1,                               type = \"fractions\",                               parameter = \"logit_fraction_highTC\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  ### ODE model: the graph and measured species graph <- matrix(c(0, 1, 0,                   0, 0, 2,                   3, 0, 0),                 nrow = 3,                 ncol = 3,                 byrow = TRUE) colnames(graph) <- c(\"0\", \"N\", \"C\") rownames(graph) <- colnames(graph)  modeled_to_measured <- list(   nuclear = list(GF ~ N),   cytoplasm = list(GF ~ C),   total = list(GF ~ C + N) # total RNA is a combination of C and N )  ### Fit model ezbdo <- EZDynamics(ezbdo,                     graph = graph,                     sub_features = \"GF\",                     grouping_features = \"GF\",                     sample_feature = \"compartment\",                     modeled_to_measured = ode_models$nuc2cyto$formulas)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an MAPlot from EZbakR comparison — EZMAPlot","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"Make plot effect size (y-axis) vs. log10(read coverage) (x-axis), coloring points position relative user-defined decision cutoffs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"","code":"EZMAPlot(   obj,   parameter = \"log_kdeg\",   design_factor = NULL,   reference = NULL,   experimental = NULL,   param_name = NULL,   param_function = NULL,   features = NULL,   condition = NULL,   repeatID = NULL,   exactMatch = TRUE,   plotlog2 = TRUE,   FDR_cutoff = 0.05,   difference_cutoff = log(2),   size = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"obj object class EZbakRCompare, EZbakRData object run CompareParameters parameter Name parameter whose comparison want plot. design_factor Name factor metadf whose parameter estimates different factor values like compare. reference Name reference condition factor level value. experimental Name condition factor level value compare reference. param_name want assess significance single parameter, rather comparison two parameters, specify one parameter's name . param_function YET IMPLEMENTED. allow specify complicated functions parameters hypotheses need test combinations parameters rather individual parameters simple differences two parameters. features Character vector feature names comparisons made. condition Defunct parameter replaced design_factor. provided gets passed design_factor design_factor already specified. repeatID multiple kinetics fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. plotlog2 TRUE, assume log(parameter) difference passed want plot log2(parameter) difference. FDR_cutoff False discovery cutoff color points. difference_cutoff Minimum absolute difference cutoff color points. size Size points, passed geom_point() size parameter. specified, point size automatically chosen.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"ggplot2 object. Y-axis = log2(estimate interest (e.g., fold-change degradation rate constant); X-axis = log10(average normalized read coverage); points colored location relative FDR effect size cutoffs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"EZMAPlot() accepts input output CompareParameters(), .e., EZbakRData object least one \"comparisons\" table. plot \"avg_coverage\" column table vs. \"difference\" column. simplest case, \"difference\" represents log-fold change kinetic parameter (e.g., kdeg) estimate. complicated linear model fits comparisons can yield different parameter estimates. NOTE: outputs CompareParameters() meant visualization via MA plot. example, fitting certain interaction models, parameter estimates may represent average log(kinetic paramter) one condition. See discussion one example . EZbakR estimates kinetic parameters EstimateKinetics() EZDynamics() log-scale. default, since log2-fold changes bit easier interpret common kind visualizations, EZMAPlot() multiplies y-axis value log2(exp(1)), factor required convert log log2 scale. can turn setting plotlog2 FALSE.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZMAPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an MAPlot from EZbakR comparison — EZMAPlot","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate Kinetics ezbdo <- EstimateKinetics(ezbdo)  # Average estimates across replicate ezbdo <- AverageAndRegularize(ezbdo) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Compare parameters across conditions ezbdo <- CompareParameters( ezbdo, design_factor = \"treatment\", reference = \"treatment1\", experimental = \"treatment2\" )  # Make MA plot (ggplot object that you can save and add/modify layers) EZMAPlot(ezbdo)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"Run quality control checks — EZQC.EZbakRArrowData","title":"Run quality control checks — EZQC.EZbakRArrowData","text":"Run quality control checks","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run quality control checks — EZQC.EZbakRArrowData","text":"","code":"# S3 method for class 'EZbakRArrowData' EZQC(   obj,   mutrate_populations = \"all\",   features = \"all\",   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   ... )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run quality control checks — EZQC.EZbakRArrowData","text":"obj EZbakRData object mutrate_populations EstimateFractions(). See ?EstimateFractions() details. features EstimateFractions(). See ?EstimateFractions() details. filter_cols EstimateFractions(). See ?EstimateFractions() details. filter_condition EstimateFractions(). See ?EstimateFractions() details. remove_features EstimateFractions(). See ?EstimateFractions() details. ... Additional arguments. Currently goes unused.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRArrowData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run quality control checks — EZQC.EZbakRArrowData","text":"list ggplot2 objects visualizing various aspects data assessed EZQC().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"Run quality control checks — EZQC.EZbakRData","title":"Run quality control checks — EZQC.EZbakRData","text":"Run quality control checks","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run quality control checks — EZQC.EZbakRData","text":"","code":"# S3 method for class 'EZbakRData' EZQC(   obj,   mutrate_populations = \"all\",   features = \"all\",   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   ... )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run quality control checks — EZQC.EZbakRData","text":"obj EZbakRData object mutrate_populations EstimateFractions(). See ?EstimateFractions() details. features EstimateFractions(). See ?EstimateFractions() details. filter_cols EstimateFractions(). See ?EstimateFractions() details. filter_condition EstimateFractions(). See ?EstimateFractions() details. remove_features EstimateFractions(). See ?EstimateFractions() details. ... Additional arguments. Currently goes unused.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run quality control checks — EZQC.EZbakRData","text":"list ggplot2 objects visualizing various aspects data assessed EZQC().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Run quality control checks — EZQC.EZbakRFractions","title":"Run quality control checks — EZQC.EZbakRFractions","text":"Run quality control checks","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run quality control checks — EZQC.EZbakRFractions","text":"","code":"# S3 method for class 'EZbakRFractions' EZQC(obj, features = NULL, populations = NULL, fraction_design = NULL, ...)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run quality control checks — EZQC.EZbakRFractions","text":"obj EZbakRFractions object, EZbakRData object EstimateFractions run. features Set features analyzed fractions table interested QCing. gets passed EZget() help find table. populations Set mutation types analyzed fractions table interested QCing. gets passed EZget() help find table. fraction_design fraction \"design matrix\" specified get fractions table interested QCing. gets passed EZget() help find table. ... Additional arguments. Currently goes unused.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.EZbakRFractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run quality control checks — EZQC.EZbakRFractions","text":"list ggplot2 objects visualizing various aspects data assessed EZQC().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run quality control checks — EZQC","title":"Run quality control checks — EZQC","text":"EZQC() assesses multiple aspects NR-seq data generates number plots visualizing dataset-wide trends.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run quality control checks — EZQC","text":"","code":"EZQC(obj, ...)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run quality control checks — EZQC","text":"obj EZbakRData EZbakRFractions object. ... Parameters passed class-specific method. provided EZbakRFractions object, can (play role EstimateKinetics(), get passed EZget() find fractions table interested . See ?EstimateKinetics() details.): features populations fraction_design provided EZbakRData object, can (purpose EstimateFractions, see ?EstimateFractions() details): mutrate_populations features filter_cols filter_condition remove_features","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run quality control checks — EZQC","text":"list ggplot2 objects visualizing various aspects data assessed EZQC().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run quality control checks — EZQC","text":"EZQC() checks following aspects NR-seq data. passed EZbakRData object, EZQC() checks: Raw mutation rates: sequencing reads, many T's reference C read? hope raw mutation rates higher -label controls +label samples. Higher raw mutation rates, especially using standard label times (e.g., 2 hours mammalian systems), typically sign good label incorporation low labeled RNA/read dropout. -label samples, know background mutation rates typically less 0.2%, +label raw mutation rates several times higher preferable. Mutation rates labeled unlabeled reads: raw mutation rate counts mutations reads. standard NR-seq experiment performed single metabolic label, typically two populations reads: labeled RNA, higher mutation rates due chemical conversion/recoding metabolic label 2) unlabeled RNA, lower, background levels mutations. EZbakR fits two component mixture model estimate mutation rates two populations separately. successful NR-seq experiment labeled read mutation rate > 1% low background mutation rate < 0.3%. Read count replicate correlation: Simply log10 read count correlation replicates, inferred metadf. passed EZbakRFractions object, .e., output EstimateFractions(), addition checks EZbakRData input case, EZQC() also checks: Fraction labeled distribution: distribution feature-wise fraction labeled's (fraction high mutation content's) estimated EstimateFractions(). \"ideal\" distribution mean around 0.5, maximizes amount RNA synthesis degradation kinetics within dynamic range experiment. practice, () least bit lower longer label times risk physiological impacts metabolic labeling. Fraction labeled replicate correlation: logit(fraction labeled) correlation replicates, inferred metadf.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run quality control checks — EZQC","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Run QC QC <- EZQC(ezbdo) #> CHECKING RAW MUTATION RATES... #> CHECKING INFERRED MUTATION RATES... #> CHECKING READ COUNT CORRELATIONS... #> log10(read counts) correlation for each pair of replicates are: #> # A tibble: 12 × 3 #>    sample_1 sample_2 correlation #>    <chr>    <chr>          <dbl> #>  1 sample1  sample2        0.984 #>  2 sample1  sample3        0.983 #>  3 sample1  sample7        0.986 #>  4 sample2  sample3        0.979 #>  5 sample2  sample7        0.986 #>  6 sample3  sample7        0.983 #>  7 sample4  sample5        0.988 #>  8 sample4  sample6        0.987 #>  9 sample4  sample8        0.990 #> 10 sample5  sample6        0.991 #> 11 sample5  sample8        0.991 #> 12 sample6  sample8        0.990 #>  #> log10(read counts) correlations are high, suggesting good reproducibility! #>  #> CHECKING FRACTION LABELED DISTRIBUTIONS... #> Average fractions for each sample are: #> # A tibble: 6 × 3 #>   sample  avg_fraction fraction_type   #>   <chr>          <dbl> <chr>           #> 1 sample1        0.269 fraction_highTC #> 2 sample2        0.270 fraction_highTC #> 3 sample3        0.257 fraction_highTC #> 4 sample4        0.262 fraction_highTC #> 5 sample5        0.265 fraction_highTC #> 6 sample6        0.261 fraction_highTC #>  #> Labeling rates (e.g., fraction labeled for single label experiments) look good! #>  #> CHECKING FRACTION LABELED CORRELATIONS... #> logit(fraction_highTC) correlation for each pair of replicates are: #> # A tibble: 6 × 3 #>   sample_1 sample_2 correlation #>   <chr>    <chr>          <dbl> #> 1 sample1  sample2        0.964 #> 2 sample1  sample3        0.912 #> 3 sample2  sample3        0.955 #> 4 sample4  sample5        0.942 #> 5 sample4  sample6        0.956 #> 6 sample5  sample6        0.956 #>  #> logit(fraction_highTC) correlations are high, suggesting good reproducibility! #>"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"EZSimulate() user friendly wrapper SimulateMultiCondition(). sets convenient defaults quickly generate easy interpret output. EZSimulate() parameters SimulateMultiCondition(), also number additional parameters guide default behavior allow simulate multi-condition data without specifying multiple, sometimes complex, arguments need specify SimulateMultiCondition() get behavior. particular, users set single parameter, nfeatures (number features simulate data ), default. EZSimulate()-unique parameters ntreatments nreps default values guide simulation case nfeatures specified. particular, nreps ntreatments different conditions simulated, assumed model log(kdeg) ~ treatment log(ksyn) ~ 1. words, Different kdeg values simulated treatment level, ksyn values differ across conditions.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"","code":"EZSimulate(   nfeatures,   mode = c(\"standard\", \"dynamics\"),   ntreatments = ifelse(mode == \"standard\", 2, 1),   nreps = 3,   nctlreps = 1,   metadf = NULL,   mean_formula = NULL,   param_details = NULL,   seqdepth = nfeatures * 2500,   label_time = 2,   pnew = 0.05,   pold = 0.001,   readlength = 200,   Ucont = 0.25,   feature_prefix = \"Gene\",   dispslope = 5,   dispint = 0.01,   logkdegsdtrend_slope = -0.3,   logkdegsdtrend_intercept = -2.25,   logksynsdtrend_slope = -0.3,   logksynsdtrend_intercept = -2.25,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   logkdeg_diff_avg = 0,   logksyn_diff_avg = 0,   logkdeg_diff_sd = 0.5,   logksyn_diff_sd = 0.5,   pdiff_kd = 0.1,   pdiff_ks = 0,   pdiff_both = 0,   pdo = 0,   dynamics_preset = c(\"preRNA\", \"nuc2cyto\", \"preRNAwithPdeg\", \"nuc2cytowithNdeg\",     \"subtlseq\", \"nuc2cytowithpreRNA\"),   unassigned_name = \"__no_feature\",   dispersion = 1000,   lfn_sd = 0.2,   treatment_effects = NULL,   effect_avg_default = 0,   effect_sd_default = 0.5,   fraction_affected_default = 0.5,   log_means = NULL,   log_sds = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"nfeatures Number \"features\" (e.g., genes) simulated data. mode Currently, EZSimulate can simulate two modes: \"standard\" \"dynamics\". former default involves simulating multiple conditions standard NR-seq data. \"dynamics\" calls SimulateDynamics() hood simulate dynamical systems model choice. additional parameters apply mode == \"dynamics\", except dynamics_preset . ntreatments Number distinct treatments simulate. parameter relevant metadf provided. nreps Number replicates treatment simulate. parameter relevant metadf provided nctlreps Number -s4U replicates treatment simulate. parameter relevant metadf provided. metadf data frame following columns: sample: Names given samples simulate. : number columns names (taken metadf columns) storing factors samples can stratified. can referenced mean_formula, described . parameters (described ) can also included metadf specify sample-specific simulation parameter: seqdepth label_time pnew pold readlength Ucont mean_formula formula object specifies linear model used relate factors  columns metadf average log(kdegs) log(ksyns) sample. param_details data frame one row column design matrix obtained model.matrix(mean_formula, metadf) describes simulate linear model parameters. columns data frame : param: Name linear model parameter appears column names design matrix model.matrix(mean_formula, metadf). reference: Boolean; TRUE want treat parameter \"reference\". means parameter values global parameters set equal unless otherwise determined (see pdiff_* parameters determined parameter differ reference). global: Boolean; TRUE want treat parameter global parameter. means single value used features. logkdeg_mean: parameter reference, value log(kdeg) linear model drawn normal distribution mean. global parameter, value used. neither , value log(kdeg) linear model either reference (difference condition's value reference) reference's value + normally distributed random variable centered value. logkdeg_sd: sd used draws normal distribution described logkdeg_mean. logksyn_mean: logkdeg_mean log(ksyn) linear model. logksyn_sd: logkdeg_sd log(kdeg) linear model. pdiff_ks: Proportion features whose value parameter log(ksyn) linear model differ reference's. number 0 1, inclusive. example, pdiff_ks 0.1, 10% features, parameter equal reference parameter + normally distributed random variable mean logksyn_mean sd logksyn_sd. 90% features, parameter equal reference. pdiff_kd: pdiff_ks log(kdeg) linear model. pdiff_both: Proportion features whose value parameter log(kdeg) log(ksyn) linear models differ reference. Value must 0 min(c(pdiff_kd, pdiff_ks)) row. param_details specified user, first column design matrix assumed represent reference parameter, parameters assumed non-global, logkdeg_mean logksyn_mean set equivalently named parameter values described reference logkdeg_diff_avg logksyn_diff_avg parameters, logkdeg_sd logksyn_sd set equivalently named parameter values described reference logkdeg_diff_sd logksyn_diff_sd parameters, pdiff_kd, pdiff_ks, pdiff_both set equivalently named parameter values. seqdepth Total number reads sample. label_time Length s^4^U feed simulate. pnew Probability T mutated C read new. pold Probability T mutated C read old. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. dispslope Negative binomial dispersion parameter \"slope\" respect read counts. See DESeq2 paper dispersion model used. dispint Negative binomial dispersion parameter \"intercept\" respect read counts. See DESeq2 paper dispersion model used. logkdegsdtrend_slope Slope log10(read count) vs. log(kdeg) replicate variability trend logkdegsdtrend_intercept Intercept log10(read count) vs. log(kdeg) replicate variability trend logksynsdtrend_slope Slope log10(read count) vs. log(ksyn) replicate variability trend logksynsdtrend_intercept Intercept log10(read count) vs. log(ksyn) replicate variability trend logkdeg_mean Mean normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logkdeg_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_mean Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logksyn_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_avg Mean normal distribution non-reference log(kdeg) linear model parameters drawn feature param_details provided. logksyn_diff_avg Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_diff_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. pdiff_kd Proportion features non-reference log(kdeg) linear model parameters differ reference. pdiff_ks Proportion features non-reference log(ksyn) linear model parameters differ reference. pdiff_both Proportion features non-reference log(kdeg) log(ksyn) linear model parameters differ reference. ksyns simulated pdo Dropout rate; think probability s4U containing molecule lost library preparation sequencing. pdo 0 (default) dropout. dynamics_preset preset model use simulation dynamics. Therefore, relevant mode == dynamics. Options : nuc2cyto Simplest model nuclear cytoplasmic RNA dynamics: 0 -> N -> C -> 0 preRNA Simplest model pre-RNA mature RNA dynamics: 0 -> P -> M -> 0 preRNAwithPdeg preRNA, now pre-RNA can also degrade. nuc2cytowithNdeg nuc2cyto, now nuclear RNA can also degrade. subtlseq Subcellular TimeLapse-seq model, similar described Ietswaart et al., 2024. Simplest model discussed , lacking nuclear degradation: 0 -> CH -> NP -> CY -> PL -> 0, CY can also degrade. nuc2cytowithpreRNA Combination nuc2cyto preRNA preRNA first synthesized, either processed exported cytoplasm. Processing can also occur cytoplasm, mature nuclear RNA can exported cytoplasm.  mature RNA degrades. unassigned_name String give reads assigned given feature. dispersion Negative binomial size parameter use simulating read counts lfn_sd Logit(fn) replicate variability. treatment_effects Data frame describing effects treatment parameter. five columns: \"parameter_index\", \"treatment_index\", \"mean\", \"sd\", \"fraction_affected\". row corresponds effect ith (= treatment_index) treatment jth (j = parameter_index) kinetic parameter. Effect sizes, log-scale, drawn Normal distribution mean standard deviation set mean sd columns, respectively. number non-zero effects set \"fraction_affected\", equal ceiling(nfeatures * fraction_affected). treatment_index 1 ignored can either included . effect_avg_default ntreatments > 1, treatment_effects provided, value mean treatments parameters imputed treatment_effects. effect_sd_default ntreatments > 1, treatment_effects provided, value sd treatments parameters imputed treatment_effects. fraction_affected_default ntreatments > 1, treatment_effects provided, value fraction_affected treatments parameters imputed treatment_effects. log_means Vector log-Normal logmeans distribution feature-specific parameters drawn . Length vector max(entries graph), .e., number parameters specified model. provided, default c(1, seq(= -0.3, = -2.5, length.= max(graph) - 1 )). 1 ksyn parameter (always denoted 1 preset graph) arbitrary. Remaining parameters make indices order parameters fastest slowest process. log_sds Vector log-Normal logsds distribution feature-specific parameters drawn . provided, 0.4 parameters.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZSimulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — EZSimulate","text":"","code":"# Simulate standard data simdata_standard <- EZSimulate(30)  # Simulate dynamical systems data simdata_ode <- EZSimulate(30,                           mode = \"dynamics\",                           ntreatments = 1,                           label_time = c(1, 3),                           dynamics_preset = \"nuc2cyto\")"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"Make plot effect size (x-axis) vs. multiple-test adjusted p-value (y-axis), coloring points position relative user-defined decision cutoffs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"","code":"EZVolcanoPlot(   obj,   parameter = \"log_kdeg\",   design_factor = NULL,   reference = NULL,   experimental = NULL,   param_name = NULL,   param_function = NULL,   features = NULL,   condition = NULL,   normalize_by_median = NULL,   repeatID = NULL,   exactMatch = TRUE,   plotlog2 = TRUE,   FDR_cutoff = 0.05,   difference_cutoff = log(2),   size = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"obj object class EZbakRCompare, EZbakRData object run CompareParameters parameter Name parameter whose comparison want plot. design_factor Name factor metadf whose parameter estimates different factor values like compare. reference Name reference condition factor level value. experimental Name condition factor level value compare reference. param_name want assess significance single parameter, rather comparison two parameters, specify one parameter's name . param_function YET IMPLEMENTED. allow specify complicated functions parameters hypotheses need test combinations parameters rather individual parameters simple differences two parameters. features Character vector feature names comparisons made. condition Defunct parameter replaced design_factor. provided gets passed design_factor design_factor already specified. normalize_by_median Whether median subtracted estimated parameter differences. repeatID multiple kinetics fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features exactly match given comparisons table table used. Means specify subset features default, since TRUE default. plotlog2 TRUE, assume log(parameter) difference passed want plot log2(parameter) difference. -: probably best change general scale parameter parameter multiplied. Default log2(exp(1)) convert log() log2(). FDR_cutoff False discovery cutoff color points. difference_cutoff Minimum absolute difference cutoff color points. size Size points, passed geom_point() size parameter. specified, point size automatically chosen.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"ggplot2 object. X-axis = log2(estimate interest (e.g., fold-change degradation rate constant); Y-axis = -log10(multiple test adjusted p-value); points colored location relative FDR effect size cutoffs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"EZVolcanoPlot() accepts input output CompareParameters(), .e., EZbakRData object least one \"comparisons\" table. plot \"difference\" column table versus -log10 \"padj\" column. simplest case, \"difference\" represents log-fold change kinetic parameter (e.g., kdeg) estimate. complicated linear model fits comparisons can yield different parameter estimates. NOTE: outputs CompareParameters() meant visualization via volcano plot. example, fitting certain interaction models, parameter estimates may represent average log(kinetic paramter) one condition. See discussion one example . EZbakR estimates kinetic parameters EstimateKinetics() EZDynamics() log-scale. default, since log2-fold changes bit easier interpret common kind visualizations, EZVolcanoPlot() multiplies x-axis value log2(exp(1)), factor required convert log log2 scale. can turn setting plotlog2 FALSE.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZVolcanoPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a VolcanoPlot from EZbakR comparison — EZVolcanoPlot","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate Kinetics ezbdo <- EstimateKinetics(ezbdo)  # Average estimates across replicate ezbdo <- AverageAndRegularize(ezbdo) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Compare parameters across conditions ezbdo <- CompareParameters( ezbdo, design_factor = \"treatment\", reference = \"treatment1\", experimental = \"treatment2\" )  # Make volcano plot (ggplot object that you can save and add/modify layers) EZVolcanoPlot(ezbdo)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRArrowData object helper function for users — EZbakRArrowData","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"EZbakRArrowData creates object class EZbakRArrowData checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"","code":"EZbakRArrowData(cBds, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"cBds ArrowDataset following fields: sample: Name given particular sample data collected. mutational counts: Integers corresponding number particular mutation seen sequencing read. following column names allowed: TC: Number Thymine--Cytosine mutations TA: Number Thymine--Adenine mutations TG: Number Thymine--Guanine mutations CT: Number Cytosine--Thymine mutations CA: Number Cytosine--Adenine mutations CG: Number Cytosine--Guanine mutations CU: Number Cytosine--Uridine mutations : Number Adenine--Thymine mutations AC: Number Adenine--Cytosine mutations AG: Number Adenine--Guanine mutations AU: Number Adenine--Uridine mutations GT: Number Guanine--Thymine mutations GC: Number Guanine--Cytosine mutations GA: Number Guanine--Adenine mutations GU: Number Guanine--Uridine mutations TN: Number Thymine--Adenine/Cytosine/Guanine mutations CN: Number Cytosine--Adenine/Thymine/Guanine/Uridine mutations : Number Adenine--Thymine/Cytosine/Guanine/Uridine mutations GN: Number Guanine--Adenine/Cytosine/Thymine/Uridine mutations UN: Number Uridine--Adenine/Cytosine/Guanine mutations NT: Number Adenine/Cytosine/Guanine--Thymine mutations NC: Number Adenine/Thymine/Guanine/Uridine--Cytosine mutations NtoA: Number Thymine/Cytosine/Guanine/Uridine--Adenine mutations. (Naming convention changed NA taken) NU: Number Cytosine/Guanine/Adenine--Uridine mutations. NN: Number kind mutation base nucleotide count: Integers corresponding number instances particular type nucleotide whose mutations tracked corresponding mutation count column. following column names allowed: nT: Number Thymines nG: Number Guanines nA: Number Adenines nC: Number Cytosines nU: Number Uridines nN: number kind nucleotide features: columns interpreted mutation count base nucleotide count (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. metadf Data frame detailing various aspects samples included cBds. includes: sample: sample ID, correspond sample ID provided cBds. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type count column cBds label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"EZbakRArrowData object. simply list provide cBds metadf class EZbakRArrowData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRArrowData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EZbakRArrowData object helper function for users — EZbakRArrowData","text":"","code":"# Load dependency library(arrow) #>  #> Attaching package: ‘arrow’ #> The following object is masked from ‘package:utils’: #>  #>     timestamp simdata <- EZSimulate(30)  # Create directory to write dataset to outdir <- tempdir() dataset_dir <- file.path(outdir, \"arrow_dataset\")  # Create dataset write_dataset(   simdata$cB,   path = dataset_dir,   format = \"parquet\",   partitioning = \"sample\" )  # Create EZbakRArrowData object ds <- open_dataset(dataset_dir) ezbdo <- EZbakRArrowData(ds,                          simdata$metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRData object helper function for users — EZbakRData","title":"EZbakRData object helper function for users — EZbakRData","text":"EZbakRData creates object class EZbakRData checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRData object helper function for users — EZbakRData","text":"","code":"EZbakRData(cB, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRData object helper function for users — EZbakRData","text":"cB Data frame following columns: sample: Name given particular sample data collected. mutational counts: Integers corresponding number particular mutation seen sequencing read. following column names allowed: TC: Number Thymine--Cytosine mutations TA: Number Thymine--Adenine mutations TG: Number Thymine--Guanine mutations CT: Number Cytosine--Thymine mutations CA: Number Cytosine--Adenine mutations CG: Number Cytosine--Guanine mutations CU: Number Cytosine--Uridine mutations : Number Adenine--Thymine mutations AC: Number Adenine--Cytosine mutations AG: Number Adenine--Guanine mutations AU: Number Adenine--Uridine mutations GT: Number Guanine--Thymine mutations GC: Number Guanine--Cytosine mutations GA: Number Guanine--Adenine mutations GU: Number Guanine--Uridine mutations TN: Number Thymine--Adenine/Cytosine/Guanine mutations CN: Number Cytosine--Adenine/Thymine/Guanine/Uridine mutations : Number Adenine--Thymine/Cytosine/Guanine/Uridine mutations GN: Number Guanine--Adenine/Cytosine/Thymine/Uridine mutations UN: Number Uridine--Adenine/Cytosine/Guanine mutations NT: Number Adenine/Cytosine/Guanine--Thymine mutations NC: Number Adenine/Thymine/Guanine/Uridine--Cytosine mutations NtoA: Number Thymine/Cytosine/Guanine/Uridine--Adenine mutations. (Naming convention changed NA taken) NU: Number Cytosine/Guanine/Adenine--Uridine mutations. NN: Number kind mutation base nucleotide count: Integers corresponding number instances particular type nucleotide whose mutations tracked corresponding mutation count column. following column names allowed: nT: Number Thymines nG: Number Guanines nA: Number Adenines nC: Number Cytosines nU: Number Uridines nN: number kind nucleotide features: columns interpreted mutation count base nucleotide count (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. metadf Data frame detailing various aspects samples included cB. includes: sample: sample ID, correspond sample ID provided cB. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type count column cB label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRData object helper function for users — EZbakRData","text":"EZbakRData object. simply list provide cB metadf class EZbakRData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EZbakRData object helper function for users — EZbakRData","text":"","code":"# Simulate data simdata <- EZSimulate(30)  # Create EZbakRData object ezbdo <- EZbakRData(simdata$cB, simdata$metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRFractions helper function for users — EZbakRFractions","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"EZbakRFractions creates object class EZbakRFractions checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"","code":"EZbakRFractions(fractions, metadf, name = NULL, character_limit = 20)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"fractions Data frame following columns: sample: Name given particular sample data collected. estimates population fractions: columns refer estimate fraction reads coming particular mutational population. example, standard NR-seq experiment, one column named fraction_highTC. refers fraction RNA inferred high T--C mutation rate (e.g., newly synthesized RNA pulse-labeling NR-seq experiment). estimated fractions 2 mutation types (e.g., T--C G--), need explicitly list fractions interest estimated. example, TILAC experiment, fraction_highTC_lowGA, fraction_lowTC_highGA, fraction_lowTC_lowGA. n: Number reads assigned given feature given sample. features: columns interpreted estimate population fractions (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. metadf Data frame detailing various aspects samples included fractions data frame. includes: sample: sample ID, correspond sample ID provided fractions data frame. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type referenced fractions label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects name Optional; name give fractions table. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"EZbakRFractions object. simply list provide fractions metadf class EZbakRFractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRFractions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EZbakRFractions helper function for users — EZbakRFractions","text":"","code":"# Simulate data simdata <- EZSimulate(30)  # Get fractions table by estimating (for demonstration) ezbdo <- EZbakRData(simdata$cB, simdata$metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output fxns <- EZget(ezbdo, type = \"fractions\")  # Create EZbakRFractions object ezbfo <- EZbakRFractions(fxns, simdata$metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRKinetics helper function for users — EZbakRKinetics","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"EZbakRKinetics creates object class EZbakRKinetics checks validity provided input.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"","code":"EZbakRKinetics(kinetics, metadf, features, name = NULL, character_limit = 20)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"kinetics Data frame following columns: sample: Name given particular sample data collected. features: columns interpreted mutation count base nucleotide count (named sample n) interpreted ID genomic \"feature\" read originated. Common examples features typical column names said features include: Genes; common column names: gene, gene_id, gene_name, GF Genes-exonic; common column names: gene_exon, gene_id_exon, gene_name_exon, XF Transcripts; common column names: transcripts, TF Exonic bins; common column names: exonic_bins, EF, EB Exons; common column names: exons, exon_ids cases, read often map multiple features (e.g., exons). Many functions bakR expect feature IDs cases separated +. example, read overlaps two exons, IDs exon_1 exon_2, corresponding entry  column exonic assignments \"exon_1+exon_2\". default expectation can overwritten though thus strictly enforced. n: Number reads identical values columns. kinetic parameter estimates: can named whatever like long start string \"se_\". reserved kinetic parameter uncertainties, provided. kinetic parameter uncertainties: Uncertainty kinetic parameter estimates. named \"se_\" followed kinetic parameter name appears relevant column name kinetics table. metadf Data frame detailing various aspects samples included kinetics data frame. includes: sample: sample ID, correspond sample ID provided kinetics data frame. tl: Metabolic label time. several edge cases aware : one metabolic label used set samples described metadf (e.g., s4U s6G used), tl column replaced tl_<muttype>, <muttype> represents corresponding mutation type referenced fractions label whose incubation time listed column. example, feeding s4U samples s6G others, performing standard nucleotide recoding chemistry, include tl_TC tl_GA columns corresponding s4U s6G label times, respectively. pulse-chase experimental design used (!!strongly discouraged unless legitimate reason prefer design pulse-label design!!), columns named tpulse tchase, corresponding pulse chase times respectively. _ convention used case multi-label pulse-chase designs. sample characteristics: remaining columns can named whatever like include distinguishing features groups samples. Common columns might include: treatment: experimental treatment applied set samples. represent things like genetic knockouts knockdowns, drug treatments, etc. batch: ID sets samples collected /processed together. Useful regressing technical batch effects assay: optional column include string describes type experiment done influence EZbakR analyzes interprets data samples. Possible values assay currently include: standard: Refers \"standard\" nucleotide recoding RNA-seq methods (e.g., TimeLapse-seq, SLAM-seq, TUC-seq, etc.), cells fed single metabolic label, RNA extracted sequenced, mutations particular type counted STL: Refers Start-TimeLapse-seq, method combining Start-seq (developed Karen Adelman's lab) TimeLapse-seq. Used infer kinetics transcription initiation promoter-proximal pause site departure. TT: Refers Transient-Transcriptome NR-seq, method combining TT-seq (developed Patrick Cramer's lab) NR-seq. TT-seq involves biochemically enriching labeled RNA. combining method nucleotide recoding chemistry (first done Simon lab TT-TimeLapse-seq since done SLAM chemistry, often referred TTchem-seq), possible bioinformatically filter reads coming unlabeled RNA background. TILAC: Refers TILAC, method developed Simon lab achieve spike-free normalization RNA-seq data use dual labeling approach inspired proteomic method SILAC. subcellular: Refers techniques subcellular TimeLapse-seq (developed Stirling Churchman's lab) combine subcellular fractionation NR-seq infer additional kinetic parameters. sc: Refers single-cell RNA-seq implementations NR-seq. features Features tracked kinetics data frame. Needs specified explicitly automatically inferred. name Optional; name give fractions table. character_limit name chosen automatically, limit number characters said name. default name yields string longer , kinetics table named kinetics1","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"EZbakRKinetics object. simply list provided kinetics metadf class EZbakRKinetics","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZbakRKinetics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EZbakRKinetics helper function for users — EZbakRKinetics","text":"","code":"# Simulate data simdata <- EZSimulate(30)  # Get kinetics table by estimating (for demonstration) ezbdo <- EZbakRData(simdata$cB, simdata$metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output ezbdo <- EstimateKinetics(ezbdo) kinetics <- EZget(ezbdo, type = \"kinetics\")  # Create EZbakRKinetics object ezbko <- EZbakRKinetics(kinetics, simdata$metadf, features = \"feature\") #> Kinetic parameter estimates missing corresponding uncertainty #>           quantification will have an imputed uncertainty of 0."},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily get EZbakR table of estimates of interest — EZget","title":"Easily get EZbakR table of estimates of interest — EZget","text":"EZget() returns table interest EZbakRData object. meant make easier find access certain analyses, single EZbakRData object may include analyses different features, kinetic parameters, dynamical systems models, comparisons, etc.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily get EZbakR table of estimates of interest — EZget","text":"","code":"EZget(   obj,   type = c(\"fractions\", \"kinetics\", \"readcounts\", \"averages\", \"comparisons\", \"dynamics\"),   features = NULL,   populations = NULL,   fraction_design = NULL,   isoforms = NULL,   kstrat = NULL,   parameter = NULL,   counttype = NULL,   design_factor = NULL,   dynamics_design_factors = NULL,   scale_factors = NULL,   cstrat = NULL,   feature_lengths = NULL,   experimental = NULL,   reference = NULL,   param_name = NULL,   param_function = NULL,   formula_mean = NULL,   sd_grouping_factors = NULL,   fit_params = NULL,   repeatID = NULL,   sub_features = NULL,   grouping_features = NULL,   sample_feature = NULL,   modeled_to_measured = NULL,   graph = NULL,   normalize_by_median = NULL,   deconvolved = NULL,   returnNameOnly = FALSE,   exactMatch = FALSE,   alwaysCheck = FALSE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily get EZbakR table of estimates of interest — EZget","text":"obj EZbakRData object type class EZbakR outputs like search . Equivalent name list EZbakRData object contains tables interest. features Features must present table interest. exactMatch TRUE, features must also features present table. populations relevant type == \"fractions\". Mutational populations must analyzed generate table interest. fraction_design relevant type == \"fractions\". Fraction design table used generate table interest. isoforms relevant table result isoform deconvolution kstrat relevant type == \"kinetics\". Short \"kinetics strategy\"; strategy used infer kinetic parameters. parameter relevant type == \"averages\" \"comparisons\". parameter averaged compared? counttype String denoting type read count information looking . Current options \"TMM_normalized\", \"transcript\", \"matrix\". -: sure used way currently... design_factor design_factor specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". dynamics_design_factors design_factors included final EZDynamics() output. Therefore, relevant type == \"dynamics\". scale_factors Sample group scale factors used EZDynamics(). Therefore, relevant type == \"dynamics\" cstrat Strategy used comparative analyses. Can : contrast: two parameters compared via specifying reference experimental levels CompareParameters() (type == \"averages\"). single_param: single parameter passed CompareParameters() via param_name option. dynamics: output EZDynamics() passed CompareParameters() function: function multiple parameters passed CompareParameter() via param_function option. feature_lengths Table feature lengths used length normalization. experimental Experimental condition specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". reference Reference condition specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". param_name Parameter name specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\" param_function Function parameters specified relevant run CompareParameters(). Therefore, relevant type == \"comparisons\". formula_mean R formula object specifying parameter interest depends sample characteristics specified obj's metadf. Therefore, relevant type == \"averages\". sd_grouping_factors metadf columns data grouped estimating standard deviations across replicates? Therefore, relevant type == \"averages\". fit_params Character vector names parameters linear model fit. Therefore, relevant type == \"averages\". repeatID Numerical ID duplicate objects metadata. sub_features relevant type == \"dynamics\". Feature columns distinguished different measured species running EZDynamics(). grouping_features relevant type == \"dynamics. Features overarching feature assignments sub_features grouped running EZDynamics(). sample_feature relevant type == \"dynamics\". Name metadf column distinguished different classes samples running EZDynamics(). modeled_to_measured relevant type == \"dynamics\". Specifies relationship sub_features, sample_feature (specified), species graph. graph relevant type == \"dynamics\". NxN adjacency matrix, N represents number species modeled running EZDynamics(). normalize_by_median Whether median difference subtracted estimated kinetic parameter difference. Thus, relevant type == \"comparisons\". deconvolved relevant type == \"fractions\". Boolean TRUE fractions table result performing multi-feature deconvolution DeconvolveFractions(). returnNameOnly TRUE, names tables passed search criteria returned. Else, single table passing search criteria returned. one table passes search criteria returnNameOnly == FALSE, error thrown. exactMatch TRUE, features populations, can vectors, ensure provided vectors features populations exactly match relevant metadata vectors. alwaysCheck TRUE, even single table type interest, still run checks queries.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily get EZbakR table of estimates of interest — EZget","text":"Table interest relevant EZbakRdata list (set type parameter).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily get EZbakR table of estimates of interest — EZget","text":"input EZget() 1) type table want get (\"fractions\", \"kinetics\", \"averages\", \"comparisons\", \"dynamics\") 2) metadata necessary uniquely specify table interest. , every available piece metadata can specified purpose documented. need specify minimum information necessary. example, like get \"fractions\" table analysis exon bins (feature == \"exon_bins\", potentially overarching features like \"XF\", \"GF\", \"rname\"), none \"fractions\" tables includes exon_bins feature, can get table EZget(ezbdo, type = \"fractions\", features = \"exon_bins\"), ezbdo EZbakRData object. another example, imagine want get \"kinetics\" table analysis gene-wise kinetic parameters (e.g., features == \"XF\"). may multiple \"kinetics\" tables, \"XF\" least one features. tables additional features though, can tell EZget() \"XF\" feature present table interest setting exactMatch TRUE, tells EZget() metadata specify exactly match relevant metadata table interest. call case look like EZget(ezbdo, type = \"fractions\", features = \"XF\", exactMatch = TRUE). EZget() used internally almost every single EZbakR function specify input table analysis. Thus, usage metadata described also applies functions require specify table want use (e.g., EstimateKinetics(), AverageAndRegularize(), CompareParameters(), etc.).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EZget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily get EZbakR table of estimates of interest — EZget","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate Kinetics ezbdo <- EstimateKinetics(ezbdo)  # Average log(kdeg) estimates across replicate ezbdo <- AverageAndRegularize(ezbdo) #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  #' # Average log(ksyn) estimates across replicate ezbdo <- AverageAndRegularize(ezbdo, parameter = \"log_ksyn\") #> Fitting linear model #> Estimating coverage vs. variance trend #> Regularizing variance estimates  # Compare log(kdeg) across conditions ezbdo <- CompareParameters( ezbdo, design_factor = \"treatment\", reference = \"treatment1\", experimental = \"treatment2\" )  # Get the one and only fractions object fxns <- EZget(ezbdo, type = \"fractions\")  # Get the log(ksyn) averages table ksyn_avg <- EZget(ezbdo, type = \"averages\", parameter = \"log_ksyn\")"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate fractions of each RNA population. — EstimateFractions","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"first step NR-seq analysis figure fraction reads mutational population data. example, performing standard SLAM-seq TimeLapse-seq experiment, means estimating fraction reads high T--C mutation content, fraction low T--C mutation content. EstimateFractions .","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"","code":"EstimateFractions(   obj,   features = \"all\",   mutrate_populations = \"all\",   fraction_design = NULL,   Poisson = TRUE,   strategy = c(\"standard\", \"hierarchical\"),   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   split_multi_features = FALSE,   multi_feature_cols = NULL,   multi_feature_sep = \"+\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   hier_readcutoff = 300,   init_pnew_prior_sd = 0.8,   pnew_prior_sd_min = 0.01,   pnew_prior_sd_max = 0.15,   pold_est = NULL,   pold_from_nolabel = FALSE,   grouping_factors = NULL,   character_limit = 20,   overwrite = TRUE )  # S3 method for class 'EZbakRData' EstimateFractions(   obj,   features = \"all\",   mutrate_populations = \"all\",   fraction_design = NULL,   Poisson = TRUE,   strategy = c(\"standard\", \"hierarchical\"),   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   split_multi_features = FALSE,   multi_feature_cols = NULL,   multi_feature_sep = \"+\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   hier_readcutoff = 300,   init_pnew_prior_sd = 0.3,   pnew_prior_sd_min = 0.01,   pnew_prior_sd_max = 0.15,   pold_est = NULL,   pold_from_nolabel = FALSE,   grouping_factors = NULL,   character_limit = 20,   overwrite = TRUE )  # S3 method for class 'EZbakRArrowData' EstimateFractions(   obj,   features = \"all\",   mutrate_populations = \"all\",   fraction_design = NULL,   Poisson = TRUE,   strategy = c(\"standard\", \"hierarchical\"),   filter_cols = \"all\",   filter_condition = `&`,   remove_features = c(\"NA\", \"__no_feature\"),   split_multi_features = FALSE,   multi_feature_cols = NULL,   multi_feature_sep = \"+\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   hier_readcutoff = 300,   init_pnew_prior_sd = 0.8,   pnew_prior_sd_min = 0.01,   pnew_prior_sd_max = 0.15,   pold_est = NULL,   pold_from_nolabel = FALSE,   grouping_factors = NULL,   character_limit = 20,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"obj EZbakRData EZbakRArrowData object features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB file. mutrate_populations Character vector set mutational populations want infer rates mutations . default, mutation rates estimated populations present cB. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. call function create_fraction_design(...), providing vector mutational population names input, create fraction_design table , assumption every single possible combination mutational populations present data. can edit present column necessary get appropriate fraction_design use case. See details required contents fraction_design interpretation. fraction_design must one column per element mutrate_populations, columns sharing name mutrate_populations. must also one additional column named present. elements fraction_design booleans (TRUE FALSE). include possible combinations TRUE FALSE mutrate_populations columns. TRUE one columns represents population RNA expected background mutation rates type. present denote whether population RNA expected exist data. example, assume typical TimeLapse-seq/SLAM-seq/TUC-seq/etc. experiment fed cells s^4U recoded incorporated s^4U nucleotide reverse transcriptase read cytosine. means mutrate_populations \"TC\", since want estimate fraction RNA s^4U labeled, .e., fraction high T--C mutation content. fraction_design thus two columns: TC present. also two rows. One rows must value TRUE TC, must value FALSE. row value TRUE TC represents population reads high T--C mutation content, .e., reads RNA synthesized s^4U present. row value FALSE TC reprsents population reads low T--C mutation content, .e., reads RNA existed prior s^4U labeling. populations exist data, value present column TRUE . See lazily loaded standard_fraction_design object example tibble look like. (\"lazily loaded standard_fraction_design object\" means run print(standard_fraction_design) loading EZbakR library(EZbakR), can see contents. specifically, lazily loaded means table loaded memory ask , via something like print() call.) another example, consider TILAC, NR-seq extension developed Simon lab. TILAC originally described Courvan et al., 2022. method, two populations RNA, one s^4U fed cells one s^6G fed cells, pooled prepped sequencing together. allows internally controlled comparisons RNA abundance without spike-ins. s^4U recoded cytosine analog TimeLapse chemistry (similar chemistry) s^6G recoded adenine analog. Thus, fraction_design includes columns called TC GA. unique aspect TILAC fraction_design table one possible populations, TC GA TRUE, denoted present (present = FALSE). RNA exposed s^4U s^6G, thus population reads high T--C G--mutational content exist. see example TILAC fraction_design table look like, see lazily loaded tilac_fraction_design object. Poisson TRUE, use U-content adjusted Poisson mixture modeling strategy. Often provides significant speed gain without sacrificing accuracy. strategy String denoting new read mutation rate estimation strategy use. Options include: standard: Estimate single new read old read mutation rate sample. done via binomial mixture model aggregating hierarchical: Estimate feature-specific new read mutation rate, regularizing feature-specific estimate sample-wide prior. Currently compatible single mutation type mixture modeling. filter_cols feature columns used filter feature-less reads. default value \"\" checks feature columns whether read failed get assigned said feature. filter_condition two possible values make sense: `&` `|`. set `&`, features filter_cols must \"null\" value (.e., value included remove_features) row get filtered . set `|`, single feature filter_cols needs one \"null\" values get filtered . remove_features feature names indicate failed assignment read given feature. fastq2EZbakR pipeline uses value '__no_feature'. split_multi_features set reads maps ambiguously multiple features, data reads copied feature ambiguous set? TRUE, multi_feature_cols also must set. Examples set TRUE includes analyzing exonic bins (concept defined original DEXSeq paper), exon-exon junctions, etc. multi_feature_cols Character vector columns potential include assignment multiple features. columns features split split_multi_features TRUE. multi_feature_sep String representing ambiguous feature assignments distinguished feature names. example, default value \"+\" denotes read maps multiple features (call featureA featureB, example), feature column value \"featureA+featureB\" read. pnew_prior_mean Mean logit(pnew) prior. pnew_prior_sd Standard deviation logit(pnew) prior. pold_prior_mean Mean logit(pold) prior. pold_prior_sd Standard deviation logit(pold) prior. hier_readcutoff strategy == hierarchical, features many reads used infer distribution feature-specific labeled read mutation rates. init_pnew_prior_sd strategy == hierarchical, initial logit(pnew) prior standard deviation regularize feature-specific labeled read mutation rate estimates. pnew_prior_sd_min minimum logit(pnew) prior standard deviation strategy set \"hierarchcial\". EZbakR try estimate empirically standard deviation initial feature-specific logit(pnew) estimates using high coverage features, minus average uncertainty logit(pnew) estimates. difference can sometimes negative, value pnew_prior_sd_min imputed case. pnew_prior_sd_max Similar pnew_prior_sd_min, now representing maximum allowed logit(pnew) prior sd. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names. pold_from_nolabel Fix background mutation rate estimate mutation rates seen -label samples. default, single background rate used samples, inferred average mutation rate across -label samples. grouping_factors argument can specified use certain -label samples infer background mutation rates certain sets +label samples. grouping_factors pold_from_nolabel TRUE, grouping_factors specify sample-detail columns metadf used group -label samples . Average mutation rates group -label samples used background mutation rate estimate +label samples values relevant metadf columns. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"EZbakRFractions object, just EZbakRData object \"fractions\" list element. include tables fraction estimates (e.g., fraction reads high T--C mutation rate population standard single-label s4U experiment; termed fraction_highTC table) features samples.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"EstimateFractions uses mixture modeling estimate fraction reads mutational population data, done feature data (.e., combination columns specify genomic features reads derived). set mutational populations data can specified providing fraction_design object, described depth (also see ?create_fraction_design). several flavors mixture modeling can performed EstimateFractions. follows: default: global mutation rate parameters (global = reads features) estimated sample fitting single two-component mixture model reads sample. used estimate fraction reads feature mutational population, also using two-component mixture model. Poisson set TRUE, nucleotide-content adjusted Poisson mixture model, efficient alternative binomial mixture modeling. Poisson set FALSE, binomial mixture model. Low mutation rate -label: pold_from_nolabel TRUE, background, label mutation rates estimated -label samples. default, single set background mutation rates estimated samples, can change behavior setting grouping_factors specify columns metadf samples stratified. great strategy use low label incorporation rates used fairly short label time. Hierarchical model: strategy == \"hierarchical\", currently compatible single-mutation type modeling (e.g., standard T--C mutation modeling), high T--C content mutation rates estimated feature. global sample-wide estimates used informative prior increase accuracy process avoiding extreme estimates.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"EstimateFractions(EZbakRData): Method class EZbakRData Estimates fractions using entirely memory object. EstimateFractions(EZbakRArrowData): Mehthod class EZbakRArrowData alternative fully memory EZbakRData EstimateFractions method can help analyses larger RAM datasets. provided \"cB\" expected -disk Arrow Dataset. Furthermore, expected partitioned sample name, allow method read single-sample worth data memory time. can significantly reduce RAM usage. Input object created EZbakRArrowData().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateFractions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate fractions of each RNA population. — EstimateFractions","text":"","code":"# Simulate data to analyze simdata <- SimulateOneRep(30)  # Create EZbakR input metadf <- data.frame(sample = \"sampleA\", tl = 2) ezbdo <- EZbakRData(simdata$cB, metadf)  # Estimate fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate isoform-specific fraction news (or more generally ","title":"Estimate isoform-specific fraction news (or more generally ","text":"Combines output EstimateFractions transcript isoform quantification performed outside tool (e.g., RSEM, kallisto, salmon, etc.) infer transcript isoform-specific fraction news (generally fraction reads coming particular mutation population).","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate isoform-specific fraction news (or more generally ","text":"","code":"EstimateIsoformFractions(   obj,   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   exactMatch = TRUE,   fraction_name = NULL,   quant_name = NULL,   gene_to_transcript = NULL,   overwrite = TRUE,   TPM_min = 1,   count_min = 10 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate isoform-specific fraction news (or more generally ","text":"obj EZbakRData object features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. fraction_name Name fraction estimate table use. stored obj$fractions list name. Can also rely specifying features /populations EZget() find . quant_name Name transcript isoform quantification table use. stored obj$readcounts list name. Use ImportIsoformQuant() create table. quant_name NULL, search tables containing string \"isoform_quant\" name, naming convention used ImportIsoformQuant(). one table exists, error thrown specify exact name quant_name. gene_to_transcript Table columns transcript_id feature related columns appear relevant fractions table. relevant hack deal case STAR includes transcriptome alignment transcripts opposite strand RNA actually originated. table used filter transcript-feature combinations exist. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs. TPM_min Minimum TPM transcript kept analysis. count_min Minimum expected_count transcript kept analysis.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate isoform-specific fraction news (or more generally ","text":"EZbakRData object additional table \"fractions\" list. form output EstimateFractions(), feature column \"transcript_id\".","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate isoform-specific fraction news (or more generally ","text":"EstimateIsoformFractions expects input \"fractions\" table estimates transcript equivalence class (TEC) fraction news. transcript equivalence class set transcript isoforms sequencing read compatible. fastq2EZbakR able assign reads equivalence classes EZbakR can estimate fraction reads TEC labeled RNA. EstimateIsoformFractions estimates transcript isoform fraction news fitting linear mixing model TEC fraction new estimates + transcript isoform abundance estimates. words, TEC fraction new (data) modeled weighted average transcript isoform fraction news (parameters estimate), weights determined relative abundances transcript isoforms TEC (data). TEC fraction new modeled Beta distribution mean equal weighted transcript isoform fraction new average variance related number reads TEC. Transcript isoforms estimated TPMs less estimated TPM greater TPM_min (1 default) estimated number read counts less count_min (10 default) removed TECs fraction news estimated.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateIsoformFractions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate isoform-specific fraction news (or more generally ","text":"","code":"# Load dependencies library(dplyr)  # Simulates a single sample worth of data simdata_iso <- SimulateIsoforms(nfeatures = 300)  # We have to manually create the metadf in this case metadf <- tibble(sample = 'sampleA',                      tl = 4,                      condition = 'A')  ezbdo <- EZbakRData(simdata_iso$cB,                     metadf)  ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  ### Hack in the true, simulated isoform levels reads <- simdata_iso$ground_truth %>%   dplyr::select(transcript_id, true_count, true_TPM) %>%   dplyr::mutate(sample = 'sampleA',                 effective_length = 10000) %>%   dplyr::rename(expected_count = true_count,                 TPM = true_TPM)  # Name of table needs to have \"isoform_quant\" in it ezbdo[['readcounts']][['simulated_isoform_quant']] <- reads  ### Perform deconvolution ezbdo <- EstimateIsoformFractions(ezbdo) #> Analyzing sample sampleA..."},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate kinetic parameters — EstimateKinetics","title":"Estimate kinetic parameters — EstimateKinetics","text":"Simple kinetic parameter (kdeg ksyn) estimation using fraction estimates EstimateFractions(). Several slightly different kinetic parameter inference strategies implemented.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate kinetic parameters — EstimateKinetics","text":"","code":"EstimateKinetics(   obj,   strategy = c(\"standard\", \"tilac\", \"NSS\", \"shortfeed\", \"pulse-chase\"),   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   exactMatch = TRUE,   grouping_factor = NULL,   reference_factor = NULL,   character_limit = 20,   feature_lengths = NULL,   exclude_pulse_estimates = TRUE,   overwrite = TRUE )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate kinetic parameters — EstimateKinetics","text":"obj EZbakRFractions object, EZbakRData object EstimateFractions() run. strategy Kinetic parameter estimation strategy. Options include: standard: Estimate single new read old read mutation rate sample. done via binomial mixture model aggregating NSS: Use strategy similar presented Narain et al., 2021 assumes data provides reference much RNA present start labeling. case, grouping_factor reference_factor must also set. shortfeed: Estimate kinetic parameters assuming degradation labeled RNA, appropriate metabolic label feed time much shorter average half-life RNA system. tilac: Estimate TILAC-ratio described Courvan et al., 2022. pulse-chase: Estimate kdeg pulse-chase experiment. default kdeg estimated time point label present. includes pulse-samples, well samples including chase pulse. want include estimates pulse-samples final output, set exclude_pulse_estimates TRUE. Pulse-chases suboptimal number experimental reasons, urge users avoid performing kind experiment whenever possible (favoring instead pulse-label design). One challenges analyzing pulse-chase data fraction labeled pulse must compared chase. Due number technical reasons, possible estimated labeling chase *higher pulse. impossible estimate kinetic parameters case. Thus, arises, conservative kdeg estimate imputed, equal -log(1 - 1/(n+2))/tchase, kdeg estimate get detected reads labeled RNA uninformative prior fraction new (.e., estimated fraction new (number reads labeled RNA + 1) / (number reads + 2)). features Character vector set features want stratify reads estimate proportions RNA population. default \"\" use feature columns obj's cB. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features populations exactly match given fractions table table used. Means specify subset features populations default, since TRUE default. grouping_factor sample-detail columns metadf used group samples calculating average RPM (strategy = \"NSS\") pulse fraction labeled (strategy = \"pulse-chase\") particular time point? relevant strategy = \"NSS\" strategy = \"pulse-chase\". reference_factor sample-detail column metafd used determine group samples provide information starting levels RNA sample? values match grouping_factor. #' relevant strategy = \"NSS\". character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. feature_lengths Table effective lengths feature combination data. example, analysis includes features named GF XF, data frame columns GF, XF, length. exclude_pulse_estimates strategy = \"pulse-chase\", like exclude pulse-kdeg ksyn estimates final output? good idea used long pulse goal labeling close 100% RNA. overwrite TRUE fractions estimate output already exists possess metadata (features analyzed, populations analyzed, fraction_design), get overwritten new output. Else, saved separate output name + \"_#\" \"#\" numerical ID distinguish similar outputs.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate kinetic parameters — EstimateKinetics","text":"EZbakRKinetics object, just EZbakRData object \"kinetics\" slot. includes tables kinetic parameter estimates feature sample kinetic parameters can estimated.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate kinetic parameters — EstimateKinetics","text":"EstimateKinetics() estimates kinetics RNA synthesis degradation standard single-label NR-seq data. also technically supports analyses dual-label TILAC experiment, functionality actively tested maintained standard analyses. EstimateKinetics() assumes simple linear ODE model RNA dynamics: $$\\frac{\\text{dR}}{\\text{dt}} = k_{\\text{syn}} - k_{\\text{deg}}*\\text{R}$$ : R = Amount RNA \\(k_{\\text{syn}}\\) = Synthesis rate constant \\(k_{\\text{deg}}\\) = Degradation rate constant general solution : $$\\text{R(t)} = \\text{R(0)}e^{-k_{\\text{deg}}\\text{t}} + (1 - \\frac{k_{\\text{syn}}}{k_{\\text{deg}}})e^{-k_{\\text{deg}}\\text{t}}  $$ \\(\\text{R(0)}\\) initial RNA level. default kinetic parameter estimation strategy (strategy == \"standard\") assumes labeled RNA (precisely RNA synthesized presence label) \\(\\text{R(0)} = 0\\). Thus, assumes pulse-label rather pulse-chase experimental design (written several places, like example, pulse-label designs superior pulse-chases almost settings). unlabeled RNA, assumes \\(\\text{R(0)} = \\frac{k_{\\text{syn}}}{k_{\\text{deg}}}\\). known steady-state assumption key assumption method. broadly, assuming steady-state means method assumes RNA levels given feature constant entire metabolic labeling duration. EZbakR designed analyses bulk NR-seq data, \"constant\" means average RNA levels across profiled cells constant (thus asynchronous populations dividing cells still count steady-state, even RNA expression landscapes individual cells quite dynamic). assumption may violated cases labeling coincides closely follows perturbation (e.g., drug treatment). steady-state assumption hold, simple relationship fraction reads labeled RNA (\\(\\theta\\)) turnover kinetics RNA: $$\\theta = 1 - e^{-k_{\\text{deg}}t}$$ power approach thus turnover kinetics estimated \"internally normalized\" quantity: \\(\\theta\\) (termed \"fraction new\", \"fraction labeled\", \"fraction high mutation content\", new--total ratio (NTR), depending look ask). \"Internally normalized\" means normalization scale factor need estimated order accurately infer turnover kinetics. \\(\\theta\\) represents ratio read counts feature library, thus scale factor appear numerator denominator estimate cancel . assumption valid, strategy = \"NSS\" approach may preferable. approach relies model RNA dynamics, now assumes initial RNA levels (\\(\\text{R(0)}\\) unlabeled RNA) steady-state levels dictated current synthesis turnover kinetics. idea strategy first presented Narain et al. 2021. run approach, need able estimate initial RNA levels label-fed sample, fraction reads labeled RNA longer. reflect turnover kinetics (old RNA assumed potentially reached new steady-state levels yet). means label-fed sample, need sample whose assayed RNA population represents starting RNA population label-fed sample. EZbakR use reference samples infer \\(\\text{R(0)}\\) unlabeled RNAs estimate turnover kinetics ratio quantity remaining unlabeled RNA levels labeling: $$\\theta_{\\text{NSS}} = \\frac{\\text{R(tl)}}{\\text{R(0)}}$$ really like idea strategy, without severe limitations. one, major benefit NR-seq, internally normalized estimation turnover kinetics, window. Thus, read counts need normalized relevant reference label-fed sample pairs. addition, variance patterns ratio somewhat unfortunate. variance incredibly high stable RNAs, severely limiting effective dynamic range approach relative steady-state analyses. continue work refine EZbakR's implementation approach, now urge caution use interpretation. See discussion alternative approach navigating non-steady-state data . aside, may wonder strategy deals dynamic regulation synthesis degradation rate constants labeling. answer , realize duration metabolic labeling represents integration time best can assess average kinetics. Thus, rate constants changing labeling, strategy can still thought providing estimate time averaged synthesis turnover kinetics label time. Eventually, get around implementing pulse-chase support EstimateKinetics(). yet like pulse-chase experiments think way popular purely historical reasons. lots people keep pulse-chase NR-seq c'est la vie.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateKinetics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate kinetic parameters — EstimateKinetics","text":"","code":"# Simulate data to analyze simdata <- SimulateOneRep(30)  # Create EZbakR input metadf <- data.frame(sample = \"sampleA\", tl = 2) ezbdo <- EZbakRData(simdata$cB, metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Estimate Kinetics ezbdo <- EstimateKinetics(ezbdo)"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mutation rates — EstimateMutRates","title":"Estimate mutation rates — EstimateMutRates","text":"Two component mixture models fit data estimate global high low mutation rates samples. Estimation mutation rates regularized use weakly informative priors whose parameters can altered using arguments defined .","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mutation rates — EstimateMutRates","text":"","code":"EstimateMutRates(   obj,   populations = \"all\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   pold_est = NULL,   pold_from_nolabel = FALSE,   grouping_factors = NULL )  # S3 method for class 'EZbakRData' EstimateMutRates(   obj,   populations = \"all\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   pold_est = NULL,   pold_from_nolabel = FALSE,   grouping_factors = NULL )  # S3 method for class 'EZbakRArrowData' EstimateMutRates(   obj,   populations = \"all\",   pnew_prior_mean = -2.94,   pnew_prior_sd = 0.3,   pold_prior_mean = -6.5,   pold_prior_sd = 0.5,   pold_est = NULL,   pold_from_nolabel = FALSE,   grouping_factors = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mutation rates — EstimateMutRates","text":"obj EZbakRData EZbakRArrowData object populations Character vector set mutational populations want infer fractions . example, say cB file contains columns tracking T--C G--pnew_prior_mean logit-Normal mean logit(pnew) prior. pnew_prior_sd logit-Normal sd logit(pnew) prior. pold_prior_mean logit-Normal mean logit(pold) prior. pold_prior_sd logit-Normal sd logit(pold) prior. pold_est Background mutation rate estimates . Can either single number applied samples named vector values, names sample names. pold_from_nolabel Fix background mutation rate estimate mutation rates seen -label samples. default, single background rate used samples, inferred average mutation rate across -label samples. grouping_factors argument can specified use certain -label samples infer background mutation rates certain sets +label samples. grouping_factors pold_from_nolabel TRUE, grouping_factors specify sample-detail columns metadf used group -label samples . Average mutation rates group -label samples used background mutation rate estimate +label samples values relevant metadf columns.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mutation rates — EstimateMutRates","text":"EZbakRData object added mutrates slot containing estimated high low mutation rates mutation type modeled.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Estimate mutation rates — EstimateMutRates","text":"EstimateMutRates(EZbakRData): Method class EZbakRData Estimates mutation rates using fully memory object. EstimateMutRates(EZbakRArrowData): Method class EZbakRArrowData Estimate mutation rates using partially -disk object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/EstimateMutRates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mutation rates — EstimateMutRates","text":"","code":"# Simulate data to analyze simdata <- SimulateOneRep(30)  # Create EZbakR input metadf <- data.frame(sample = \"sampleA\", tl = 2) ezbdo <- EZbakRData(simdata$cB, metadf)  # Estimate mutation rates mutrates <- EstimateMutRates(ezbdo)"},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":null,"dir":"Reference","previous_headings":"","what":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"convenient wrapper tximport() importing isoform quantification data EZbakRData object. need run running EstimateIsoformFractions.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"","code":"ImportIsoformQuant(   obj,   files,   quant_tool = c(\"none\", \"salmon\", \"sailfish\", \"alevin\", \"piscem\", \"kallisto\", \"rsem\",     \"stringtie\"),   txIn = TRUE,   ... )"},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"obj EZbakRData object. files named vector paths transcript quantification files like import. passed first argument tximport::tximport() (also named files). names vector sample names appear metadf EZbakRData object. quant_tool String denoting type software used generate abundances. get passed type argument tximport::tximport(). described documentation tximport 'Options \"salmon\", \"sailfish\", \"alevin\", \"piscem\", \"kallisto\", \"rsem\", \"stringtie\", \"none\". argument used autofill arguments (geneIdCol, etc.) \"none\" means user specify columns. aware specifying type \"none\" ignore arguments (geneIdCol, etc.)'. Referenced 'arguments ' can specified part .... txIn Whether now providing isoform level quantification files. Alternative (txIn = FALSE) gene-level quantification. ImportIsoformQuant, txIn gets passed txIn txOut parameters tximport(). ... Additional arguments passed tximport::tximport(). Especially relevant set quant_tool \"none\".","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"EZbakRData object additional element readcounts list named \"isform_quant_<quant_tool>\". contains TPM, expected_count, effective length information transcript_id sample.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ImportIsoformQuant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import transcript isoform quantification into EZbakRData object — ImportIsoformQuant","text":"","code":"# Dependencies for example library(dplyr) library(data.table) #>  #> Attaching package: ‘data.table’ #> The following objects are masked from ‘package:dplyr’: #>  #>     between, first, last  # Simulate and analyze data simdata <- EZSimulate(30) ezbdo <- EZbakRData(simdata$cB, simdata$metadf) ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Hack to generate example quantification files savedir <- tempdir() rsem_data <- tibble(   transcript_id = paste0(\"tscript_feature\", 1:30),   gene_id = paste0(\"feature\", 1:30),   length = 1000,   effective_length = 1000,   expected_count = 1000,   TPM = 10,   FPKM = 10,   IsoPct = 1 )  fwrite(rsem_data, file.path(savedir, \"Sample_1.isoforms.results\"), sep = '\\t')  files <- file.path(savedir,\"Sample_1.isoforms.results\") names(files) <- \"Sample_1\"  # Read in file ezbdo <- ImportIsoformQuant(ezbdo, files, quant_tool = \"rsem\") #> reading in files with read.delim (install 'readr' package for speed up) #> 1  #>"},{"path":"https://isaacvock.github.io/EZbakR/reference/NormalizeForDropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","title":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","text":"Uses strategy described , similar originally presented Berg et al. 2024, normalize dropout. Normalizing dropout means identifying reference sample low dropout, estimating dropout sample relative sample.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/NormalizeForDropout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","text":"","code":"NormalizeForDropout(   obj,   normalize_across_tls = FALSE,   grouping_factors = NULL,   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   exactMatch = TRUE,   read_cutoff = 25 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/NormalizeForDropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","text":"obj EZbakRFractions object, EZbakRData object run EstimateFractions(). normalize_across_tls TRUE, samples different label times normalized finding max inferred degradation rate constant (kdeg) sample using reference. Degradation kinetics max assumed infer reference fraction news different label times grouping_factors sample-detail columns metadf used group -s4U samples calculating average -s4U RPM? default value NULL cause sample-detail columns used. features Character vector set features want stratify reads estimate proportions RNA population. default NULL expect one fractions table EZbakRFractions object. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features must exactly match features metadata given fractions table used. Means specify subset features default. Set FALSE like specify feature subset. read_cutoff Minimum number reads feature used fit dropout model.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/NormalizeForDropout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","text":"EZbakRData object specified \"fractions\" table replaced dropout corrected table.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/NormalizeForDropout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","text":"NormalizeForDropout() number unique advantages relative CorrectDropout(): NormalizeForDropout() require -label control data. NormalizeForDropout() compares internally normalized quantity (fraction new) across samples, advantages absolute dropout estimates derived comparisons normalized read counts CorrectDropout(). NormalizeForDropout() may used normalize half-life estimates across different biological contexts (e.g., different cell types). also caveats aware using NormalizeForDropout(): careful using NormalizeForDropout() multiple different label times. Dropout normalization requires sample compared reference sample label time. Thus, normalization performed separately groups samples different label times. extent dropout references different label times different, still unaccounted dropout biases samples. NormalizeForDropout() effectively assumes true global differences turnover kinetics RNA. differences actually exist (e.g., half-lives one context average truly lower another), NormalizeForDropout() risks normalizing away real differences. similar statistical normalization strategies implemented differential expression analysis software like DESeq2 assumes global differences RNA levels. default, samples label time normalized respect reference sample chosen among . want separate groups samples normalized together, specify columns metadf want additionally group factors grouping_factors parameter. behavior can changed setting normalize_across_tls TRUE, ","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/NormalizeForDropout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize for experimental/bioinformatic dropout of labeled RNA. — NormalizeForDropout","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Normalize for dropout ezbdo <- NormalizeForDropout(ezbdo)"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple simulation function — SimpleSim","title":"Simple simulation function — SimpleSim","text":"Simple simulation function","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple simulation function — SimpleSim","text":"","code":"SimpleSim(   nreads = 1000,   fn = 0.5,   pnew = 0.05,   pold = 0.001,   rlen = 100,   Ucont = 0.25 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple simulation function — SimpleSim","text":"nreads Number reads simulate fn Fraction reads new simulation. Whether read new determined draw Bernoulli(fn) distribution. pnew T--C mutation rate new reads pold T--C mutation rate old reads rlen Length simulated reads Ucont Fraction nucleotides simulated reads Ts (U RNA)","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimpleSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple simulation function — SimpleSim","text":"","code":"# Simulate 1 gene worth of data data simdata <- SimpleSim()"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateDynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of generalized dynamical system model. — SimulateDynamics","title":"Simulation of generalized dynamical system model. — SimulateDynamics","text":"SimulateDynamics() simulates specified dynamical system interconverting RNA species. required input similar EstimateDynamics(), .e., adjacency matrix describing set species related one another list formula relating actually assayed species modeled species. Currently, SimulateDynamics() implements naive heteroskedastic replicate variability simulation designed simulate multiple experimental conditions.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateDynamics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of generalized dynamical system model. — SimulateDynamics","text":"","code":"SimulateDynamics(   nfeatures,   graph,   metadf,   log_means,   log_sds,   ntreatments = 1,   treatment_effects = NULL,   formula_list = NULL,   unassigned_name = \"__no_feature\",   seqdepth = nfeatures * 2500,   dispersion = 100,   lfn_sd = 0.2,   effect_avg_default = 0,   effect_sd_default = 0.5,   fraction_affected_default = 0.5,   ... )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateDynamics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of generalized dynamical system model. — SimulateDynamics","text":"nfeatures Number \"features\" simulate data . \"feature\" case may contain number \"sub-features\". example, may want simulate pre-RNA mature RNA set \"genes\", case number features number genes. graph adjacency matrix describing reaction diagram graph relating various RNA species one another. metadf Data frame two required columns (sample tl). sample represents names given simulated sample. tl represents label time sample. Additional columns can specify features sample, like subcellular compartment sample taken . NOTE: sure actually using optional columns useful capacity anymore. log_means Vector log-Normal logmeans distribution feature-specific parameters drawn . Length vector max(entries graph), .e., number parameters specified model. log_sds Vector log-Normal logsds distribution feature-specific parameters drawn . ntreatments Number distinct experimental treatments simulate. default, single \"treatment\" (might refer wild-type, control) simulated. Increase like explore performing comparative dynamical systems modeling. treatment_effects Data frame describing effects treatment parameter. five columns: \"parameter_index\", \"treatment_index\", \"mean\", \"sd\", \"fraction_affected\". row corresponds effect ith (= treatment_index) treatment jth (j = parameter_index) kinetic parameter. Effect sizes, log-scale, drawn Normal distribution mean standard deviation set mean sd columns, respectively. number non-zero effects set \"fraction_affected\", equal ceiling(nfeatures * fraction_affected). treatment_index 1 ignored can either included . formula_list list named lists. names sub-list sample names found metadf. sub-list list formula relating feature names show columns simulated cB species modeled graph. needs specified want simulate scenario measured species sum modeled species. unassigned_name String give reads assigned given feature. seqdepth Total number reads sample. dispersion Negative binomial size parameter use simulating read counts lfn_sd Logit(fn) replicate variability. effect_avg_default ntreatments > 1, treatment_effects provided, value mean treatments parameters imputed treatment_effects. effect_sd_default ntreatments > 1, treatment_effects provided, value sd treatments parameters imputed treatment_effects. fraction_affected_default ntreatments > 1, treatment_effects provided, value fraction_affected treatments parameters imputed treatment_effects. ... Parameters passed SimulateOneRep().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"SimulateIsoforms() performs simple simulation isoform-specific kinetic parameters showcase test EstimateIsoformFractions(). assumes set reads (fraction total set funique parameter) map uniquely given isoform, rest ambiguous isoforms gene. Mutational content reads simulated SimulateOneRep().","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"","code":"SimulateIsoforms(   nfeatures,   nt = NULL,   seqdepth = nfeatures * 2500,   label_time = 4,   sample_name = \"sampleA\",   feature_prefix = \"Gene\",   pnew = 0.1,   pold = 0.002,   funique = 0.2,   readlength = 200,   Ucont = 0.25,   avg_numiso = 2,   psynthdiff = 0.5,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"nfeatures Number \"features\" simulate data . feature simulated number transcript isoforms nt (Optional), can provide vector number isoforms like simulate nfeatures features. Vector can either length 1, case many isoforms simulated features, length equal nfeatures. seqdepth Total number sequencing reads simulate label_time Length s^4^U feed simulate. sample_name Character vector assign sample column output simulated data table (cB table). feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. pnew Probability T mutated C read new. pold Probability T mutated C read old. funique Fraction reads uniquely \"map\" single isoform. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. avg_numiso Average number isoforms feature. Feature-specific isoform counts drawn Poisson distribution average. NOTE: insure features multiple isoforms, simulated number isoforms drawn Poisson distribution incremented 2. Thus, actual average number isoforms feature avg_numiso + 2. psynthdiff Percentage genes isoform abundance differences synthesis driven. synthesis driven, isoform abundance differences driven differences isoform kdegs. logkdeg_mean meanlog log-normal distribution kdegs simulated logkdeg_sd sdlog log-normal distribution kdegs simulated logksyn_mean meanlog log-normal distribution ksyns simulated logksyn_sd sdlog log-normal distribution ksyns simulated","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateIsoforms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of transcript isoform kinetic parameters. — SimulateIsoforms","text":"","code":"simdata <- SimulateIsoforms(30)"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"SimulateMultiCondition highly flexibly simulator combines linear modeling log(kdeg)'s log(ksyn)'s SimulateOneRep simulate NR-seq dataset. linear model allows simulate multiple distinct treatments, batch effects, interaction effects, etc. current downside flexibility relative complexity implement. Easier use simulators way EZbakR.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"","code":"SimulateMultiCondition(   nfeatures,   metadf,   mean_formula,   param_details = NULL,   seqdepth = nfeatures * 2500,   label_time = 2,   pnew = 0.05,   pold = 0.001,   readlength = 200,   Ucont = 0.25,   feature_prefix = \"Gene\",   dispslope = 5,   dispint = 0.01,   logkdegsdtrend_slope = -0.3,   logkdegsdtrend_intercept = -2.25,   logksynsdtrend_slope = -0.3,   logksynsdtrend_intercept = -2.25,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   logkdeg_diff_avg = 0,   logksyn_diff_avg = 0,   logkdeg_diff_sd = 0.5,   logksyn_diff_sd = 0.5,   pdiff_kd = 0.1,   pdiff_ks = 0,   pdiff_both = 0,   pdo = 0 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"nfeatures Number \"features\" (e.g., genes) simulate data metadf data frame following columns: sample: Names given samples simulate. : number columns names (taken metadf columns) storing factors samples can stratified. can referenced mean_formula, described . parameters (described ) can also included metadf specify sample-specific simulation parameter: seqdepth label_time pnew pold readlength Ucont mean_formula formula object specifies linear model used relate factors  columns metadf average log(kdegs) log(ksyns) sample. param_details data frame one row column design matrix obtained model.matrix(mean_formula, metadf) describes simulate linear model parameters. columns data frame : param: Name linear model parameter appears column names design matrix model.matrix(mean_formula, metadf). reference: Boolean; TRUE want treat parameter \"reference\". means parameter values global parameters set equal unless otherwise determined (see pdiff_* parameters determined parameter differ reference). global: Boolean; TRUE want treat parameter global parameter. means single value used features. logkdeg_mean: parameter reference, value log(kdeg) linear model drawn normal distribution mean. global parameter, value used. neither , value log(kdeg) linear model either reference (difference condition's value reference) reference's value + normally distributed random variable centered value. logkdeg_sd: sd used draws normal distribution described logkdeg_mean. logksyn_mean: logkdeg_mean log(ksyn) linear model. logksyn_sd: logkdeg_sd log(kdeg) linear model. pdiff_ks: Proportion features whose value parameter log(ksyn) linear model differ reference's. number 0 1, inclusive. example, pdiff_ks 0.1, 10% features, parameter equal reference parameter + normally distributed random variable mean logksyn_mean sd logksyn_sd. 90% features, parameter equal reference. pdiff_kd: pdiff_ks log(kdeg) linear model. pdiff_both: Proportion features whose value parameter log(kdeg) log(ksyn) linear models differ reference. Value must 0 min(c(pdiff_kd, pdiff_ks)) row. param_details specified user, first column design matrix assumed represent reference parameter, parameters assumed non-global, logkdeg_mean logksyn_mean set equivalently named parameter values described reference logkdeg_diff_avg logksyn_diff_avg parameters, logkdeg_sd logksyn_sd set equivalently named parameter values described reference logkdeg_diff_sd logksyn_diff_sd parameters, pdiff_kd, pdiff_ks, pdiff_both set equivalently named parameter values. seqdepth relevant read_vect provided; case, total number reads simulate. label_time Length s^4^U feed simulate. pnew Probability T mutated C read new. pold Probability T mutated C read old. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. dispslope Negative binomial dispersion parameter \"slope\" respect read counts. See DESeq2 paper dispersion model used. dispint Negative binomial dispersion parameter \"intercept\" respect read counts. See DESeq2 paper dispersion model used. logkdegsdtrend_slope Slope log10(read count) vs. log(kdeg) replicate variability trend logkdegsdtrend_intercept Intercept log10(read count) vs. log(kdeg) replicate variability trend logksynsdtrend_slope Slope log10(read count) vs. log(ksyn) replicate variability trend logksynsdtrend_intercept Intercept log10(read count) vs. log(ksyn) replicate variability trend logkdeg_mean Mean normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logkdeg_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_mean Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logksyn_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_avg Mean normal distribution non-reference log(kdeg) linear model parameters drawn feature param_details provided. logksyn_diff_avg Mean normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. logkdeg_diff_sd Standard deviation normal distribution reference log(kdeg) linear model parameter drawn feature param_details provided. logksyn_diff_sd Standard deviation normal distribution reference log(ksyn) linear model parameter drawn feature param_details provided. pdiff_kd Proportion features non-reference log(kdeg) linear model parameters differ reference. pdiff_ks Proportion features non-reference log(ksyn) linear model parameters differ reference. pdiff_both Proportion features non-reference log(kdeg) log(ksyn) linear model parameters differ reference. ksyns simulated pdo Dropout rate; think probability s4U containing molecule lost library preparation sequencing. pdo 0 (default) dropout.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiCondition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate NR-seq data for multiple replicates of multiple biological conditions — SimulateMultiCondition","text":"","code":"simdata <- SimulateMultiCondition(30,                                   data.frame(sample = c('sampleA', 'sampleB'),                                   treatment = c('treatment1', 'treatment2')),                                   mean_formula = ~treatment-1)"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate one replicate of multi-label NR-seq data — SimulateMultiLabel","title":"Simulate one replicate of multi-label NR-seq data — SimulateMultiLabel","text":"Generalizes SimulateOneRep() simulate combination mutation types. Currently, kinetic model used relate certain parameters fractions reads belonging simulated mutational population. Instead fractions drawn Dirichlet distribution gene-specific parameters.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate one replicate of multi-label NR-seq data — SimulateMultiLabel","text":"","code":"SimulateMultiLabel(   nfeatures,   populations = c(\"TC\"),   fraction_design = create_fraction_design(populations),   fractions_matrix = NULL,   read_vect = NULL,   sample_name = \"sampleA\",   feature_prefix = \"Gene\",   kdeg_vect = NULL,   ksyn_vect = NULL,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   phighs = stats::setNames(rep(0.05, times = length(populations)), populations),   plows = stats::setNames(rep(0.002, times = length(populations)), populations),   seqdepth = nfeatures * 2500,   readlength = 200,   alpha_min = 3,   alpha_max = 6,   Ucont = 0.25,   Acont = 0.25,   Gcont = 0.25,   Ccont = 0.25 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate one replicate of multi-label NR-seq data — SimulateMultiLabel","text":"nfeatures Number \"features\" (e.g., genes) simulate data populations Vector mutation populations want simulate. fraction_design Fraction design matrix, specifying potential mutational populations actually exist. See ?EstimateFractions details. fractions_matrix Matrix fractions mutational population simulate. provided, simulated. One row feature, one column mutational population, rows sum 1. read_vect Vector length = nfeatures; specifies number reads simulated feature. provided, number reads simulated equal round(seqdepth * (ksyn_i/kdeg_i)/sum(ksyn/kdeg)). words, normalized steady-state abundance feature multiplied total number reads simulated rounded nearest integer. sample_name Character vector assign sample column output simulated data table (cB table). feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. kdeg_vect Vector length = nfeatures; specifies degradation rate constant use feature's simulation. provided fn_vect , kdeg_vect = -log(1 - fn_vect)/label_time. kdeg_vect fn_vect provided, feature's kdeg_vect value drawn log-normal distrubition meanlog = logkdeg_mean sdlog = logkdeg_sd. kdeg_vect actually simulated case read_vect also provided, used simulate read counts described . ksyn_vect Vector length = nfeatures; specifies synthesis rate constant use feature's simulation. provided, read_vect also provided, feature's ksyn_vect value drawn log-normal distribution meanlog = logksyn_mean sdlog = logksyn_sd. ksyn's need simulated read_vect provided, influence read counts. logkdeg_mean necessary, meanlog log-normal distribution kdegs simulated logkdeg_sd necessary, sdlog log-normal distribution kdegs simulated logksyn_mean necessary, meanlog log-normal distribution ksyns simulated logksyn_sd necessary, sdlog log-normal distribution ksyns simulated phighs Vector probabilities mutation rates labeled reads type denoted populations. named vector, names corresponding population. plows Vector probabilities mutation rates unlabeled reads type denoted populations. named vector, names corresponding population. seqdepth relevant read_vect provided; case, total number reads simulate. readlength Length simulated reads. simple simulation, reads simulated exactly length. alpha_min Minimum possible value alpha element Dirichlet random variable alpha_max Maximum possible value alpha element Dirichlet random variable Ucont Probability nucleotide simulated read U. Acont Probability nucleotide simulated read . Gcont Probability nucleotide simulated read G. Ccont Probability nucleotide simulated read C.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateMultiLabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate one replicate of multi-label NR-seq data — SimulateMultiLabel","text":"","code":"simdata <- SimulateMultiLabel(3) #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ℹ Using compatibility `.name_repair`. #> ℹ The deprecated feature was likely used in the EZbakR package. #>   Please report the issue to the authors."},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a single replicate of NR-seq data — SimulateOneRep","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"SimulateOneRep, users option either provide vectors feature-specific read counts, fraction news, kdegs, ksyns simulation, drawn relevant distributions whose properties can tuned various optional parameters SimulateOneRep. number mutable nucleotides (nT) read drawn binomial distribution readlength trials probability \"success\" equal Ucont. read's status new old drawn Bernoulli distribution probability \"success\" equal feature's fraction new. read new, number mutations read drawn binomial distribution probability mutation equal pnew. read old, number mutations instead drawn binomial distribution probability mutation equal pold.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"","code":"SimulateOneRep(   nfeatures,   read_vect = NULL,   label_time = 2,   sample_name = \"sampleA\",   feature_prefix = \"Gene\",   fn_vect = NULL,   kdeg_vect = NULL,   ksyn_vect = NULL,   pnew = 0.05,   pold = 0.002,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   seqdepth = nfeatures * 2500,   readlength = 200,   Ucont = 0.25,   feature_pnew = FALSE,   pnew_kdeg_corr = FALSE,   logit_pnew_mean = -2.5,   logit_pnew_sd = 0.1 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"nfeatures Number \"features\" (e.g., genes) simulate data read_vect Vector length = nfeatures; specifies number reads simulated feature. provided, number reads simulated equal round(seqdepth * (ksyn_i/kdeg_i)/sum(ksyn/kdeg)). words, normalized steady-state abundance feature multiplied total number reads simulated rounded nearest integer. label_time Length s^4^U feed simulate. sample_name Character vector assign sample column output simulated data table (cB table). feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. fn_vect Vector length = nfeatures; specifies fraction new use feature's simulation. provided kdeg_vect , fn_vect = 1 - exp(-kdeg_vect*label_time). fn_vect kdeg_vect provided, kdegs simulated joint distribution described converted fn_vect kdeg_vect user-provided. kdeg_vect Vector length = nfeatures; specifies degradation rate constant use feature's simulation. provided fn_vect , kdeg_vect = -log(1 - fn_vect)/label_time. kdeg_vect fn_vect provided, feature's kdeg_vect value drawn log-normal distrubition meanlog = logkdeg_mean sdlog = logkdeg_sd. kdeg_vect actually simulated case read_vect also provided, used simulate read counts described . ksyn_vect Vector length = nfeatures; specifies synthesis rate constant use feature's simulation. provided, read_vect also provided, feature's ksyn_vect value drawn log-normal distribution meanlog = logksyn_mean sdlog = logksyn_sd. ksyn's need simulated read_vect provided, influence read counts. pnew Probability T mutated C read new. pold Probability T mutated C read old. logkdeg_mean necessary, meanlog log-normal distribution kdegs simulated logkdeg_sd necessary, sdlog log-normal distribution kdegs simulated logksyn_mean necessary, meanlog log-normal distribution ksyns simulated logksyn_sd necessary, sdlog log-normal distribution ksyns simulated seqdepth relevant read_vect provided; case, total number reads simulate. readlength Length simulated reads. simple simulation, reads simulated exactly length. Ucont Probability nucleotide simulated read U. feature_pnew Boolean; TRUE, simulate different pnew feature pnew_kdeg_corr Boolean; relevant feature_pnew TRUE. , setting pnew_kdeg_corr TRUE ensure higher kdeg transcripts higher pnew. logit_pnew_mean feature_pnew TRUE, logit(pnew) feature drawn normal distribution mean. logit_pnew_sd feature_pnew TRUE, logit(pnew) feature drawn normal distribution standard deviation.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/SimulateOneRep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a single replicate of NR-seq data — SimulateOneRep","text":"","code":"simdata <- SimulateOneRep(30)"},{"path":"https://isaacvock.github.io/EZbakR/reference/VectSimulateMultiLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized simulation of one replicate of multi-label NR-seq data — VectSimulateMultiLabel","title":"Vectorized simulation of one replicate of multi-label NR-seq data — VectSimulateMultiLabel","text":"Generalizes SimulateOneRep() simulate combination mutation types. Currently, kinetic model used relate certain parameters fractions reads belonging simulated mutational population. Instead fractions drawn Dirichlet distribution gene-specific parameters.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/VectSimulateMultiLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized simulation of one replicate of multi-label NR-seq data — VectSimulateMultiLabel","text":"","code":"VectSimulateMultiLabel(   nfeatures,   populations = c(\"TC\"),   fraction_design = create_fraction_design(populations),   fractions_matrix = NULL,   read_vect = NULL,   sample_name = \"sampleA\",   feature_prefix = \"Gene\",   kdeg_vect = NULL,   ksyn_vect = NULL,   logkdeg_mean = -1.9,   logkdeg_sd = 0.7,   logksyn_mean = 2.3,   logksyn_sd = 0.7,   phighs = stats::setNames(rep(0.05, times = length(populations)), populations),   plows = stats::setNames(rep(0.002, times = length(populations)), populations),   seqdepth = nfeatures * 2500,   readlength = 200,   alpha_min = 3,   alpha_max = 6,   Ucont = 0.25,   Acont = 0.25,   Gcont = 0.25,   Ccont = 0.25 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/VectSimulateMultiLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized simulation of one replicate of multi-label NR-seq data — VectSimulateMultiLabel","text":"nfeatures Number \"features\" (e.g., genes) simulate data populations Vector mutation populations want simulate. fraction_design Fraction design matrix, specifying potential mutational populations actually exist. See ?EstimateFractions details. fractions_matrix Matrix fractions mutational population simulate. provided, simulated. One row feature, one column mutational population, rows sum 1. read_vect Vector length = nfeatures; specifies number reads simulated feature. provided, number reads simulated equal round(seqdepth * (ksyn_i/kdeg_i)/sum(ksyn/kdeg)). words, normalized steady-state abundance feature multiplied total number reads simulated rounded nearest integer. sample_name Character vector assign sample column output simulated data table (cB table). feature_prefix Name given -th feature paste0(feature_prefix, ). Shows feature column output simulated data table. kdeg_vect Vector length = nfeatures; specifies degradation rate constant use feature's simulation. provided fn_vect , kdeg_vect = -log(1 - fn_vect)/label_time. kdeg_vect fn_vect provided, feature's kdeg_vect value drawn log-normal distrubition meanlog = logkdeg_mean sdlog = logkdeg_sd. kdeg_vect actually simulated case read_vect also provided, used simulate read counts described . ksyn_vect Vector length = nfeatures; specifies synthesis rate constant use feature's simulation. provided, read_vect also provided, feature's ksyn_vect value drawn log-normal distribution meanlog = logksyn_mean sdlog = logksyn_sd. ksyn's need simulated read_vect provided, influence read counts. logkdeg_mean necessary, meanlog log-normal distribution kdegs simulated logkdeg_sd necessary, sdlog log-normal distribution kdegs simulated logksyn_mean necessary, meanlog log-normal distribution ksyns simulated logksyn_sd necessary, sdlog log-normal distribution ksyns simulated phighs Vector probabilities mutation rates labeled reads type denoted populations. named vector, names corresponding population. plows Vector probabilities mutation rates unlabeled reads type denoted populations. named vector, names corresponding population. seqdepth relevant read_vect provided; case, total number reads simulate. readlength Length simulated reads. simple simulation, reads simulated exactly length. alpha_min Minimum possible value alpha element Dirichlet random variable alpha_max Maximum possible value alpha element Dirichlet random variable Ucont Probability nucleotide simulated read U. Acont Probability nucleotide simulated read . Gcont Probability nucleotide simulated read G. Ccont Probability nucleotide simulated read C.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/VectSimulateMultiLabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized simulation of one replicate of multi-label NR-seq data — VectSimulateMultiLabel","text":"","code":"simdata <- VectSimulateMultiLabel(30)"},{"path":"https://isaacvock.github.io/EZbakR/reference/VisualizeDropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Make plots to visually assess dropout trends — VisualizeDropout","title":"Make plots to visually assess dropout trends — VisualizeDropout","text":"Plots measure dropout (ratio -label +label RPM) function feature fraction new, model fit depicted. Use function qualitatively assess model fit whether modeling assumptions met.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/VisualizeDropout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make plots to visually assess dropout trends — VisualizeDropout","text":"","code":"VisualizeDropout(   obj,   plot_type = c(\"grandR\", \"bakR\"),   grouping_factors = NULL,   features = NULL,   populations = NULL,   fraction_design = NULL,   repeatID = NULL,   exactMatch = TRUE,   n_min = 50 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/VisualizeDropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make plots to visually assess dropout trends — VisualizeDropout","text":"obj EZbakRFractions object, EZbakRData object run EstimateFractions(). plot_type type plot make. Options : bakR: X-axis fraction new (.k.. NTR) Y-axis dropout (label n / label n) grandR: X-axis fraction new rank (.k.. NTR rank) Y-axis log(dropout) grouping_factors sample-detail columns metadf used group -s4U samples calculating average -s4U RPM? default value NULL cause sample-detail columns used. features Character vector set features want stratify reads estimate proportions RNA population. default NULL expect one fractions table EZbakRFractions object. populations Mutational populations analyzed generate fractions table use. example, \"TC\" standard s4U-based nucleotide recoding experiment. fraction_design \"Design matrix\" specifying RNA populations exist samples. default, created automatically assume combinations mutrate_populations requested analyze present data. case data, create one manually. See docs EstimateFractions (run ?EstimateFractions()) details. repeatID multiple fractions tables exist metadata, numerical index distinguished. exactMatch TRUE, features must exactly match features metadata given fractions table used. Means specify subset features default. Set FALSE like specify feature subset. n_min Minimum raw number reads make plot","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/VisualizeDropout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make plots to visually assess dropout trends — VisualizeDropout","text":"list ggplot2 objects, one +label sample.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/VisualizeDropout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make plots to visually assess dropout trends — VisualizeDropout","text":"","code":"# Simulate data to analyze simdata <- EZSimulate(30)  # Create EZbakR input ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Estimate Fractions ezbdo <- EstimateFractions(ezbdo) #> Estimating mutation rates #> Summarizing data for feature(s) of interest #> Averaging out the nucleotide counts for improved efficiency #> Estimating fractions #> Processing output  # Visualize Dropout ezbdo <- VisualizeDropout(ezbdo) #> Making plot for sample sample1... #> Making plot for sample sample2... #> Making plot for sample sample3... #> Making plot for sample sample4... #> Making plot for sample sample5... #> Making plot for sample sample6..."},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a fraction_design table for EstimateFractions. — create_fraction_design","title":"Generate a fraction_design table for EstimateFractions. — create_fraction_design","text":"fraction_design table denotes populations labeled/unlabeled RNA present data. fraction_design table one column mutation type (e.g., TC) present cB file, one column named \"present\". entry either TRUE FALSE. rows include possible combinations TRUE FALSE mutation types columns. value TRUE mutation type column represents population reads high amounts (average) mutation type. example, fraction_design table mutation type columns \"TC\" \"GA\", row TC == TRUE GA == FALSE represents population reads high T--C mutation content low G--mutation content. words, reads RNA synthesized presence s4U s6G. population exists data, \"present\" column row value TRUE.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a fraction_design table for EstimateFractions. — create_fraction_design","text":"","code":"create_fraction_design(mutrate_populations)"},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a fraction_design table for EstimateFractions. — create_fraction_design","text":"mutrate_populations Character vector set mutational populations present data. example, s4U fed data standard nucleotide recoding chemistry (e.g., TimeLapse, SLAM, TUC, AMUC, etc.) mutrate_populations c(\"TC\"). Dual labeling experiments s4U s6G feeds mutrate_populations c(\"TC\", \"GA\").","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a fraction_design table for EstimateFractions. — create_fraction_design","text":"fraction_design table assumes every possible combination mutational populations listed mutrate_populations present data. present column can modified assumption incorrect. default chosen theory work analyses, may just unnecessarily inefficient estimate abundance populations exist.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/create_fraction_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a fraction_design table for EstimateFractions. — create_fraction_design","text":"","code":"# Standard, single-label NR-seq fd <- create_fraction_design(c(\"TC\"))  # Dual-label NR-seq fd2 <- create_fraction_design(c(\"TC\", \"GA\"))  # Adjust dual-label output for TILAC fd2$present <- ifelse(fd2$TC & fd2$GA, FALSE, fd2$present)"},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":null,"dir":"Reference","previous_headings":"","what":"Example cB table — example_cB","title":"Example cB table — example_cB","text":"example cB table used create EZbakRData object. cB table subset cB file DCP2 KO dataset published Luo et al., 2020. original file large (69 MB), example cB file downsampled contains subset reads chromosome 21.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example cB table — example_cB","text":"","code":"example_cB"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":"example-cb","dir":"Reference","previous_headings":"","what":"example_cB","title":"Example cB table — example_cB","text":"tibble 10,000 rows 7 columns: sample Sample name rname Chromosome name GF Gene name reads aligning region gene XF Gene name reads aligning exclusively exonic regions gene TC Number T--C mutations nT Number Ts n Number reads value first 6 columns","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_cB.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example cB table — example_cB","text":"Luo et al. (2020) Biochemistry. 59(42), 4121-4142","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":null,"dir":"Reference","previous_headings":"","what":"Example metadf — example_metadf","title":"Example metadf — example_metadf","text":"example metadf table used create EZbakRData object. metadf describes DCP2 KO dataset published Luo et al., 2020.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example metadf — example_metadf","text":"","code":"example_metadf"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":"example-metadf","dir":"Reference","previous_headings":"","what":"example_metadf","title":"Example metadf — example_metadf","text":"tibble 6 rows 3 columns sample Sample name tl Metabolic label feed time genotype Whether sample collected WT DCP2 KO cells","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/example_metadf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example metadf — example_metadf","text":"Luo et al. (2020) Biochemistry. 59(42), 4121-4142","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"Uses TMM normalization strategy, similar used DESeq2 edgeR.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"","code":"get_normalized_read_counts(   obj,   features_to_analyze,   fractions_name = NULL,   feature_lengths = NULL )  # S3 method for class 'EZbakRFractions' get_normalized_read_counts(   obj,   features_to_analyze,   fractions_name = NULL,   feature_lengths = NULL )  # S3 method for class 'EZbakRData' get_normalized_read_counts(   obj,   features_to_analyze,   fractions_name = NULL,   feature_lengths = NULL )"},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"obj EZbakRData EZbakRFractions object. features_to_analyze Features relevant table fractions_name Name fractions table use feature_lengths Table effective lengths feature combination data. example, analysis includes features named GF XF, data frame columns GF, XF, length.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"Data table normalized read counts.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"get_normalized_read_counts(EZbakRFractions): Method class EZbakRFractions Get normalized read counts fractions table. get_normalized_read_counts(EZbakRData): Method class EZbakRData Get normalized read counts cB table.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/get_normalized_read_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get normalized read counts from either a cB table or EZbakRFractions object. — get_normalized_read_counts","text":"","code":"# Simulate data simdata <- EZSimulate(30)  # Create EZbakRData object ezbdo <- EZbakRData(simdata$cB, simdata$metadf)  # Get normalized read counts reads <- get_normalized_read_counts(ezbdo, features_to_analyze = \"feature\")"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","title":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","text":"new_EZbakRArrowData efficiently creates object class EZbakRArrowData. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","text":"","code":"new_EZbakRArrowData(cBds, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRArrowData object constructor for internal use — new_EZbakRArrowData","text":"cBds Arrow dataset tracking sample ID, mutational nucleotide content, feature assignment sequencing reads. metadf Data frame tracking features samples included cBds.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRDataobject constructor for internal use — new_EZbakRData","title":"EZbakRDataobject constructor for internal use — new_EZbakRData","text":"new_EZbakRData efficiently creates object class EZbakRData. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRDataobject constructor for internal use — new_EZbakRData","text":"","code":"new_EZbakRData(cB, metadf)"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRDataobject constructor for internal use — new_EZbakRData","text":"cB Data frame tracking sample ID, mutational nucleotide content, feature assignment sequencing reads. metadf Data frame tracking features samples included cB.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRFractions object constructor — new_EZbakRFractions","title":"EZbakRFractions object constructor — new_EZbakRFractions","text":"new_EZbakRFractions efficiently creates object class EZbakRFractions. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRFractions object constructor — new_EZbakRFractions","text":"","code":"new_EZbakRFractions(fractions, metadf, name = NULL, character_limit = 20)"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRFractions object constructor — new_EZbakRFractions","text":"fractions Data frame containing information fraction reads mutational population interest. metadf Data frame reporting aspects samples included name Optional; name give fractions table. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. fractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRKinetics object constructor — new_EZbakRKinetics","title":"EZbakRKinetics object constructor — new_EZbakRKinetics","text":"new_EZbakRKinetics efficiently creates object class EZbakRKinetics. perform rigorous checks legitimacy object.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRKinetics object constructor — new_EZbakRKinetics","text":"","code":"new_EZbakRKinetics(   kinetics,   features,   metadf,   name = NULL,   character_limit = 20 )"},{"path":"https://isaacvock.github.io/EZbakR/reference/new_EZbakRKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRKinetics object constructor — new_EZbakRKinetics","text":"kinetics Data frame containing information kinetic parameters interest set features tracked. features Features tracked kinetics data frame. Needs specified explicitly automatically inferred. metadf Data frame describing samples included name Optional; name give fractions table. character_limit Maximum number characters naming fractions output. EZbakR try name \"_\" separated character vector features analyzed. name greater character_limit, default \"fraction#\", \"#\" represents simple numerical ID table. kinetics","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ode_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Example ODE model graphs and formulas — ode_models","title":"Example ODE model graphs and formulas — ode_models","text":"list example \"graphs\" specie formulas can passed EZDynamics SimulateDynamics, used hood EZSimulate facilitate simulations ODE models.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ode_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example ODE model graphs and formulas — ode_models","text":"","code":"ode_models"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/ode_models.html","id":"ode-models","dir":"Reference","previous_headings":"","what":"ode_models","title":"Example ODE model graphs and formulas — ode_models","text":"list 6 elements nuc2cyto Simplest model nuclear cytoplasmic RNA dynamics: 0 -> N -> C -> 0 preRNA Simplest model pre-RNA mature RNA dynamics: 0 -> P -> M -> 0 preRNAwithPdeg preRNA, now pre-RNA can also degrade. nuc2cytowithNdeg nuc2cyto, now nuclear RNA can also degrade. subtlseq Subcellular TimeLapse-seq model, similar described Ietswaart et al., 2024. Simplest model discussed , lacking nuclear degradation: 0 -> CH -> NP -> CY -> PL -> 0, CY can also degrade. nuc2cytowithpreRNA Combination nuc2cyto preRNA preRNA first synthesized, either processed exported cytoplasm. Processing can also occur cytoplasm, mature nuclear RNA can exported cytoplasm.  mature RNA degrades. element list two items graph Matrix representation ODE system graph. formulas Formula objects relating measured species modeled species.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/ode_models.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example ODE model graphs and formulas — ode_models","text":"Ietswaart et al. (2024) Molecular Cell. 84(14), 2765-2784.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/print.EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for EZbakRArrowData objects — print.EZbakRArrowData","title":"Print method for EZbakRArrowData objects — print.EZbakRArrowData","text":"Print method EZbakRArrowData objects","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/print.EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for EZbakRArrowData objects — print.EZbakRArrowData","text":"","code":"# S3 method for class 'EZbakRArrowData' print(x, max_name_chars = 60, ...)"},{"path":"https://isaacvock.github.io/EZbakR/reference/print.EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for EZbakRArrowData objects — print.EZbakRArrowData","text":"x EZbakRArrowData object. max_name_chars Maximum number characters print line ... Ignored","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/print.EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for EZbakRData objects — print.EZbakRData","title":"Print method for EZbakRData objects — print.EZbakRData","text":"Print method EZbakRData objects","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/print.EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for EZbakRData objects — print.EZbakRData","text":"","code":"# S3 method for class 'EZbakRData' print(x, max_name_chars = 60, ...)"},{"path":"https://isaacvock.github.io/EZbakR/reference/print.EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for EZbakRData objects — print.EZbakRData","text":"x EZbakRData object. max_name_chars Maximum number characters print line ... Ignored","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/standard_fraction_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard fraction_design table for EstimateFractions — standard_fraction_design","title":"Standard fraction_design table for EstimateFractions — standard_fraction_design","text":"example fraction_design table standard NR-seq experiment s^4U labeling. table tells EstimateFractions two populations reads, one high T--C mutation content one low T--C mutation content","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/standard_fraction_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard fraction_design table for EstimateFractions — standard_fraction_design","text":"","code":"standard_fraction_design"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/standard_fraction_design.html","id":"standard-fraction-design","dir":"Reference","previous_headings":"","what":"standard_fraction_design","title":"Standard fraction_design table for EstimateFractions — standard_fraction_design","text":"tibble 2 rows 2 columns: TC Boolean denoting population represented row high T--C mutational content present Boolean denoting population represented row expected present dataset","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/tilac_fraction_design.html","id":null,"dir":"Reference","previous_headings":"","what":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","title":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","text":"example fraction_design table TILAC experiment. TILAC originally described Courvan et al., 2022. method, two populations RNA, one s^4U fed cells one s^6G fed cells, pooled prepped sequencing together. allows internally controlled comparisons RNA abundance without spike-ins. s^4U recoded cytosine analog TimeLapse chemistry (similar chemistry) s^6G recoded adenine analog. Thus, fraction_design includes columns called TC GA. unique aspect TILAC fraction_design table one possible populations, TC GA TRUE, denoted present (present = FALSE). RNA exposed s^4U s^6G, thus population reads high T--C G--mutational content exist.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/tilac_fraction_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","text":"","code":"tilac_fraction_design"},{"path":[]},{"path":"https://isaacvock.github.io/EZbakR/reference/tilac_fraction_design.html","id":"tilac-fraction-design","dir":"Reference","previous_headings":"","what":"tilac_fraction_design","title":"TILAC fraction_design table for EstimateFractions — tilac_fraction_design","text":"tibble 4 rows 3 columns: TC Boolean denoting population represented row high T--C mutational content GA Boolean denoting population represented row high G--mutational content present Boolean denoting population represented row expected present dataset","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRArrowData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","title":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","text":"validate_EZbakRArrowData ensures input EZbakRArrowData object construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRArrowData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","text":"","code":"validate_EZbakRArrowData(obj)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRArrowData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRArrowData EZbakRArrowData validator — validate_EZbakRArrowData","text":"obj object class EZbakRArrowData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRData.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRDataobject validator — validate_EZbakRData","title":"EZbakRDataobject validator — validate_EZbakRData","text":"validate_EZbakRData ensures input EZbakRData construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRDataobject validator — validate_EZbakRData","text":"","code":"validate_EZbakRData(obj)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRDataobject validator — validate_EZbakRData","text":"obj object class EZbakRData","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRFractions.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRFractions object validator — validate_EZbakRFractions","title":"EZbakRFractions object validator — validate_EZbakRFractions","text":"validate_EZbakRFractions ensures input EZbakRFractions construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRFractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRFractions object validator — validate_EZbakRFractions","text":"","code":"validate_EZbakRFractions(obj)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRFractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRFractions object validator — validate_EZbakRFractions","text":"obj object class EZbakRFractions","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRKinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"EZbakRKinetics object validator — validate_EZbakRKinetics","title":"EZbakRKinetics object validator — validate_EZbakRKinetics","text":"validate_EZbakRKinetics ensures input EZbakRKinetics construction valid.","code":""},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRKinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EZbakRKinetics object validator — validate_EZbakRKinetics","text":"","code":"validate_EZbakRKinetics(obj, features)"},{"path":"https://isaacvock.github.io/EZbakR/reference/validate_EZbakRKinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EZbakRKinetics object validator — validate_EZbakRKinetics","text":"obj object class EZbakRKinetics features Features tracked kinetics data frame. Needs specified explicitly automatically inferred.","code":""}]
